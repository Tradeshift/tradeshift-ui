<!DOCTYPE html>
<html>
	<head>
		<title>Table Select</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body class="nosticky">
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Selecting the rows</h1>
				<section>
					<p>You can mark rows as <code>selectable</code> with the method of that name. The callback fires whenever one or more rows changes state. The arguments <code>selected</code> and <code>unselected</code> arguments are both arrays-of-rowindexes.</p>
					<ul class="splitscreen">
						<li>							
							<figure data-ts="DoxScript">
								<script type="runnable">
										var table = ts.ui.get('#table1');
										var popup = ts.ui.Notification;
										table.rows([
											{cells: ['A', 'D', 'G'], selected: true},
											{cells: ['B', 'E', 'H']},
											{cells: ['C', 'F', 'I']},
										]);
										table.selectable(function debug(selected, unselected) {
											popup.success([
												JSON.stringify(selected),
												JSON.stringify(unselected)
											].join(', '));
										});
									</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table1"></div>
						</li>
					</ul>
					<p>You can mark individual rows as un-selectable with the <code>selectable</code> property.</p>
					<ul class="splitscreen">
						<li>
							
							<figure data-ts="DoxScript">
								<script type="runnable">
										var table = ts.ui.get('#table5');
										var popup = ts.ui.Notification;
										table.rows([
											{cells: ['A', 'D', 'G']},
											{cells: ['B', 'E', 'H'], selectable: false},
											{cells: ['C', 'F', 'I']},
										]);
										table.selectable(function debug(selected, unselected) {
											popup.success([
												JSON.stringify(selected),
												JSON.stringify(unselected)
											].join(', '));
										});
									</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table5"></div>
						</li>
					</ul>
					<p>You can control selection using the methods <code>select</code>, <code>unselect</code> and <code>toggle</code>. The methods take one or more indexes (or an array of indexes) as arguments.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
										var table = ts.ui.get('#table3');
										table.selectable().rows([
											['A', 'E', 'I'],
											['B', 'F', 'J'],
											['C', 'G', 'K'],
											['D', 'H', 'L'],
										]).select(0, 1).toggle([2, 3]);
									</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table3"></div>
						</li>
					</ul>
					<p>You can also omit the argument to <code>select</code>, <code>unselect</code> or <code>toggle</code> everything.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#table3').toggle();
						</script>
					</figure>
					<p>You can retrieve the selected indexes (as an array) with the <code>selected</code> method.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var table = ts.ui.get('#table3');
							var array = table.selected();
							var popup = ts.ui.Notification;
							popup.success(JSON.stringify(array));
						</script>
					</figure>
					<p>You can also confirm selection by passing one or more indexes (or an array).</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var table = ts.ui.get('#table3');
							var popup = ts.ui.Notification;
							if(table.selected(0, 1, 2, 3)) {
								popup.success('All selected!');
							} else {
								popup.warning('You must select them all.');
							}
						</script>
					</figure>
					<p>If you add columns to the table, you'll get a selection menu in the header.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#table2');
									table.selectable();
									table.cols(['One', 'Two', 'Three']);
									table.rows([
										{cells: ['A', 'D', 'G']},
										{cells: ['B', 'E', 'H']},
										{cells: ['C', 'F', 'I']},
									]);
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table2"></div>
						</li>
					</ul>
					<p>The menu selects or deselects all visible rows. If there are multiple pages in the table, you'll be presented with the opportunity to select all pages.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									$.getJSON('assets/rowdata.json', function(json) {
										var table = ts.ui.get('#table4').selectable();
										table.cols(['ID', 'Name', 'Price']).rows(json).max(5);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table4"></div>
						</li>
					</ul>
					<p>If you are loading the table data incrementally (so you manage <a data-ts="Button" href="/#components/table/paging.html">paging</a> yourself), you might like to know when <em>all</em> or <em>none</em> is selected via the menu. The Table supports two additional callbacks that can be assigned via <code>selectable()</code>.</p>
					<figure data-ts="DoxScript">
						<script type="text/html">
							table.selectable(onselect, onselectall, onunselectall);
						</script>
					</figure>
					<p>You can also assign these methods directly.</p>
					<figure data-ts="DoxScript">
						<script type="text/html">
							table.onselect = function(selected, unselected) {};
							table.onselectall = function() { console.log('All'); };
							table.onunselectall = function() { console.log('None'); };
						</script>
					</figure>
					<p>Here's a summary of the methods that deal with row selection.</p>
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.TableSpirit",
								methods: [
									{
										name: "selectable",
										args: ["(function)"],
										desc: "Make the Table selectable with an optional callback."
									},
									{
										name: "unselectable",
										desc: "Make the Table not selectable."
									},
									{
										name: "select",
										args: ["(number|array)"],
										desc: "Select row at index(es). Omit the argument to select all rows."
									},
									{
										name: "unselect",
										args: ["(number|array)"],
										desc: "Unselect row at index(es). Omit the argument to unselect all rows."
									},
									{
										name: "toggle",
										args: ["(number|array)"],
										desc: "Toggle row at index(es). Omit the argument to toggle all rows."
									},
									{
										name: "selected",
										args: ["(number|array)"],
										type: ["boolean|array"],
										desc: "Test one or more indexes for selection. You can omit the argument to get all selected indexes."
									},
									{
										name: "onselect",
										args: ["array", "array"],
										desc: "The callback that you would normally assign via `selectable()`."
									},
									{
										name: "onselectall",
										desc: "If specified, this will be called when selecting everything.",
									},
									{
										name: "onunselectall",
										desc: "If specified, this will be called when de-selecting everything."
									}
								]
							}
						</script>
					</div>
				</section>
			</article>
		</main>
	</body>
</html>
