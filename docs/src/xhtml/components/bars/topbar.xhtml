<!DOCTYPE html>
<html>
	<head>
		<title>TopBar</title>
		<object data="tabs.xhtml"></object>
		<script>
			ts.ui.ready(function() { // support color scheme links in API table
				var method;
				ts.ui.get('html').action.add('ts-action-safe-link', {
					onaction: function(a) {
						if((method = ts.ui.TopBar[a.data])) {
							method.call(ts.ui.TopBar);
						}
					}
				})
			});
			function restoreTopBar() {
				ts.dox.tabs();
			}
		</script>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>TopBar</h1>
				<section class="desc">
					<p>Provides <a href="#tabs">tabs</a> for navigation and <a href="#buttons">buttons</a> for contextual actions.</p>
				</section>
				<section data-ts="Note">
					<i class="ts-icon-warning"></i>
					<p>Beware that this API will be replaced be the <code>ts.ui.Header</code> in a future release.</p>
				</section>
				<section>
					<section id="title">
						<p>If you plan to make use of the TopBar, we suggest that you give it a descriptive title.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.TopBar.title('My App');
							</script>
						</figure>
						<p>&mdash; because even when the title is hidden by the tabs, like on this page, it will become visible when you resize to mobile breakpoint. The title also functions to show the TopBar on page load, so that it doesn't suddenly appear when you add buttons later.</p>
					</section>
				</section>
				<h2 id="tabs">TopBar.tabs</h2>
				<section id="tabs-desc" data-important="THIS GETS INCLUDED IN OTHER PAGES!">
					<p>We can initialize the TopBar tabs with the the <code>tabs</code> method.</p>
					<figure data-ts="DoxScript" class="attention">
						<script id="tabs-init">
							ts.ui.TopBar.tabs([
								{label: 'Overview'},
								{label: 'TopBar'},
								{label: 'TabBar'},
								{label: 'ToolBar'},
								{label: 'StatusBar'}
							]);
						</script>
					</figure>
					<p>&mdash; but since the page already has tabs, we will instead append a new tab to the existing collection. If you omit the argument, you"ll get the current tabs (jQuery style).</p>
					<figure data-ts="DoxScript" class="attention">
						<script type="runnable">
							var tabs = ts.ui.TopBar.tabs();
							tabs.push({
								label: 'Bonus Tab',
								onselect: function() {
									var text = this.label + ' selected';
									ts.ui.Notification.success(text)
								}
							});
						</script>
					</figure>
					<p>You can use array methods like <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>splice</code> and so on to manage tabs, just note that the tabs <code>length</code> is a readonly property. Also note that tabs don"t do anything by default, so what happens at <code>onselect</code> is completely up to you.</p>
					
					<h3>Updating tabs</h3>
					<p>We can at any time change what happens when a tab gets selected. We can also change the tab label if we like, although maybe this would be confusing for the user.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var tabs = ts.ui.TopBar.tabs();
							tabs[4].label = 'Choose Me!';
							tabs[4].onselect = function() {
								this.label = 'Thanks!';
							};
						</script>
					</figure>
					
					<h3>Selecting tabs</h3>
					<p>We can programatically select a tab using one of these approaches.</p>
					<figure data-ts="DoxScript">
						<script>
							ts.ui.TopBar.tabs()[4].select();
						</script>
					</figure>
					<figure data-ts="DoxScript">
						<script>
							ts.ui.TopBar.tabs().selectedIndex = 1;
						</script>
					</figure>
					
					<h3>Querying tabs</h3>
					<p>This will all become a lot easier if we give all the tabs an <code>id</code> and use <code>tabs.get()</code></p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var tabs = ts.ui.TopBar.tabs();
							tabs.splice(4, 0, {
								label: 'Example Tab',
								id: 'example-tab'
							});
							tabs.get('example-tab').select();
						</script>
					</figure>
					
					<h3>Tabs icons</h3>
					<p>You can add a tab with an <a data-ts="Button" href="/#components/icons/css.html">icon</a> if somehow that tab is special.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.tabs().push ({
								label: 'Icon Tab',
								icon: 'ts-icon-todo'
							});
						</script>
					</figure>
					
					<h3>Tab counters</h3>
					<p>You can add a counter to the tabs for whatever reason you like.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.tabs().forEach(function(tab){
								tab.counter = Math.ceil(Math.random() * 10);
							});
						</script>
					</figure>
					<p>When the counter reaches zero, it disappears.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.tabs().forEach(function(tab){
								tab.counter --;
							});
						</script>
					</figure>

					<h3>Closeable tabs</h3>
					<p>You can create closeable tabs, but note that the tab must be selected before it can be closed. You can <code>return false</code> in the <code>onclose</code> method to prevent the tab from closing (if this would otherwise cause data loss).</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.tabs().push ({
								label: 'Closeable Tab',
								closeable: true,
								selected: true,
								onclose : function() {
									ts.ui.Notification.success(this.label + ' closed');
								},
							});
						</script>
					</figure>
					
					<h3>New-Tab button</h3>
					<p>You can allow the user to create new tabs via a special button as seen in popular browsers. Note that the button just triggers a callback and that the new tab must be created manually. In the example below, the <code>selected</code> property also selects the tab.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var tabs = ts.ui.TopBar.tabs();
							tabs.showNew(function onclick() {
								tabs.push({
									label: 'My New Tab',
									selected: true
								});
							});
						</script>
					</figure>
					<p>If you regret this later on, you can also hide the button.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.tabs().hideNew();
						</script>
					</figure>
				</section>
				<section id="tabs-api" data-important="THIS GETS INCLUDED IN OTHER PAGES!">
					<p>Here"s a summary of the <code>tabs</code> collection and <code>tab</code> model.</p>
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.TabCollection",
								properties: [
									{
										name: "selectedIndex",
										type: "number",
										desc: "Get or set selected index."
									}
								],
								methods: [
									{
										name: "push",
										args: "o1, o2, ...",
										desc: "Add tab(s) to the end of the collection."
									},
									{
										name: "unshift",
										args: "o1, o2, ...",
										desc: "Add tab(s) to the front of the collection."
									},
									{
										name: "pop",
										desc: "Remove and return the last tab."
									},
									{
										name: "shift",
										desc: "Remove and return the first tab."
									},
									{
										name: "splice",
										args: "i, d, o1, o2, ...",
										desc: "Insert tab(s) at `i`, optionally deleting `d` amount of tabs."
									},
									{
										name: "get",
										args: "string|number",
										desc: "Get tab by `id` or numeric index."
									},
									{
										name: "clear",
										desc: "Remove all tabs."
									},
									{
										name: "showNew",
										args: "(function)",
										desc: "Show New-Tab button with an onclick callback. Use `hideNew()` to hide the button."
									},
									{
										name: "onselect",
										args: "number, number",
										desc: "Open for implementation: Called whenever the selected index changes with two parameters `newindex` and `oldindex`."
									}
								]
							}
						</script>
					</div>
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.TabModel",
								properties: [
									{
										name: "id",
										type: "string",
										desc: "Optional tab `id`."
									},
									{
										name: "label",
										type: "string",
										desc: "The tab label."
									},
									{
										name: "icon",
										type: "string",
										desc: "The tab icon."
									},
									{
										name: "selected",
										type: "boolean",
										desc: "Get or set selected status."
									},
									{
										name: "closeable",
										type: "boolean",
										desc: "Tab can be closed? See also `onclose`"
									}
								],
								methods: [
									{
										name: "select",
										desc: "Select the tab. This will unselect some other tab."
									},
									{
										name: "onselect",
										desc: "Called whenever the tab gets selected."
									},
									{
										name: "onclose",
										desc: "Called whenever the tab gets closed."
									}
								]
							}
						</script>
					</div>
				</section>
				
				<h2 id="buttons">TopBar.buttons</h2>
				<section id="buttons-desc" data-important="THIS GETS INCLUDED IN OTHER PAGES!">
					<p>Add buttons to the TopBar with the <code>buttons</code> method. This both sets and gets. If you omit the argument, you"ll get the current buttons (jQuery style).</p>
					<figure data-ts="DoxScript" class="attention">
						<script type="runnable">
							ts.ui.TopBar.buttons([
								{label : 'Primary', type : 'ts-primary'},
								{label : 'Secondary', type : 'ts-secondary'},
								{label : 'Tertiary One'},
								{label : 'Tertiary Two'}
							]);
						</script>
					</figure>
					<p>You can use array methods like <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>splice</code>, <code>reverse</code> and so on to manage buttons. Just note that the buttons <code>length</code> is readonly.</p>
					<ul>
						<li>The buttons <code class="attr-name">type</code> property works like the CSS <code class="attr-name">class</code> for a regular Button</li>
						<li>The TopBar will automatically sort all buttons from primary to tertiary.</li>
						<li>If there"s more than one tertiary button, these will be pushed to an Aside.</li>
						<li>In the mobile breakpoint, all the buttons will be pushed to an Aside.</li>
					</ul>
					<p>Buttons won"t actually do anything unless you define the <code>onclick</code> method.<p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.buttons().splice(0, 1, {
								label : 'Click me!',
								type : 'ts-primary',
								onclick: function() {
									this.label = 'Thanks';
								}
							});
						</script>
					</figure>
					<p>Fortunately, you can always change what happens when a button gets clicked.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.buttons().forEach(function(button, index) {
								button.label = "Button " + (index + 1);
								button.onclick = function() {
									ts.ui.Notification.success(this.label);
								};
							});
						</script>
					</figure>

					<h3>Query buttons</h3>
					<p>You can locate buttons by index in the <code>buttons</code> collection. But since this isn"t likely to match the order in which they appear on screen, it"s easier to give the buttons an <code>id</code> and find them using <code>buttons.get()</code>.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var buttons = ts.ui.TopBar.buttons();
							buttons.push({ id: 'example-button' });
							var button = buttons.get('example-button');
							button.label = 'My Button';
							button.type = 'ts-secondary';
						</script>
					</figure>

					<!--
					<h3>Icon buttons</h3>
					<div data-ts="Note">
						<i class="ts-icon-todo"></i>
						<p>TODO: Note about the <code>info</code> property for view in Aside!</p>
					</div>
					-->
					
					<h3>Hide buttons</h3>
					<p>You can <code>hide()</code> and <code>show()</code> buttons. You can also toggle <code>visible</code>.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.buttons().forEach(function(button) {
								if(button.visible) {
									button.hide();
								} else {
									button.show();
								}
							});
						</script>
					</figure>

					<h3>Disable buttons</h3>					
					<p>You can <code>disable()</code> and <code>enable()</code> buttons. You can also toggle <code>disabled</code>.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.buttons().forEach(function(button) {
								if(button.disabled) {
									button.enable();
								} else {
									button.disable();
								}
							});
						</script>
					</figure>
					
					<h3>Busy buttons</h3>					
					<p>We can display a temporary progress indicator with the <code>busy</code> and <code>done</code> methods.</p>					
					<figure data-ts="DoxScript">
						<script type="runnable">
							var button = ts.ui.TopBar.buttons()[0];
							button.busy();
							setTimeout(function() {
								button.done();
							}, 1000);
						</script>
					</figure>
					<p>The <code>busy</code> method supports an optional status message.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var button = ts.ui.TopBar.buttons()[0];
							button.busy('Making progress');
							setTimeout(function() {
								button.done();
							}, 1000);
						</script>
					</figure>
					
					<h3>Button groups</h3>
					<p>You can also <em>group buttons in arrays</em> to create button groups that look like this:</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.buttons([
								{ label: 'Normal'},
								{ label: 'Normal'},
								[
									{ label: 'Accept', type: 'ts-primary' },
									{ label: 'Reject', type: 'ts-danger' }	
								]
							]);
						</script>
					</figure>
					<p>You can of course also create grouped buttons with icons instead of text.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var group = ts.ui.TopBar.buttons()[2];
							group.push({
								icon: 'ts-icon-other',
								type: 'ts-secondary'
							});
						</script>
					</figure>
				</section>
				<section id="buttons-api" data-important="THIS GETS INCLUDED IN OTHER PAGES!">
					<p>Here"s a summary of the <code>buttons</code> collection and <code>button</code> model.</p>
					<div data-ts="DoxApi">
						<script type="application/json">
						{
							name: "ts.ui.ButtonCollection",
							methods: [
								{
									name: "push",
									args: "o1, o2, ...",
									desc: "Add button(s) to the end of the collection."
								},
								{
									name: "unshift",
									args: "o1, o2, ...",
									desc: "Add button(s) to the front of the collection."
								},
								{
									name: "pop",
									desc: "Remove and return the last button."
								},
								{
									name: "shift",
									desc: "Remove and return the first button."
								},
								{
									name: "splice",
									args: "i, d, o1, o2, ...",
									desc: "Insert button(s) at `i`, optionally deleting `d` amount of buttons."
								},
								{
									name: "get",
									args: "string|number",
									desc: "Get button by `id` or numeric index."
								},
								{
									name: "clear",
									desc: "Remove all buttons."
								}
							]
						}
						</script>
					</div>
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.ButtonModel",
								properties: [
									{
										name: "id",
										type: "string",
										desc: "Optional button `id`."
									},
									{
										name: "label",
										type: "string",
										desc: "The buttons label."
									},
									{
										name: "icon",
										type: "string",
										desc: "The button icon (label must be `null` or empty)."
									},
									{
										name: "info",
										type: "string",
										desc: "The button tooltip (hover text)."
									},
									{
										name: "visible",
										type: "boolean",
										desc: "Button is visible?"
									},
									{
										name: "disabled",
										type: "boolean",
										desc: "Button is disabled?"
									}
								],
								methods: [
									{
										name: "onclick",
										desc: "Called whenever the button gets clicked."
									},
									{
										name: "busy",
										args: "(string)",
										desc: "Mark button busy with optional message."
									},
									{
										name: "done",
										desc: "Mark the button done (not busy)."
									},
									{
										name: "hide",
										desc: "Hide the button."
									},
									{
										name: "show",
										desc: "Show the button."
									},
									{
										name: "disable",
										desc: "Disable the button."
									},
									{
										name: "enable",
										desc: "Enable the button."
									}
								]
							}
						</script>
					</div>
				</section>
				
				
				<h2>TopBar Back &amp; Forward</h2>
				<section>
					<p>The TopBar features both Back and Forward buttons for use in "drill down" scenarios.</p>
					<figure data-ts="DoxScript">
						<script type='runnable'>
							ts.ui.TopBar.showBack(function() {
									console.log('Back');
								}).showNext(function() {
									console.log('Next');
								});
						</script>
					</figure>
					<p>You can also hide the Back and Forward buttons. Since the buttons obscure the tabs, you might actually like to do that now.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.hideBack().hideNext();
						</script>
					</figure>
					<p>Note that tabbed navigation is not supposed to coexist with Back and Forward buttons.</p>
				</section>


				<h2>Hide &amp; show the TopBar</h2>
				<section>
					<p>You can hide the TopBar &mdash; but not in mobile breakpoint, see below. Note that this operation will clear the contents of the TopBar.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.hide();
						</script>
					</figure>
					<p>You can also show it again. Because the content was cleared, we'll also restore it.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.show();
							restoreTopBar();
						</script>
					</figure>
					<p>When you resize the window to mobile breakpoint, the hidden TopBar will be shown again automatically. That's because the TopBar is used to access the main navigation. Without the TopBar, you would be stuck in the app forever. But since you chose to hide the TopBar, we can assume that the content of the TopBar is not relevant. Therefore:</p>

					<div data-ts="Note">
						<i class="ts-icon-warning"></i>
						<p>Since we don't want to show an outdated TopBar to mobile users, the content of the TopBar will be <em>cleared</em> when you hide it. To restore the old content, you will simply have to populate the TopBar again.</p>
					</div>

					<p>If you don't want your app to feature a TopBar under any circumstance, you can simply remove the whole <code>&lt;div data-ts="TopBar"&gt;</code> from the HTML.</p>
					
				</section>

				
				<h2>TopBar summary</h2>
				<section>
					<p>Here's a summary of the TopBar methods, including some bonus not yet discussed.</p>
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.TopBar",
								methods: [
									{
										name: "title",
										args: "(string)",
										desc: "Get or set the title."
									},
									{
										name: "tabs",
										args: "(array)",
										desc: "Get or set the tabs."
									},
									{
										name: "buttons",
										args: "(array)",
										desc: "Get or set the buttons."
									},
									{
										name: "showBack",
										args: "(function)",
										desc: "Show Back button with a callback. Use `hideBack` to hide the button."
									},
									{
										name: "showNext",
										args: "(function)",
										desc: "Show Forward button with a callback. Use `hideNext` to hide the button."
									},
									{
										name: "clear",
										desc: "Clear all tabs and buttons. Note that this will not hide the TopBar, see below."
									},
									{
										name: "hide",
										desc: "Hide the TopBar. Once hidden, you can use `show` to show it again."
									},
									{
										name: "green",
										desc: "Change the general color scheme to [green](green)."
									},
									{
										name: "blue",
										desc: "Change the general color scheme to [blue](blue)."
									},
									{
										name: "purple",
										desc: "Change the general color scheme to [purple](purple)."
									},
									{
										name: "dark",
										desc: "Revert back to the [default](dark) color scheme."
									}
								]
							}
						</script>
					<div>
				</section>
				
			</article>
		</main>
	</body>
</html>
