<!DOCTYPE html>
<html>
	<head>
		<title>Table Build</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body class="nosticky">
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Building the Table</h1>
				<section>
					<p>You can build your <code>cols()</code> and <code>rows()</code> with a compact syntax.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript" class="attention">
								<script type="runnable">
									var table = ts.ui.get('#mytable');
									table.cols(['One', 'Two', 'Tree']);
									table.rows([
										['A', 'D', 'G'],
										['B', 'E', 'H'],
										['C', 'F', 'I']
									]);
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="mytable"></div>
						</li>
					</ul>
					<p>You can also declare columns as objects. The objects have a <code>label</code> property.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#example1');
									table.cols([
										{label: 'One'},
										{label: 'Two'},
										{label: 'Three'}
									]);
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example1"></div>
						</li>
					</ul>
					<p>
						This will come in handy when we need to assign extra properties to the 
						columns. If we set the <code>type</code> property to <code>ts-number</code>, 
						the text will be right-aligned (except in the first column)</a>.
					</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#example2');
									table.cols([
										{ label: 'Type' },
										{ label: 'Value', type: 'ts-number'}
									]);
									table.rows([
										['Random number', Math.random()]
									]);
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example2"></div>
						</li>
					</ul>
					<p>We can also declare rows as objects with a list of <code>cells</code>. This syntax will allow us to mark the row as <code>selected</code> (you can read more about <a data-ts="Button" href="/#components/table/selecting.html">selection</a>).</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#example3');
									table.selectable().rows([
										{ cells: ['A', 'D', 'G'], selected: true},
										{ cells: ['B', 'E', 'H']},
										{ cells: ['C', 'F', 'I']},
									]);
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example3"></div>
						</li>
					</ul>
					<p>The individual cells can also be declared as objects if the displayed <code>text</code> should be different from the hidden <code>value</code> (which can be anything you like).</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#example4');
									table.rows([
										{
											cells: [
												{value: 1, text: 'One'},
												{value: 2, text: 'Two'},
												{value: 3, text: 'Three'}
											]
										}
									]);
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example4"></div>
						</li>
					</ul>
					<p>You can update a single row whenever you like. Here with compact syntax.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#example5');
									table.rows([
										['A', 'B', 'C'],
										['D', 'E', 'F']
									]);
									table.row(1, [
										Math.random(),
										Math.random(),
										Math.random()
									]);
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example5"></div>
						</li>
					</ul>
					<p>You can of course also update a single cell. Here with compact syntax:</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#example6');
									table.rows([
										['A', 'B', 'C'],
										['D', 'E', 'F']
									]);
									table.cell(1, 1, Math.random());
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example6"></div>
						</li>
					</ul>
					<p>You can use array methods like push, pop, shift, unshift, splice, reverse and so on to mange the rows. Just note that the <code>length</code> property is readonly.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#example7');
									var rows = table.rows();
									rows.push([1, 2, 3]);
									rows.unshift([4, 5, 6]);
									rows.splice(0, 0, [7, 8, 9]);
									rows.reverse();
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example7"></div>
						</li>
					</ul>
					<p>Here' a summary of the methods that deal with building the Table.</p>
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.TableSpirit",
								methods: [
									{
										name: "cols",
										args: ["(array)"],
										desc: "Set the columns. Omit the argument to get the columns."
									},
									{
										name: "rows",
										args: ["(array)"],
										desc: "Set the rows. Note that while you can get the rows back by omitting the argument, any changes are not persisted until you assign them back again."
									},
									{
										name: "row",
										args: ["number", "(object|array)"],
										desc: "Update a single row by rowindex. You can omit the last argument to get the row, but changes are not persisted until you set it."
									},
									{
										name: "cell",
										args: ["number", "number", "(string|object)"],
										desc: "Update a single cell by rowindex and cellindex. You can omit the last argument to get the cell, but see the note above."
									}
								]
							}
						</script>
					</div>
					<!--
					<p>
						The Table offers a minimal amount of 
						<a data-ts="Button" href="/#components/table/styling.html">layout options</a>.
					</p>
					-->
				</section>
			</article>
		</main>
	</body>
</html>
