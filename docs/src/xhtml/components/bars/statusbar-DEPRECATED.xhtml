<!DOCTYPE html>
<html>
	<head>
		<title>StatusBar</title>
		<object data="tabs.xhtml"></object>
		<script>
		function goto(index) {
			var tabs = ts.ui.Main.tabbar().tabs();
			tabs.selectedIndex = index;
		}	
		</script>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<div data-ts="Panel" data-ts.label="Main StatusBar" data-ts.onselect="ts.ui.StatusBar.show()">
				<article>
					<h1>Main StatusBar is deprecated ðŸ˜ž</h1>
					<section class="desc">
						<p>This component is deprecated in favor of the <a data-ts="Button" href="/#components/footer/">Footer</a>. In a future release, the TopBar and TabBar and ToolBar will be collected in the equivalent "Header". You can still use the StatusBar as an <a data-ts="Button" href="javascript:goto(1)">inline</a> component</p>
					</section>
					<section class="desc">
						<p>Although the StatusBar can display status messages and features a <a href="#pager">Pager</a>, it's perfectly alright to use it just to show some <a href="#buttons">buttons</a>.</p>
					</section>
					<section>
						<p>You can show a status message with basic Markdown support.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.StatusBar.message(
									'The status message supports **bold** and *italic* text.'
								);
							</script>
						</figure>
						<p>If you call <code>linkable()</code>, you can also some links in the message. Beware of phishing!</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.StatusBar.linkable().message(
									'Please visit (Tradeshift)[http://www.tradeshift.com]'
								);
							</script>
						</figure>
						<p>You can pass a callback function to be invoked whenever a link is clicked.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.StatusBar.linkable(function onclick(url) {
									ts.ui.Notification.success(url);
									this.message('Thanks!');
								}).message('Please (click the link)[The URL can be any string]');
							</script>
						</figure>
					</section>
						
					<h2 id="buttons">StatusBar.buttons</h2>
					<section>
						<object data="topbar.xhtml#buttons-desc">
							<replace input="TopBar" output="StatusBar"/>
						</object>
					</section>
					<section>
						<object data="topbar.xhtml#buttons-api">
							<replace input="TopBar" output="StatusBar"/>
						</object>
					</section>
					
					<h2 id="pager">StatusBar.pager</h2>
					<section>
						<p>You can initialize a Pager in the StatusBar.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.StatusBar.pager({
									pages: 23,
									page: 0,
									onselect: function(page) {
										console.log(page);
									}
								});
							</script>
						</figure>
						<p>To make room for the Pager, and to make it look nice center-aligned, any potential buttons in the StatusBar will be moved into a menu. Note that even primary buttons will be hidden when the StatusBar features a Pager.</p>
						<object data="../pager/index.xhtml#pager-api"></object>
						<div data-ts="Note">
							<i class="ts-icon-todo"></i>
							<p>TODO: Explain how the statusbar behaves in mobile view. Also, we might need to split long status messages into two lines when the window is resizing. For now, we'll just pretend that all users have desktop-sized screens.</p>
						</div>
					</section>
				</article>
			</div>
			<div data-ts="Panel" data-ts.label="Inline StatusBar" data-ts.onselect="ts.ui.StatusBar.hide()">
				<article>
					<h1>Inline Statusbar</h1>
					<section class="desc">
						<div data-ts="Note">
							<i class="ts-icon-info"></i>
							<p>The responsive StatusBar is a work in progress. This is a dev preview.</p>
						</div>
					</section>
					<section>
						<p>Assign <att>data-ts="StatusBar"</att> to a <elm>footer</elm> or <elm>menu</elm> to initialize it as a StatusBar. Another attribute <att>data-ts.message</att> displays the message.</p>
						<figure data-ts="DoxMarkup">
							<script>
								<footer data-ts="StatusBar" data-ts.message="This is my StatusBar"></footer>
							</script>
						</figure>
						<p>The StatusBar has no default outline, so we've fitted ours with a dropshadow. In your app, any such outlining should be done under consideration of the neighboring elements.</p>
						<menu data-ts="StatusBar" id="mystatusbar" data-ts.message="This is my StatusBar" class="dox-dropshadow"></menu>
						<p>You can get a hold of the component using a CSS selector and call any of the methods we've seen applicable to the Main ToolBar. Notice what happens when we add content.</p>
						<figure data-ts="DoxScript" class="attention">
							<script type="runnable">
								ts.ui.get('#mystatusbar', statusbar => {
									statusbar.buttons([
										{label: 'One', type: 'ts-primary'},
										{label: 'Two', type: 'ts-secondary'},
										{label: 'Three'}
									]).pager({
										pages: 23
									}).message('The layout has changed!');
								});
							</script>
						</figure>
						<p>Because there is limited horizontal space available, the StatusBar has snapped into a layout that is optimized for mobile phones. The exact layout depends on the features you enable, but you can in any case intercept this change with the <code>onlayout</code> callback.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								var statusbar = ts.ui.get('#mystatusbar');
								statusbar.onlayout = function() {
									this.message('The layout has changed again!!!');
								};
								statusbar.pager(null); // just to show that it works...
							</script>
						</figure>
						<p>This is a work in progress.</p>
					</section>
				</article>
			</div>
		</figure>
		</main>
	</body>
</html>
