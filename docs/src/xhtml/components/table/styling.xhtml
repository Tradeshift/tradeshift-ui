<!DOCTYPE html>
<html>
	<head>
		<title>Table Styling</title>
		<object data="tabs.xhtml"></object>
		<style>
			#mytable th.oldprice {
				background-color: rgb(250,200,200);
			}
			#mytable td.oldprice {
				background-color: rgb(255,225,225);
			}
			#mytable th.newprice {
				background-color: rgb(200,250,200);
			}
			#mytable td.newprice {
				background-color: rgb(225,255,225);
			}
			#example2 td.pale-red {
				background-color: rgb(255,225,225);
			}
			#example2 td.pale-green {
				background-color: rgb(225,255,225);
			}
			#example2 td.pale-blue {
				background-color: rgb(225,225,255);
			}
			#example3 td.very-special {
				background-color: rgb(225,225,255);	
			}
		</style>
	<body class="nosticky">
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Styling the table</h1>
				<section>
					<p>The column <code>type</code> property works as a classname for both headers and cells.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#mytable', table => {
										table.cols([
											{label: 'Product'},
											{label: 'Regular Price', type: 'ts-number oldprice'},
											{label: 'Sale price', type: 'ts-number newprice'}
										]);
										table.rows([
											['Apple', '1.30', '1.00'],
											['Orange', '0.75', '0.50'],
											['Banana', '2.00', '1.25']
										]);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="mytable"></div>
						</li>
					</ul>
					<p>This means that you can style the columns using CSS that looks like this.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<style type="text/less">
								#mytable {
									th {
										&.oldprice {
											background: red;
										}
										&.newprice {
											background: green;
										}
									}
									td {
										&.oldprice {
											background: pink;
										}
										&.newprice {
											background: lime;
										}
									}
								}
							</style>
						</script>
					</figure>
					<p>A similar property works for the rows (if you switch to verbose syntax). You will of course need to defined these classnames somewhere in your CSS file.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#example2', table => {
										table.rows([
											{cells: ['A', 'D', 'G'], type: 'pale-red'},
											{cells: ['B', 'E', 'H'], type: 'pale-green'},
											{cells: ['C', 'F', 'I'], type: 'pale-blue'},
										]);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example2"></div>
						</li>
					</ul>
					<p>Finally, the individual table cells can be styled with the <code>type</code> property. Again, you will have to switch to verbose syntax in order to declare this property.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#example3', table => {
										table.rows([
											{
												cells: [
													{text: 'Normal'},
													{text: 'Normal'},
													{text: 'Special', type: 'very-special'}
												]
											}
										]);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example3"></div>
						</li>
					</ul>
				</section>
			</article>
		</main>
	</body>
</html>
