<!DOCTYPE html>
<html>
	<head>
		<title>Table Buttons</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Table buttons</h1>
				<section>
					<p>The Table supports <code>buttons</code> and we will soon add some futher documentation. For now we will simply recommend that you don't use buttons unless the Table is <code>maximized</code>. This feature however also doesn't have any documentation ðŸ˜¢</p>
					<ul class="splitscreen">
						<li>							
							<figure data-ts="DoxScript" class="attention">
								<script type="runnable">
										var table = ts.ui.get('#table1');
										table.cols(['One', 'Two', 'Three']).rows([
											['A', 'B', 'C'],
											['D', 'E', 'F'],
											['G', 'H', 'I'],
										]).buttons([
											{ label: 'One', type: 'ts-primary' },
											{ label: 'Two', type: 'ts-secondary' },
											{ label: 'Three', onclick: () => {
												console.log('The tertiary button was clicked!');
											}}
										]);
									</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table1"></div>
						</li>
					</ul>
					<p>The <code>buttons</code> method both sets and gets the buttons. If you omit the argument, you"ll get the current actions (jQuery style). You can use array methods like <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>splice</code> and so on to manage buttons, just note that the buttons <code>length</code> is a readonly property.</p>
					<div data-ts="Note">
						<i class="ts-icon-todo"></i>
						<p>TODO: The Table breakpoint should be local to the Table (not the window) :/</p>
					</div>
				</section>
			</article>
		</main>
	</body>
</html>
