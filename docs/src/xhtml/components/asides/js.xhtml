<!DOCTYPE html>
<html>
	<head>
		<title>Aside JS</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<section>
					<h1>Asides JS</h1>
					<p>You can get a hold of the <code class="attr-name">ts-aside</code> component and control it with JavaScript.</p>
					<figure data-ts="DoxScript">
						<script>
							ts.ui.get('#myaside', aside => {
								// control the aside
							});
						</script>
					</figure>

					<h3>Toggle and title</h3>
					<p>You can do this.</p>
					<figure data-ts="DoxScript">
						<script>
							aside.open();
							aside.close();
							aside.toggle();
							aside.title('Updated title');
						</script>
					</figure>

					<h3>Tracking with methods</h3>
					<p>
						You can overwrite the methods <code>onopen</code>, 
						<code>onopened</code>, <code>onclose</code> and 
						<code>onclosed</code> to do something whenever 
						the aside changes state.
					</p>
					<figure data-ts="DoxScript">
						<script>
							aside.onopen = function() {
								console.log('Aside will open');
							};
						</script>
					</figure>
					<p>
						If you return <code>false</code> in methods <code>onopen</code> 
						and <code>onclose</code>, the aside will respect that.
					</p>

					<h3>Tracking with events</h3>
					<p>You can also monitor the asides with DOM event listeners.</p>
					<figure data-ts="DoxScript">
						<script>
							function debug(e) {
								console.log(e.type, e.target);
							}
							document.addEventListener('ts-open', debug);
							document.addEventListener('ts-opened', debug);
							document.addEventListener('ts-close', debug);
							document.addEventListener('ts-closed', debug);
						</script>
					</figure>
					<p>
						The events <code>"ts-open"</code> and <code>"ts-close"</code> can 
						be blocked with <code>e.preventDefault()</code> to prevent the aside 
						from changing state.
					</p>
				</section>
			</article>
		</main>
	</body>
</html>
