<!DOCTYPE html>
<html>
	<head>
		<title>Table Actions</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Selection actions</h1>
				<section>
					<p>The table <code>actions</code> are reserved for working with <em>selections</em>. They work much like the <a href="">buttons</a> except the <code>icon</code> should never be omitted from an action, since it is always displayed (and not just in mobile breakpoint). You can try to select something in this table.</p>
					<ul class="splitscreen">
						<li>							
							<figure data-ts="DoxScript" class="attention">
								<script type="runnable">
										var table = ts.ui.get('#table1');
										table.cols(['One', 'Two', 'Three']).rows([
											['A', 'B', 'C'],
											['D', 'E', 'F'],
											['G', 'H', 'I'],
										]).selectable(update);
										function update() {
											var actions = table.actions();
											var maximum = table.rows().length;
											var counter = table.selected().length;
											if(counter > 0) {
												table.status(counter + ' of ' + maximum + ' rows selected');
												if(!actions.length) {
													actions.push(
														{ label: 'Delete', icon: 'ts-icon-delete' },
														{ label: 'Report', icon: 'ts-icon-halt' },
														{ label: 'Revert', icon: 'ts-icon-back', onclick: () => {
															console.log('The revert action was clicked!');
														}}
													);
												}
											} else {
												actions.clear();
												table.status(maximum + ' rows');
											}
										}
										update();
									</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table1"></div>
						</li>
					</ul>
					<p>The <code>actions</code> method both sets and gets the actions. If you omit the argument, you"ll get the current actions (jQuery style). You can use array methods like <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>splice</code> and so on to manage actions, just note that the actions <code>length</code> is a readonly property.</p>

					<object data="../bars/topbar.xhtml#buttons-api">
						<replace input="Button" output="Action"/>
						<replace input="button" output="action"/>
					</object>
					
				</section>
			</article>
		</main>
	</body>
</html>
