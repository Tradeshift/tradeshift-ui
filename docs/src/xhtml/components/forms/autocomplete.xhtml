<!DOCTYPE html>
<html>
<head>
	<title>Form Autocomplete</title>
	<object data="tabs.xhtml"></object>
</head>
	<body class="nosticky">
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Autocomplete</h1>
				<section class="desc">
					<p>You can have an input field suggest results to the user and can be navigated using the keyboard or the mouse.</p>
				</section>
				<section>
					<h3>Basic Usage</h3>
					<p>Loading the autocomplete data from a static array.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript" class="attention">
								<script type="runnable">
									ts.ui.get('#mystaticautocomplete', autocomplete => {
										autocomplete.data([
											{ key: 0, value: 'zero' },
											{ key: 1, value: 'one' },
											{ key: 2, value: 'two' },
											{ key: 3, value: 'three' },
											{ key: 4, value: 'four' },
											{ key: 5, value: 'five' },
											{ key: 6, value: 'six' },
											{ key: 7, value: 'seven' },
											{ key: 8, value: 'eight' },
											{ key: 9, value: 'nine' }
										]);
									});
								</script>
							</figure>
						</li>
						<li>
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Autocomplete from array</span>
										<input data-ts="AutoComplete" id="mystaticautocomplete" />
									</label>
								</fieldset>
							</form>
						</li>
					</ul>
				</section>

				<section>
					<h3>External Data</h3>
					<p>
						Loading all results from an external JSON endpoint but using the
						built in filtering.
					</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#myadvancedautocomplete', autocomplete => {
										$.getJSON('assets/autocomplete.json', function(json) {
											autocomplete.data(json);
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Autocomplete from JSON</span>
										<input data-ts="AutoComplete" id="myadvancedautocomplete" />
									</label>
								</fieldset>
							</form>
						</li>
					</ul>
				</section>

				<section>
					<h3>Advanced Usage</h3>
					<p>
						It's possible to override the filtering functionality to supply the
						user with any data you'd like.
					</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#myfancyautocomplete', autocomplete => {
										autocomplete.onfilter(function(filter) {
											var output = [];
											for (var i = parseInt(Math.random() * 10 + 1, 10); i >= 0; i--) {
												output.push({
													key: i,
													value: Math.random().toString(36).substr(2, 5)
												});
											}
											return output;
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Autocomplete with custom results</span>
										<input data-ts="AutoComplete" id="myfancyautocomplete" />
									</label>
								</fieldset>
							</form>
						</li>
					</ul>
				</section>

				<section>
					<h3>Overriding <code class="attr-name">onselect</code></h3>
					<p>
						<code class="attr-name">onselect</code> can be overridden to run your
						own code when an element is selected (either with the keyboard
						or the mouse).
					</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#myspecialautocomplete', autocomplete => {
										autocomplete.data([
											{ key: 0, value: 'zero' },
											{ key: 1, value: 'one' }
										]);
										autocomplete.onselect(function(item) {
											ts.ui.Notification.success('"' + item.value + '" selected');
											return item.value;
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Autocomplete with special onselect</span>
										<input data-ts="AutoComplete" id="myspecialautocomplete" />
									</label>
								</fieldset>
							</form>
						</li>
					</ul>
				</section>
			</article>
		</main>
	</body>
</html>
