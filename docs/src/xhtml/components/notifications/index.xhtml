<!DOCTYPE html>
<html>
	<head>
		<title>Notification</title>
		<script>
		// Setup to quicktest the markdown parser

		var TESTMARKDOWN = [
			'# Headers',
			'Paragraphs with **strong text**.\n', // becomes double newline
			'Paragraphs with *italic text*.\n',
			'Paragraphs with `source code`.\n',
			'## links',
			'This is [a link](http://www.tradeshift.com)',
			'## Unordered lists',
			'* One',
			'* Two',
			'  * Two 1',
			'  * Two 2',
			'## Ordered lists',
			'1. One',
			'2. Two',
			'  1. Two 1',
			'  2. Two 2'
		].join('\n')

		if(false) {
			setTimeout(function() {
				(function testit(model) {
					var html = model.render();
					document.querySelector('article').innerHTML = html;
					console.log(html);
				}(
					new ts.ui.TextModel({
						html: ts.ui.TextModel.HTML,
						text: TESTMARKDOWN
					})
				));
			}, 500);
		}
		</script>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Notification</h1>
				<section class="desc">
					<p>Simple modals for providing users with notifications much like the JavaScript <code>alert()</code> method. Basic markdown may be used for links and formatting.</p>
				</section>
				<section>
					<p>The <code>success</code> notification demands no user interaction.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.Notification.success('You did it!');
						</script>
					</figure>
					<p>The <code>info</code>, <code>warning</code> and <code>error</code> notification must be accepted by the user.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.Notification.info('You can do it.');
							ts.ui.Notification.warning('You will fail.');
							ts.ui.Notification.error('You are wrong.');
						</script>
					</figure>
					<p>An optional second argument specifies the button text.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.Notification.warning('Beware', 'Understood');
						</script>
					</figure>
					<p>You can configure a callback for when the Notification gets accepted.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.Notification.info('You must accept it.', {
								onaccept: function() {
									ts.ui.Notification.success('We knew you would.');
								}
							});
						</script>
					</figure>
					<p>Notifications support basic markdown for formatting and links.</p>
					<figure data-ts="DoxMarkup">
						<script>
							Markdown for **bold text** and *italic text* and `source code`
							Markdown for a [hyperlink](http://www.example.com/)
						</script>
					</figure>
					<p>When a link is clicked, the URL will be passed along to the <code>onlink</code> method. As you can see below, the URL can be just a key, it doesn't have to be real URL.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var text = 'Choose link [one](ONE) or [two](TWO) or [three](THREE).';
							ts.ui.Notification.info(text, {
								onlink: function(url) {
									this.accept().then(function onfadeout() {
										ts.ui.Notification.success(url);
									});
								}
							});
						</script>
					</figure>
					<p>If the link should indeed link to something, make sure to provide the full protocol <code>http(s)://</code></p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.Notification.info(
								'Please visit [Tradeshift](http://www.tradeshift.com)'
							);
						</script>
					</figure>
					<p>Note that all links will open in a new tab (or window, depending on the browser settings), so you should not use links in Notifications for internal navigation, at least not just yet.</p>
				</section>
			</article>
		</main>
	</body>
</html>
