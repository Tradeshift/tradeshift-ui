<!DOCTYPE edbml>
<script>

	<?param name="labels" type="array"?>
	<?param name="month" type="string"?>
	<?param name="year" type="number"?>
	<?param name="view" type="array"?>
	<?param name="prevYear" type="string"?>
	<?param name="nextYear" type="string"?>
	<?param name="prevMonth" type="string"?>
	<?param name="nextMonth" type="string"?>
	<?param name="minDay" type="number"?>
	<?param name="maxDay" type="number"?>
	<?param name="onrendercell" type="function"?>

	<table>
		<thead>
			<tr class="ts-calendar-transports">
				renderbuttons(prevMonth, month, nextMonth);
				<th/>
				renderbuttons(prevYear, year, nextYear);
			</tr>
			<tr class="ts-calendar-labels">
				labels.forEach(function(label) {
					<th>${label}</th>
				});
			</tr>
		</thead>
		<tbody class="ts-calendar-days">
			view.forEach(function(row) {
				<tr>
					row.forEach(rendercell);
				</tr>
			});
		</tbody>
	</table>

	function renderbuttons(prev, label, next) {
		renderbutton(prev, 'ts-icon-triangleleft');
		<th><label>${label}</label></th>
		renderbutton(next, 'ts-icon-triangleright');
	}

	function renderbutton(name, icon) {
		@class = name ? null : 'ts-calendar-nogo';
		@name = name || null;
		<th @class>
			<button @name>
				<i class="${icon}"></i>
			</button>
		</th>
	}

	function rendercell(cell) {
		var cellValue = cell.stringify();
		var cellData = Object.assign({}, cell);
		onrendercell(cellData);

		cell.cellData = cellData;

		var other = cell.prev || cell.next;
		var allow = allowcell(cell, other);
		@name = allow ? 'accept' : 'reject';
		@value = allow ? cellValue : null;
		@class = classname(cell, {
			'ts-calendar-other' : other,
			'ts-calendar-today' : cell.today,
			'ts-selected' : cell.selected,
			'ts-calendar-nogo' : !allow
		});
		<td @class>
			<button @name @value>
				<span>${cell.day}</span>
			</button>
		</td>
	}

	function classname(cell, classes) {
		var combinedClasses;
		var duplicateClassIndex = {};
		var customClasses = (cell.cellData.className || '').split(' ');
		var internalClasses = Object.keys(classes).filter(function(c) {
			return classes[c];
		}) || [];

		combinedClasses = internalClasses.concat(customClasses).filter(function(c){
			if(duplicateClassIndex[c])
			{
				return false;
			}

			duplicateClassIndex[c] = true;
			return true;
		});

		return combinedClasses.join(' ') || null;
	}

	function allowcell(cell, other) {
		var all = Number.MAX_VALUE;
		return (
			minDay !== all && maxDay !== (1 - all) &&
			!lower(cell.day, minDay, !other, !prevMonth, cell.prev) &&
			!upper(cell.day, maxDay, !other, !nextMonth, cell.next) &&
			cell.cellData.selectable !== false
		);
	}

	function lower(day, min, main, stops, before) {
		return min && (main && day < min) || (stops && before);
	}

	function upper(day, max, main, stops, after) {
		return max && (main && day > max) || (stops && after);
	}

</script>
