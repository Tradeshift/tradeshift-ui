<!DOCTYPE html>
<html>
	<head>
		<title>Table Sort</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body class="nosticky">
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Sorting the columns</h1>
				<section>
					<p>You can make the Table <code>sortable</code> with a callback that triggers whenever a column is clicked. We ship the Table with a built-in sort mechanism, but you'll still need to call it. The <code>sort</code> method takes a column index and a direction.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#example6', table => {
										table.cols(
											['Animal', {label: 'Price', type: 'ts-number'}]
										).rows([
											['Donkey', 700],
											['Baboon', 1500],
											['Coyote', 250],
											['Albatross', 50]
										]).sortable(function(index, ascending) {
											table.sort(index, ascending);
										});
										table.sort(0, true);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example6"></div>
						</li>
					</ul>
					<p>The <code>index</code> is the column index and the <code>ascending</code> argument alternates whenever the same col is clicked twice. If you manage your own sorting routine, you can control the appearance of the column using <code>selected</code> and <code>ascending</code>.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#example12', table => {
										table.cols([
											{
												label: 'Example',
												selected: true,
												ascending: false
											}
										]);
										setInterval(function() {
											var col = table.cols()[0];
											if((col.selected = !col.selected)) {
												col.ascending = !col.ascending;
											}
										}, 1000);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example12"></div>
						</li>
					</ul>
					<p>Importantly note that the cell values must all be declared as <em>numbers</em> in order to sort numerically. You can declare a hidden value while showing a human readable text using verbose syntax:</p>
					<figure data-ts="DoxScript">
						<script>
							table.rows([
								[
									{value: 1, text: 'One'},
									{value: 2, text: 'Two'},
									{value: 3, text: 'Three'}
								]
							]);
						</script>
					</figure>

					<h3>Custom sort</h3>
					<p>Standard sorting only deals with numbers and strings. If you need some kind of more advanced sorting, for example if the <code>value</code> contains arrays or objects, you can implement custom sort per column via the  <code>sort</code> method.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#example7', table => {
										table.cols([
											{
												label: 'Fruit',
												sort: function(val1, val2, ascending) { // sort random!
													return Math.random() > 0.5 ? 1 : -1;
												}
											}
										])
										.rows([['Banana'], ['Apple'], ['Grape'], ['Pear']])
										.sortable(function(index, ascending) {
											table.sort(index, ascending);
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="example7"></div>
						</li>
					</ul>
				</section>
			</article>
		</main>
	</body>
</html>
