<!DOCTYPE edbml>
<script>
	<?input name="toolbar" type="ts.ui.ToolBarModel"?>
	<?input name="layout" type="ts.ui.LayoutModel"?>
	<?function name="renderTabs" src="ts.ui.toolbartabs.edbml"?>

	var spirit = this;
	var id = spirit.$instanceid + toolbar.$instanceid;
	var mobilos = layout.isMobilePoint();
	var topbar =  ts.ui.TopBarModel.is(toolbar);
	var statusbar = ts.ui.StatusBarModel.is(toolbar);
	var hasrealtitle = !!toolbar.title;
	
	renderleft(
		toolbar.title || (topbar ? toolbar.defaultTitle : ''),
		toolbar.status,
		toolbar.search,
		toolbar.tabs,
		toolbar.navigation,
		toolbar.checkbox,
		toolbar.$allactions()
	);
	rendercenter(id, toolbar.pager);
	renderright(id, toolbar.$allbuttons());
	renderspinner(topbar && mobilos);
	
	function renderleft(title, status, search, tabs, navigation, checkbox, actions) {
		var hasnavi = !!(topbar && navigation && navigation.getLength());
		var hastabs = !!tabs.getLength();
		var hasactions = !!actions.length;
		if(mobilos || status || search || checkbox || hasactions || hastabs || hasnavi || (topbar ? hasrealtitle : title)) {
			if(mobilos && hastabs) {
				renderTabs(spirit, tabs, id, mobilos);
			}
			<menu id="${id}-items" class="ts-toolbar-menu ts-left">
				if(topbar) {
					renderNav(navigation);
				}
				if(!mobilos && hastabs && !hasnavi) {
					renderTabs(spirit, tabs, id, mobilos);
				} else {
				 if(search) {
						@class = klass('ts-toolbar-search', search);
						<li id="${id}-search" @class>
							out.html += search.render();
						</li>
					}
					if(checkbox && checkbox.visible) {
						rendercheckbox(checkbox);
					}
					if(title || status) {
						renderlabels(title, status, search, hasactions);
					}
					actions.forEach(renderbutton);
				}
			</menu>
		}
	}

	function rendercenter(id, pager) {
		if(showPager(pager)) {
			<menu id="${id}-extras" class="ts-toolbar-menu ts-center">
				@class = klass('ts-toolbar-pager', pager);
				<li id="${id}-pager" @class>
					out.html += pager.render();
				</li>
			</menu>
		}
	}
	
	function showPager(pager) {
		return !!(statusbar && pager && pager.pages && pager.visible);
	}

	function renderright(id, buttons) {
		if(buttons.length || toolbar.configbutton || toolbar.closebutton) {
			<menu id="${id}-buttons" class="ts-toolbar-menu ts-right">
				if(buttons.length) {
					if(!toolbar.compact) {
						toolbar.$allbuttons().forEach(renderbutton);
					} else if (mobilos && buttons.length > 1 && !hasicons(buttons)) {
						renderasidebutton(function onclick() {
							spirit.putaside(toolbar.$allbuttons());
						});
					} else {
						renderbuttons(
							toolbar.$specialbuttons(),
							toolbar.$normalbuttons()
						);
					}
				}
				[toolbar.configbutton, toolbar.closebutton].forEach(renderbutton);
			</menu>
		}
	}

	// all buttons has icons (or is primary) so that we can keep them in mobile?
	function hasicons(buttons) {
		return buttons.every(function(button) {
			return button.isPrimary() || !!button.icon;
		});
	}

	// non-mobile buttons (tertiary buttons are the "normals" here)
	function renderbuttons(specials, normals) {
		if(normals.length === 1) {
			specials = normals.concat(specials);
		} else if(shouldrenderaside(normals)) {
			renderasidebutton(function onclick() {
				spirit.putaside(normals);
			});
		}
		specials.forEach(renderbutton);
	}

	// we have buttons to put into the aside and they're not all disabled?
	function shouldrenderaside(buttons) {
		return buttons.length > 1 && !buttons.every(function(button) {
			return button.disabled;
		});
	}
	
	// non-mobile single button
	function renderbutton(button) {
		if(button && button.visible) {
			var id = spirit.$instanceid + button.$instanceid;
			@class = klass('ts-item', button);
			@class += button.isAction ? ' ts-action' : '';
			<li @class id="${id}-item">
				out.html += button.render(false, mobilos);
			</li>
		}
	}
	
	// show-more button (to open remaining buttons in ASIDE)
	function renderasidebutton(action) {
		@class = "ts-toolbar-item ts-item";
		<li @class id="${id}-aside">
			<button data-ts="Button" class="ts-tertiary" +
				onclick="#{action()}" tabindex="-1">
				<i class="ts-icon-other"></i>
			</button>
		</li>
	}

	// checkbox (for selections in the actionbar)
	function rendercheckbox(box) {
		@class = klass('ts-toolbar-checkbox', box);
		@title = box.info || null;
		<li @class id="${id}-checkbox">
			<button data-ts="Button" onclick="#{box.onclick()}" @title>
				@class = box.checked ? 'ts-icon-checkboxon' : 'ts-icon-checkbox';
				<i @class></i>
			</button>
		</li>
	}

	// title (big text) or status message (with markdown)
	function renderlabels(title, status, search, hasactions) {
		if(!search || !using(search)) {
			if(title) {
				@class = klass('ts-toolbar-title', null, !hasactions);
				<li id="${id}-title" @class>
					<label>${title}</label>
				</li>
			} else {
				@class = klass('ts-toolbar-status', null, !hasactions);
				<li id="${id}-status" @class>
					<label>
						var whitelist = ['strong', 'em', 'strike', 'code'];
						if(toolbar.linkable) whitelist.push('a');
						out.html += ts.ui.Markdown.parse(status, whitelist);
					</label>
				</li>
			}
		}
	}

	function klass(cname, model, forceflex) {
		var flex = (model && model.flex) || forceflex;
		return [
			'ts-toolbar-item',
			(cname || ''),
			(flex ? 'ts-flex' : '')
		].join (' ');
	}

	function using(search) {
		return search && (search.focused || search.value || search.flex);
	}
	
	
	// SPINNER ...................................................................
	
	// in the TopBar, we'll render the Spinner in mobile brakpoint.
	function renderspinner(on) {
		@id = id + '-spinner';
		@class = 'ts-topbarspinner';
		if(on) {
			<div data-ts="Spinner" @id @class data-ts.spinning="true"></div>
		}
	}

		
	// BACK/FORWARD/MENUTOGGLE ...................................................

	// render back and forward buttons
	function renderNav(navbuttons) {
		if(navbuttons.getLength() || mobilos) {
			menubutton(navbuttons).forEach(renderbutton);
		}
	}

	// inject the menubutton in mobile
	// TODO(jmo@): edb.Array.concat should return simple Array!!!!!!!!!!!!!!!!!!!!
	function menubutton(navbuttons) {
		var buttons = mobilos ? [toolbar.menubutton] : [];
		return buttons.concat(gui.Array.from(navbuttons));
	}


</script>
