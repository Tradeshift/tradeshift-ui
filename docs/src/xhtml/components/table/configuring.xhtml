<!DOCTYPE html>
<html>
	<head>
		<title>Table Config</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body class="nosticky">
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Configuring the Table</h1>
				<section>
					<p>You can make the table <em>configurable</em> by a button in the statusbar.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var popup = ts.ui.Notification;
									ts.ui.get('#table1', table => {
										table.configbutton(function onclick() {
											popup.success('Go configure!');
										}).cols(['A', 'B', 'C', 'D']).rows([
											[1, 4, 7, 10],
											[2, 5, 8, 11],
											[3, 6, 9, 12]
										]);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table1"></div>
						</li>
					</ul>
					<p>The button triggers a callback, but there is otherwise no default UI associated. Since the visibility of columns is always a candidate for configuration, the <code>ColModel</code> supports a <code>visible</code> property that can be used to hide columns.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#table1', table => {
								var cols = table.cols();
								(function hide(index) {
									cols[index].visible = false;
									if(index) {
										setTimeout(function next() {
											hide(--index);
										}, 1000);
									}
								}(3));
							});
						</script>
					</figure>
					<p>Here's a summary of these things.</p>
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.TableSpirit",
								methods: [
									{
										name: "configurable",
										args: ["(function)"],
										desc: "Make the Table configurable with a callback for that button in the statusbar."
									}
								]
							}
						</script>
					</div>
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.TableColModel",
								properties: [
									{
										name: 'visible',
										type: 'boolean',
										desc: 'The columns is visible?'
									}
								],
								methods: [
									{
										name: "hide",
										desc: "Hide the column."
									},
									{
										name: "show",
										desc: "Show the column."
									}
								]
							}
						</script>
					</div>
				</section>
			</article>
		</main>
	</body>
</html>
