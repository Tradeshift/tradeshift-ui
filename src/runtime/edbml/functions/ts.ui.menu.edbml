<!DOCTYPE edbml>
<script>
	<?param name="menu" type="ts.ui.MenuModel"?>

	/*
	 * Hotfix to force rerender of non-observable data types (items array).
	 * TODO: Create a model.$dirty() method that can be used for this purpose
	 */
	menu.random;

	var id = menu.$instanceid;
	var index = menu.selectedIndex;
	var indxs = menu.selectedIndexes;
	var shown = menu.maxItemsShown;
	var items = prepareItems(menu.items);
	var minis = minimumItems(items, shown);

	if(items.length) {
		var isoptimizing = (shown > -1);
		@style = getinlinestyle(isoptimizing);
		<menu data-ts="Menu" id="${id}-menu" data-ts._model="?{menu}" @style tempname>
			minis.forEach(renderItem);
		</menu>
		if (menu.select === 'many') {
			renderDoneButton(menu);
		}
	}

	/**
	 * Stamp the index onto items, 
	 * filter out invisible items.
	 */
	function prepareItems(items) {
		return items.map(function (item, i) {
			item.index = i;
			return item;
		}).filter(function (item, i) {
			return item.visible !== false;
		});
	}

	/**
	 * Reduce to items that fit on screen.
	 */
	function minimumItems(items, shown) {
		var start, stops, length = items.length;
		if(shown > -1) {
			start = index > (shown - 1) ? index : 0;
			stops = shown + start;
			stops = stops > (length - 1) ? length : stops;
			start = (stops - index) < shown ? (stops - shown) : start;
			return items.slice(start, stops);
		}
		return items;
	}

	/**
	 * Render single item.
	 */
	function renderItem(item) {
		var selected = isSelected(item);
		@disabled = item.disabled ? 'disabled' : null;
		@class = selected ? "ts-checked" : null;
		<li id="${id}-${item.index}" @class>
			<button @disabled>
				if(item.icon && !item.reverse) {
					<i class="${item.icon}"></i>
				}
				if(item.label) {
					<span>${item.label}</span>
				}
				if(item.icon && item.reverse) {
					<i class="${item.icon}"></i>
				}
				if(selected) {
					<i class="ts-icon-checked"></i>
				}
			</button>
		</li>
	}

	/**
	 * Item selected?
   */
	function isSelected(item) {
		switch(menu.select) {
			case 'one':
				return item.index === index;
			case 'many':
				return indxs.indexOf(item.index) > -1;
		}
	}

	/**
	 * Compute inline styling for the menu. That also triggers a peculiar side 
	 * effect: The menu will instruct the Aside to adjust the panel scrolling.
	 */
	function getinlinestyle(optimized) {
		if(optimized) {
			var yspan = 44;
			var total = items.length;
			var start = items.indexOf(minis[0]);
			menu.scrollContainingPanel(start * yspan);
			return declarations(total, start, yspan);
		}
		return null;
	}

	/**
	 * CSS computer
	 */
	function declarations(total, start, yspan) {
		return [
			'padding-top:' + start * yspan + 'px;',
			'height:' + total * yspan + 'px;'
		].join('');
	}

	/**
	 * Some kind of "Done" button for multiple selections.
	 * @param {ts.ui.MenuModel} menu
	 */
	function renderDoneButton(menu) {
		<menu data-ts="Buttons">
			<li>
				@disabled = menu.donebuttonenabled ? null : 'disabled';
				<button @disabled id="${id}-button" class="ts-primary" +
					onclick="#{menu.done()}">
					<span>${menu.donebuttonlabel}</span>
				</button>
			</li>
		</menu>
	}

</script>
