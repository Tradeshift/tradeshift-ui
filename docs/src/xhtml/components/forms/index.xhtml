<!DOCTYPE html>
<html>
	<head>
		<title>Form</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Form</h1>
				<section class="desc">
					<p>Provides styling and behavior for form controls and error messages.</p>
				</section>
				<section>
					<p>Assign <att>data-ts="Form"</att> to a <elm>form</elm> to initialize as a Form.</p>
					<figure data-ts="DoxMarkup">
						<script type="text/html">
							<form data-ts="Form"> ...  </form>
						</script>
					</figure>
					<p>Form components depend on specific internal element structure in order to initialize and style their contents. Most components adhere to this structure:</p>
					<figure data-ts="DoxMarkup">
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span> ... </span>
										<input/>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h3>
						<elm>textarea</elm>
					</h3>
					<p>Starts out with three lines, but will expand up to ten as content is entered. The <att>rows</att> attribute can be used to adjust the initial amount of lines to show.</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Textarea</span>
										<textarea></textarea>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>
					<p>You can specify <att>type="submit"</att> to make the texarea submit the form on <kbd>ENTER</kbd>. In this mode, newlines may still be entered while pressing the <kbd>SHIFT</kbd> key.</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form" action="javascript:alert('Form submitted')">
								<fieldset>
									<label>
										<span>Press SHIFT to ENTER newlines</span>
										<textarea rows="1" type="submit"></textarea>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h3>
						<elm>input</elm>
						<att>type=text</att>
					</h3>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Text</span>
										<input type="text" required/>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h3>
						<elm>input</elm>
						<att>type=tel</att>
					</h3>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Tel</span>
										<input type="tel" required/>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h3>
						<elm>input</elm>
						<att>type=email</att>
					</h3>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Email</span>
										<input type="email" required/>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h3>
						<elm>input</elm>
						<att>type=number</att>
					</h3>
					<p>
						Set the class <att>class="ts-right"</att> on the <elm>label</elm> to make your number text align right.
					</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Number</span>
										<input type="number"/>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h3>
						<elm>input</elm>
						<att>type=date</att>
					</h3>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Date</span>
										<input type="date"
											value="2015-01-01"
											min="2014-01-01"
											max="2016-01-01"/>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h3>
						<elm>select</elm>
					</h3>
					<p>
						The <elm>select</elm> will open in an Aside, but you'll
						mantain it like a normal <elm>select</elm>.
						Note that the <elm>select</elm> only triggers a
						<code>change</code> event when the Aside is fully closed!
					</p>
					<p>
						Set the attribute <att>data-ts.custom="true"</att> to handle your own select event.
					</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Select</span>
										<select>
											<option value="a" selected>One</option>
											<option value="b">Two</option>
											<option value="c">Three</option>
										</select>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>
					<p>You can configure the <elm>select</elm> with a default placeholder in a two-step process.</p>
					<ul>
						<li>Add the <att>placeholder</att> attribute to the <elm>select</elm></li>
						<li>Leave the first <elm>option</elm> empty (no option text)</li>
					</ul>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Select with placeholder</span>
										<select placeholder="Pick a number">
											<option></option>
											<option value="5">5</option>
											<option value="23">23</option>
										</select>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>
					<p>When a selection is made, the user can revert to the default (no selection) by clicking the selected option a second time. If you don't want to allow this, you should make sure to remove the empty <elm>option</elm>.</p>
					<div data-ts="Note">
						<i class="ts-icon-info"></i>
						<p>This strange pattern ensures maximum compatibility with Angular 1.x, where an empty <elm>option</elm> is automatically inserted until a selection is performed. To also allow <em>unselection</em> in Angular, you must manually create the empty <elm>option</elm> and make sure that it is explicitly selected as default.</p>
					</div>

					<h3>
						<elm>select</elm>
						<att>multiple<att/>
					</h3>
					<p>The <elm>select</elm> <att>multiple</att> only triggers a change when the <samp>Done</samp> button is pressed. You can customize the button label by adding a <elm>button</elm> to the <elm>label</elm> element, but note that this only configures the <em>text</em> on the button (eg. no event listeners are fired).</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Select multiple</span>
										<select multiple id="multijohn">
											<option value="a">One</option>
											<option value="b">Two</option>
											<option value="c">Three</option>
											<option value="d">Four</option>
											<option value="e">Five</option>
										</select>
										<button>Cool, apply changes!</button>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h3>
						<elm>input</elm>
						<att>type=radio</att>
					</h3>
					<p>Radio element. Generally used to choose something.</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<span>Choose wisely</span>
									<label>
										<input type="radio" name="radio" checked/>
										<span>Red pill</span>
									</label>
									<label>
										<input type="radio" name="radio"/>
										<span>Blue pill</span>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h3>
						<elm>input</elm>
						<att>type=checkbox</att>
					</h3>
					<p>Checkbox element. Generally used to indicate consent on forms.</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<span>Legally Binding Contract</span>
									<label>
										<input type="checkbox"/>
										<span>I agree to something</span>
									</label>
									<label>
										<input type="checkbox" checked/>
										<span>I agree to something (by default)</span>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h3>
						<elm>input</elm>
						<att>type=textbox</att>
						<span style="color:rgb(127,127,127);">(alternate version)</span>
					</h3>
					<p>We call it the <code>switch</code>. Used mainly for toggling preferences/settings. Note that <code>switch</code> differs from the <code>checkbox</code> only by the order of HTML elements.</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<span>Settings Page</span>
									<label>
										<span>Secret Feature</span>
										<input type="checkbox"/>
									</label>
									<label>
										<span>Secret Feature (On by default)</span>
										<input type="checkbox" checked/>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>

					<h2>Errors and info</h2>
					<p>To mark a control as invalid, simply add the class <val>ts-error</val> to the label.</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<form data-ts="Form">
								<fieldset>
									<label class="ts-error">
										<span>Text</span>
										<input type="text"/>
									</label>
								</fieldset>
							</form>
						</script>
					</figure>
					<p>To display an error message, one must mark the control as errored using the <val>ts-error</val> class, as well as add the error message markup to the page.</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script class="language-markup" type="text/plain">
							<form data-ts="Form">
								<fieldset>
									<label class="ts-error">
										<span>Text</span>
										<input type="text" />
									</label>
									<dl class="ts-errors">
										<dt>Text</dt>
										<dd>An explanation of the error in question</dd>
										<dd>Another explanation of the error in question</dd>
									</dl>
								</fieldset>
							</form>
						</script>
					</figure>
					<p>To display an info section, use the <val>ts-info</val> class.</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script class="language-markup" type="text/plain">
							<form data-ts="Form">
								<fieldset>
									<label>
										<span>Text</span>
										<input type="text" />
									</label>
									<dl class="ts-info">
										<dt>Text</dt>
										<dd>An information about the field</dd>
										<dd>Another information about the field</dd>
									</dl>
								</fieldset>
							</form>
						</script>
					</figure>
				</section>
			</article>
		</main>
	</body>
</html>
