<!DOCTYPE html>
<html>
	<head>
		<title>Spinner</title>
		<script>
			function spin(elm) {
				$(elm).attr("data-ts.busy", true);
				setTimeout(function() {
					$(elm).attr("data-ts.busy", false);
				}, 1500);
			}
		</script>
	</head>
	<body class="nosticky">
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Spinner</h1>
				<section class="desc">
					<p>The Spinner can be used with Main, Aside, Table, SideBar and Button.</p>
				</section>
				<section>
					<p>You can assign the <att>data-ts.busy</att> to the <val>Main</val> element to initialize a Spinner.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<main data-ts="Main" ts.busy="Busy message!">
								<h1>Main content</h1>
							</main>
						</script>
					</figure>
					<p>Let's try that with jQuery.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var main = $('main').first();
							main.attr('data-ts.busy', 'Crunching data');
							setTimeout(function() {
								main.attr('data-ts.busy', '');
							}, 1500);
						</script>
					</figure>
					<p>If you want a blocking overlay, you can use the <att>data-ts.blocking</att> attribute.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var main = $('main').first();
							main.attr('data-ts.blocking', "Crunching and blocking");
							setTimeout(function() {
								main.attr('data-ts.blocking', "");
							}, 1500);
						</script>
					</figure>
				</section>

				<h3>Aside and SideBar</h3>
				<section>
					<p>Assign the <attr>data-ts.busy</attr> attribute to an <val>Aside</val> or <val>SideBar</val> to initialize a Spinner.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<aside data-ts="Aside" data-ts.busy="Chrunching data">
								<div data-ts="Panel">
									<p>Aside content.</p>
								</div>
							</aside>
						</script>
					</figure>
					<p>It will look like this.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var aside = $("#myaside");
							aside.attr('data-ts.open', true);
							aside.attr('data-ts.busy', 'Crunching data');
							setTimeout(function() {
								aside.attr('data-ts.busy', '');
								setTimeout(function() {
									aside.attr('data-ts.open', false);
								}, 250)
							}, 1500);
						</script>
					</figure>
				</section>
				<h3>Button</h3>
				<section>
					<p>Assign the <att>data-ts.busy</att> attribute to a <val>Button</val> to initialize a Spinner.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<button data-ts="Button" class="ts-primary" ts.busy="true">
								<span>Primary</span>
							</button>
						</script>
					</figure>
					<p>
						<button data-ts="Button" class="ts-primary" onclick="spin(this)">
							<span>Show Spinner</span>
						</button>
					</p>
				</section>
				<h3>Table</h3>
				<section>
					<p>Assign the <att>data-ts.busy</att> attribute to a <val>Table</val> to initialize a Spinner.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#mytable');
									table.cols(['One', 'Two', 'Tree']);
									table.rows([
										['A', 'D', 'G'],
										['B', 'E', 'H'],
										['C', 'F', 'I']
									]);
									$('#mytable').attr('data-ts.busy', 'Loading');
									setTimeout(function() {
										$('#mytable').attr('data-ts.busy', '');
									}, 1500);
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="mytable"></div>
						</li>
					</ul>
				</section>
			</article>
		</main>
		<aside data-ts="Aside" id="myaside" data-ts.title="Aside Header">
			<div data-ts="Panel">
				<p>Aside content.</p>
			</div>
		</aside>
	</body>
</html>
