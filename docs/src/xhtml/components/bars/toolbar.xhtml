<!DOCTYPE html>
<html>
	<head>
		<title>ToolBar</title>
		<object data="tabs.xhtml"></object>
		<script>
			ts.ui.ready(function() { // support color scheme links in API table
				var method;
				ts.ui.get('html').action.add('ts-action-safe-link', {
					onaction: function(a) {
						if((method = ts.ui.ToolBar[a.data])) {
							method.call(ts.ui.ToolBar);
						}
					}
				})
			});
		</script>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<div data-ts="Panel" data-ts.label="Main ToolBar" data-ts.onselect="ts.ui.ToolBar.show()">
				<article>
					<h1>Main ToolBar</h1>
					<section class="desc">
						<p>Besides buttons for contextual actions, the ToolBar also features a <a href="#search">Search</a>.</p>
					</section>

					<section data-ts="Note">
						<i class="ts-icon-warning"></i>
						<p>Beware that this API will be replaced be the <code>ts.ui.Header</code> in a future release.</p>
					</section>
					
					<section id="title">
						<p>Before we begin, we may consider adding a descriptive title to the ToolBar.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.ToolBar.title('My ToolBar');
							</script>
						</figure>
					</section>
						
					<h2 id="buttons">ToolBar.buttons</h2>
					<section>
						<object data="topbar.xhtml#buttons-desc">
							<replace input="TopBar" output="ToolBar"/>
						</object>
					</section>
					<section>
						<object data="topbar.xhtml#buttons-api">
							<replace input="TopBar" output="TabBar"/>
						</object>
					</section>
					
					<h2 id="search">ToolBar.search</h2>
					<section>
						<p>You'll get a dedicated search field by passing an object to the <code>search</code> method.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.ToolBar.search({
									onsearch: function(value) {
										ts.ui.Notification.success(value || 'Search cleared');
									}
								});
							</script>
						</figure>
					</section>
					
					<section id="search-desc" data-important="THIS GETS INCLUDED IN OTHER PAGES!">
						<p>The search field expands when the field is focused by the user or whenever there's a non-empty value in the field. You can change the value like this:</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								var search = ts.ui.ToolBar.search();
								search.value = 'Hello world';
							</script>
						</figure>
					</section>

					<section id="search-methods" data-important="THIS GETS INCLUDED IN OTHER PAGES!">
						<h3>Search callbacks</h3>
						<p>The <code>onsearch</code> callback gets invoked when when the user presses <kbd>ENTER</kbd>.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								var search = ts.ui.ToolBar.search();
								search.value = 'Press ENTER here';
								search.onsearch = function(value) {
									ts.ui.Notification.success(value || 'Search cleared');
								};
							</script>
						</figure>
						<p>If defined, the <code>onidle</code> method gets called whenever the user pauses typing.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								var search = ts.ui.ToolBar.search();
								search.value = 'Try it now!';
								search.onidle = function(value) {
									ts.ui.Notification.success(value);
								};
							</script>
						</figure>
						<p>The <code>onidle</code> method may also be called when the field loses focus. The <code>idletime</code> property controls the timeout value, default is <code>500</code> (milliseconds).</p>
					</section>

					<section>
						<h3>Search info</h3>
						<p>The <code>info</code> property doubles as both the <code>placeholder</code> when the field is expanded and the <code>title</code> (or tooltip) when the field is collapsed.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								var search = ts.ui.ToolBar.search();
								search.info = 'Search amongst the things';
								search.value = ''; // collapse the field
							</script>
						</figure>
					</section>
					
					<section>
						<h3>Search flex</h3>
						<p>You can <code>flex</code> the search field to make it stretch the available width of the ToolBar. In that case, it will remain expanded even when there's no default <code>value</code>.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.ToolBar.search({
									tip: 'Flex all the way!',
									flex: 1
								}).buttons([
									{ label: 'No Flex', type: 'ts-primary' }
								]);
							</script>
						</figure>
						<p>You can also assign <code>flex</code> to buttons, although that has little practical value. In the future, we may provide a more advanced distribution scheme. That's why we use a number instead of a boolean, but you should always use <samp>1</samp> for now.</p>
					</section>
					
					<section id="search-api" data-important="THIS GETS INCLUDED IN OTHER PAGES!">
						<p>Here' an overview of the properties and methods of the Search model.</p>
						<div data-ts="DoxApi">
							<script type="application/json">
								{
									name: "ts.ui.SearchModel",
									properties: [
										{
											name: "value",
											type: "string",
											desc: "The search field value."
										},
										{
											name: "idletime",
											type: "number",
											desc: "Time before the user is considered idle."
										},
										{
											name: "info",
											type: "string",
											desc: "The placeholder and/or mouseover tooltip."
										},
										{
											name: "flex",
											type: "number",
											desc: "Fill the available width of the ToolBar. The value should be `1`."
										}
									],
									methods: [
										{
											name: "onsearch",
											desc: "Called when the user presses ENTER."
										},
										{
											name: "onidle",
											desc: "Called when the user pauses typing."
										},
										{
											name: "onfocus",
											desc: "Called when the search field is focused."
										},
										{
											name: "onblur",
											desc: "Called when the search field gets blurred."
										},
										{
											name: "focus",
											desc: "Focus the search field."
										},
										{
											name: "blur",
											desc: "Blur the search field."
										}
									]
								}
							</script>
						</div>
					</section>
					<section>
						<p>&mdash; and here's a final overview of the Main ToolBar methods.</p>
						<div data-ts="DoxApi">
							<script type="application/json">
								{
									name: "ts.ui.ToolBar",
									methods: [
										{
											name: "title",
											args: "(string)",
											desc: "Get or set the title."
										},
										{
											name: "buttons",
											args: "(array)",
											desc: "Get or set the buttons."
										},
										{
											name: "search",
											args: "(object)",
											desc: "Get or set the search configuration."
										},
										{
											name: "clear",
											desc: "Delete title, buttons and search. Note that this will not hide the ToolBar, see below."
										},
										{
											name: "hide",
											desc: "Hide the ToolBar. Once hidden, you can use `show` to show it again."
										},
										{
											name: "showClose",
											args: "(function)",
											desc: "Show closing `X` button with an optional callback."
										},
										{
											name: "hideClose",
											desc: "Hide the closing `X` button."
										},
										{
											name: "green",
											desc: "Change the general color scheme to [green](green)."
										},
										{
											name: "blue",
											desc: "Change the general color scheme to [blue](blue)."
										},
										{
											name: "purple",
											desc: "Change the general color scheme to [purple](purple)."
										},
										{
											name: "dark",
											desc: "Change the general color scheme to [dark](dark)"
										},
										{
											name: "lite",
											desc: "Revert back to the [default](lite) color scheme."
										}
									]
								}
							</script>
						<div>
					</section>
				</article>
			</div>
			<div data-ts="Panel" data-ts.label="Inline ToolBar" data-ts.onselect="ts.ui.ToolBar.hide()">
				<article>
					<h1>Inline ToolBar</h1>
					<section class="desc">
						<p>ToolBars can be positioned anywhere on the page.</p>
					</section>
					<section id="inline-toolbar-desc" data-important="THIS GETS INCLUDED IN OTHER PAGES!">
						<p>Assign <att>data-ts="ToolBar"</att> to a <elm>header</elm> or <elm>menu</elm> to initialize it as a ToolBar. Another attribute <att>data-ts.title</att> assigns a default title to the ToolBar.</p>
						<figure data-ts="DoxMarkup">
							<script>
								<header data-ts="ToolBar" data-ts.title="My ToolBar"></header>
							</script>
						</figure>
						<p>The ToolBar has no default outline, so we've fitted ours with a dropshadow. In your app, any such outlining should be done under consideration of the neighboring elements.</p>
						<menu data-ts="ToolBar" id="mytoolbar" data-ts.title="My ToolBar" class="dox-dropshadow"></menu>
						<p>You can get a hold of the component using a CSS selector and call any of the methods we've seen applicable to the Main ToolBar.</p>
						<figure data-ts="DoxScript" class="attention">
							<script type="runnable">
								ts.ui.get('#mytoolbar', toolbar => {
									toolbar.buttons([
										{label: 'One', type: 'ts-primary'},
										{label: 'Two', type: 'ts-secondary'},
										{label: 'Three'}
									]);
								});
							</script>
						</figure>
						<p>The <code>micro</code> method may come in handy to make the ToolBar somewhat smaller. In the HTML, you can also assign the CSS classname <code>ts-micro</code> for the same effect.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.get('#mytoolbar').micro();
							</script>
						</figure>
						<p>The ToolBar will economize horizonatal space by collecting multiple tertiaray buttons in a menu (when you <code>Run This Code</code>, you may need to scroll the page back up to see it).</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.get('#mytoolbar', toolbar => {
									toolbar.buttons().push(
										{label: 'Four'},
										{label: 'Five'},
										{label: 'Six'}
									);
								});
							</script>
						</figure>
						<p>If you are absolutely certain that your buttons will fit in all supported languages, you can disable this behavior with the <code>uncompact</code> method.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.get('#mytoolbar').uncompact();
							</script>
						</figure>
						<p>Here's an overview of the inline ToolBar component.</p>
						<div data-ts="DoxApi">
							<script type="application/json">
								{
									name: "ts.ui.ToolBarSpirit",
									methods: [
										{
											name: "buttons",
											args: "(array)",
											desc: "Get or set the buttons."
										},
										{
											name: "search",
											args: "(object)",
											desc: "Get or set the search configuration."
										},
										{
											name: "clear",
											desc: "Delete title, buttons and search."
										},
										{
											name: "micro",
											desc: "Shrink the ToolBar. You can call `macro` to grow it back again."
										},
										{
											name: "uncompact",
											desc: "Don't collect multiple tertiary buttons in a menu. You can call `compact` to restore default behavior."
										},
										{
											name: "showClose",
											args: "(function)",
											desc: "Show closing `X` button with an optional callback."
										},
										{
											name: "hideClose",
											desc: "Hide the closing `X` button."
										}
									]
								}
							</script>
						<div>
					</section>
				</article>
			</div>
		</main>
	</body>
</html>
