.ts-sideshow {
	> .ts-header,
	> .ts-footer,
	> .ts-panel {
		position: relative;
	}
	> .ts-header {
		&.ts-inset {
			&:after {
				content: '';
				.ts-mixin-maximize();
				background-image: linear-gradient(rgba(0, 0, 0, 0.2), transparent);
				height: 2px;
				top: auto;
			}
		}
		button.ts-tertiary {
			// probably the closing X
			border-color: transparent !important;
		}
	}
	> .ts-panel,
	> .ts-footer {
		padding: @ts-unit;
		.ts-menu,
		.ts-fieldset,
		.ts-calendar {
			.ts-mixin-expand();
		}
		.ts-buttons {
			.ts-mixin-expand(@ts-unit-quarter);
		}
		> .ts-menu,
		> .ts-form,
		> .ts-calendar {
			&:first-child {
				.ts-mixin-liftup();
			}
		}
	}
	> .ts-panel {
		z-index: 0;
		padding-bottom: @ts-unit-triple;
		> .ts-note {
			&:first-child {
				margin: -@ts-unit -@ts-unit 0 -@ts-unit;
			}
		}
	}
	> .ts-header,
	> .ts-footer {
		z-index: @ts-zindex-aside + 1; // account for nested asides
	}
	> .ts-shadow {
		position: absolute;
		height: 7px;
		width: 100%;
		z-index: @ts-zindex-main + 2;
		background-image: linear-gradient(rgba(0, 0, 0, 0.2), transparent);
	}
	> .ts-tabbar + .ts-shadow {
		height: 2px;
	}
	> .ts-panel ~ .ts-shadow {
		margin-top: -7px;
		background-image: linear-gradient(transparent, rgba(0, 0, 0, 0.2));
		z-index: @ts-zindex-aside + 1; // cover also aside nested in drawer
	}
	&.ts-flipping {
		transform-style: preserve-3d;
		transition: transform 1s;
	}
	background-color: transparent !important; // otherwise flip foks in Chrome
}

.ts-engine-gecko {
	// not sure why padding-bottom is not working here...
	.ts-sideshow {
		> .ts-panel:after {
			content: '';
			height: @ts-unit-triple;
			display: block;
		}
	}
}

// Flipping ....................................................................

/*
 * This relates to a potential future project about "Aside flipping" 
 * that perhaps we should just never mention to anyone ever again.
 */
.ts-sideshow {
	perspective: 1600px;
	&.ts-flipping,
	&.ts-flipped {
		> .ts-header,
		> .ts-panel,
		> .ts-footer,
		> .ts-shadow {
			transform-style: preserve-3d;
			backface-visibility: hidden;
		}
	}
	&.ts-flipping {
		> .ts-header,
		> .ts-panel,
		> .ts-footer,
		> .ts-shadow {
			transition: transform 1s;
		}
		&.ts-flip-out {
			> .ts-header,
			> .ts-panel,
			> .ts-footer,
			> .ts-shadow {
				transform: rotateY(90deg);
			}
		}
		&.ts-flip-in {
			> .ts-header,
			> .ts-panel,
			> .ts-footer,
			> .ts-shadow {
				transform: rotateY(0deg);
			}
		}
	}
	&.ts-flipped {
		transform: rotateY(-90deg);
	}
}
