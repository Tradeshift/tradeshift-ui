<!DOCTYPE html>
<html>
	<head>
		<title>Table Edit</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body class="nosticky">
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Editing the cells</h1>
				<section>
					<p>We can make the Table <code>editable</code> with a callback that fires on change.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#table1', table => {
										table.rows([
											['Single asterisks is used for *italic text*'],
											['Double asterisks is used for **strong text**'],
											['Single backtick is used for `monotype text`'],
											['Double tilde can be used to ~~Strike text~~']
										]).editable(function onedit(rowindex, cellindex, value) {
											console.log('Send to backend: ' + value);
											table.cell(rowindex, cellindex, value);
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table1"></div>
						</li>
					</ul>	
					<p>All cells are assumed editable unless negated in the column definition.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#table6', table => {
										table.cols([
											{label: 'Edit'},
											{label: 'Edit'},
											{label: 'Don\'t edit!', editable: false}
										]).rows([
											['V', 'V', 'X']
										]).editable(function onedit(ri, ci, value) {
											this.cell(ri, ci, value);
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table6"></div>
						</li>
					</ul>					
					<p>If you switch to verbose syntax, you can also disable editing per row.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#table7', table => {
										table.rows([
											{ cells: ['X', 'X', 'X'], editable: false},
											{ cells: ['V', 'V', 'V']},
											{ cells: ['V', 'V', 'V']}
										]).editable(function onedit(ri, ci, value) {
											this.cell(ri, ci, value);
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table7"></div>
						</li>
					</ul>
					<p>You can override both columns and rows by specifying <code>editable:true</code> on the individual cells. Again, this would best be done using verbose syntax.</p>
					
					<h3>Multiline editing</h3>
					<p>You can enter newlines by holding <kbd>SHIFT</kbd> on <kbd>ENTER</kbd>. You will need to enter two newlines to create a paragraph. Note however that we only show the <em>first</em> paragraph unless the column is set to wrap.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var popup = ts.ui.Notification;
									ts.ui.get('#table8', table => {
										table.cols([
											{label: 'Wrapped column', wrap: true},
											{label: 'Unwrapped column'}
										]).rows([
											[
												'Hold `SHIFT` while pressing `ENTER` to add a second paragraph.',
												'New paragraph ignored!'
											]
										]).editable(function onedit(ri, ci, value) {
											table.cell(ri, ci, value);
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table8"></div>
						</li>
					</ul>

					<h3>Input validation</h3>
					<p>Note that the actual update is a manual proces. This will give you a break to validate the input. In this example, we'll show the errors in a Notification.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var popup = ts.ui.Notification;
									ts.ui.get('#table2', table => {
										table.rows([
											[1, 1, 2, 3, 5],
											[8, 13, 21, 34, 55]
										]).editable(function onedit(ri, ci, value) {
											value = Number(value);
											if(isNaN(value)) {
												table.invalid(ri, ci);
												popup.error('Please type a number.', {
													onaccept: function() {
														table.focus(ri, ci);
													}
												});
											} else {
												console.log('Send to backend: ' + value);
												table.cell(ri, ci, value);
											}
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table2"></div>
						</li>
					</ul>
					<p>We can report the errors in a less annoying way if we pass a string as we mark the cells <code>invalid</code>. The message will show in the <a data-ts="Button" href="/#components/table/status.html">statubar</a> when the cell is focused. We'll also initialize the statusbar with an empty string so that it doesn't awkwardly pop into existance.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									function format(value) {
										return new Date(value).toDateString();
									}
									function valid(value) {
										return !isNaN(new Date(value).getTime());
									}
									ts.ui.get('#table3', table => {
										table.status('').rows([
											[{ value: '1985-10-26', text: format('1985-10-26') }],
											[{ value: '2015-10-21', text: format('2015-10-26') }],
											[{ value: '1955-11-12', text: format('1955-11-12') }]
										]).editable(function onedit(ri, ci, value) {
											if(valid(value)) {
												console.log('Send to backend: ' + value);
												table.cell(ri, ci, {
													value: value,
													text: format(value),
												});
											} else {
												var message = 'Please use the format *YYYY-MM-DD*';
												table.invalid(ri, ci, message);
											}
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table3"></div>
						</li>
					</ul>
					<p>When the cell is eventually updated, it automatically becomes valid. Let's talk more about the difference between <code>text</code> and <code>value</code> in the example above.</p>
					
					<h3>Text versus value</h3>
					<p>It doesn't always matter, but it's important to note that we <em>edit the value</em> while we <em>show the text</em>. Here's another example to illustrate the difference.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#table4', table => {
										table.rows([
											[
												{ value: 1000, text: '$1,000.00'},
												{ value: 2000, text: '$2,000.00'},
												{ value: 3000, text: '$3,000.00'}
											]
										]).editable();
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table4"></div>
						</li>
					</ul>
					<p>This way, we can edit, validate and persist the data in a uniform format (in this case, JavaScript numbers) while displaying a regionalized or otherwise customized format. We can exploit this creatively, by editing a document ID and showing the document title, for example. Remember to update verbosely:</p>
					<figure data-ts="DoxScript">
						<script>
							table.cell(rowindex, cellindex, {
								text: '4,000.00',
								value: 4000
							});
						</script>
					</figure>
					<p>&mdash; because otherwise the text becomes identical to the value. Also note that the <code>editable</code> callback will always serve the value as a string, so it may be nescessary to convert it to a number. Here's the more complete example.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									function format(n) {
										return '$' + n.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")
									}
									ts.ui.get('#table5', table => {
										table.rows([
											[
												{ value: 1000, text: format(1000)},
												{ value: 2000, text: format(2000)},
												{ value: 3000, text: format(1000)}
											]
										]).editable(function(ri, ci, value) {
											value = Number(value);
											if(isNaN(value)) {
												table.invalid(ri, ci);
											} else {
												table.cell(ri, ci, {value: value, text: format(value)});
											}
										});
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table5"></div>
						</li>
					</ul>
				</section>
				<section>
					<p>Here's an overview of the editing related features.</p>
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.TableSpirit",
								methods: [
									{
										name: "editable",
										args: ["(function)"],
										desc: "Make the Table editable with an optional callback that triggers whenever something is changed. The callback gets assigned to the Tables `onedit` method, see below."
									},
									{
										name: "onedit",
										args: ["number", "number", "string", "string"],
										desc: "Called whenever a cell changes value with arguments: rowindex, cellindex, newvalue, oldvalue."
									},
									{
										name: "uneditable",
										desc: "Make the Table not editable."
									},
									{
										name: "invalid",
										args: ["number", "number"],
										desc: "Mark the cell at given rowindex and cellindex invalid"
									},
									{
										name: "valid",
										args: ["number", "number"],
										desc: "Mark the cell at given rowindex and cellindex valid. When you update the cell (see below), the cell automatically becomes valid."
									},
									{
										name: "cell",
										args: ["number", "number", "string|number|object"],
										desc: "Update the cell at given rowindex and cellindex. Use the object argument (verbose syntax) to maintain both `text` and `value`."
									},
									{
										name: "focus",
										args: ["number", "number"],
										desc: "Focus the cell (textarea) at given rowindex and cellindex."
									},
									{
										name: "blur",
										args: ["number", "number"],
										desc: "Blur the cell at given rowindex and cellindex."
									}
								]
							}
						</script>
					</div>
				</section>
				<section>
					<div data-ts="Note">
						<i class="ts-icon-todo"></i>
						<p>API for knowing when something is invalid / everything is valid.</p>
					</div>
					<div data-ts="Note">
						<i class="ts-icon-todo"></i>
						<p>How to visually differentiate editable versus non-editable cells?</p>
					</div>
				</section>
			</article>
		</main>
	</body>
</html>
