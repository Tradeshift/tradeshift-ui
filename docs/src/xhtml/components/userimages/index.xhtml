<!DOCTYPE html>
<html>
	<head>
		<title>UserImage</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>UserImage</h1>
				<section class="desc">
					<p>If the user didn't upload a photo, the UserImage will generate a fallback image based on his or her name.</p>
				</section>
				<section>
					<p>You can initialize a UserImage by assigning <att>data-ts="UserImage"</att> to an <elm>img</elm> element. A fallback image will be generated based on the users name if the image has no <att>src</att> attribute or if the image somehow failed to load. You also can define initials in parentheses. For example:Karl Alfonso Benson (KB), you will get KB as an initials</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<img data-ts="UserImage" src="assets/jim.png" alt="Jim Bob Johnson"/>
							<img data-ts="UserImage" alt="Karl Benson"/>
							<img data-ts="UserImage" alt="Marshall Garrett"/>
							<img data-ts="UserImage" alt="Kelvin Castro"/>
							<img data-ts="UserImage" alt="Natalie Carr"/>
							<img data-ts="UserImage" alt="Rochelle Cox"/>
							<img data-ts="UserImage" alt="Mae Schultz"/>
							<img data-ts="UserImage" alt="Jimmie Edwards"/>
							<img data-ts="UserImage" alt="Cindy Jordan"/>
							<img data-ts="UserImage" alt="Karl Alfonso Benson (KB)"/>
						</script>
					</figure>
					<p>The image defaults to a size of <code>44x44</code> pixels. If you prefer a different size, you'll need to specify both <code>width</code> and <code>height</code> as attributes in the HTML.</p>
					<figure data-ts="DoxMarkup">
						<script type="text/html">
							<img ts-userimage alt="Trip Fontaine" width="88" height="88"/>
						</script>
					</figure>
				</section>
				<section>
					<p>You can select users from a menu by adding the classname <code>ts-user-menu</code> to a standard <a data-ts="Button" href="/#components/menus/">Menu</a> while also replacing the icon (<elm>i</elm> element) with a UserImage.</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script type="text/html">
							<menu data-ts="Menu" class="ts-user-menu">
								<li class="ts-checked">
									<button>
										<img data-ts="UserImage" src="assets/jim.png" alt="Jim Bob Johnson"/>
										<span>Jim Bob Johnson</span>
										<sub>jimbob@company.com</sub>
										<i class="ts-icon-checked"></i>
									</button>
								</li>
								<li>
									<button>
										<img data-ts="UserImage" alt="Karl Benson"/>
										<span>Karl Benson</span>
										<sub>karl@company.com</sub>
									</button>
								</li>
								<li>
									<button>
										<img data-ts="UserImage" alt="Marshall Garrett"/>
										<span>Marshall Garrett</span>
										<sub>marshall@company.com</sub>
									</button>
								</li>
							</menu>
						</script>
					</figure>
				</section>
				<section>
					<h3>JSON API</h3>
					<p>In case you need to work with the JSON model of an UserImage directly, this is all you need to know:
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.UserImageModel",
								properties: [
									{
										name: "name",
										type: "string",
										desc: "The user name. If no image exists, an image will be autogenerated based on this."
									},
									{
										name: "src",
										type: "(string)",
										desc: "User photo or avatar."
									},
									{
										name: "size",
										type: "(number)",
										desc: "Image dimension. Zero implies default (44px)."
									},
									{
										name: "value",
										type: "(string|number)",
										desc: "Used for sorting (in the Table)."
									}
								]
							}
						</script>
					</div>
				</section>
			</article>
		</main>
	</body>
</html>
