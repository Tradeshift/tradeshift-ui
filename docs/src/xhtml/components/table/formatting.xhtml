<!DOCTYPE html>
<html>
	<head>
		<title>Table Formatting</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body class="nosticky">
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Formatting the cells</h1>
				<section>
					<p>The Table supports a simple subset of <a data-ts="Button" href="https://en.wikipedia.org/wiki/Markdown" target="_blank">Markdown</a> out of the box.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#table1', table => {
										table.rows([
											['*Italic text*'],
											['**Strong text**'],
											['~~Strike text~~'],
											['`monotype text`']
										]);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table1"></div>
						</li>
					</ul>
					<p>Use double newline <code>\n</code> to render multiple paragraphs. We also have <code>UL</code> lists.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#table2', table => {
										table.rows([
											['Para 1\n\n\Para 2\n\nPara 3'],
											['* Item 1\n* Item 2\n* Item 3']
										]);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table2"></div>
						</li>
					</ul>
					<p>To support links, you'll first need to call the <code>linkable</code> method, just to remind yourself that you may now become exposed to phishing attacks.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									ts.ui.get('#table3', table => {
										table.linkable();
										table.rows([
											['Please visit [Tradeshift](http://www.tradeshift.com)']
										]);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table3"></div>
						</li>
					</ul>
					<p>When you link to something, make sure to include the protocol <code>http(s)://</code> and note that links should not be used for internal navigation, at least not just yet.</p>
					<p>If the link should work more like a button, you can intecept the click action with the <code>onlink</code> callback. In this case, you can use any string as the <code>href</code>.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var popup = ts.ui.Notification;
									ts.ui.get('#table4', table => {
										table.linkable(function onlink(anystring) {
											popup.success(anystring);
										}).rows([
											['Choose link [one](ONE) or [two](TWO) or [three](THREE).']
										]);
									});
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table4"></div>
						</li>
					</ul>
				</section>
			</article>
		</main>
	</body>
</html>
