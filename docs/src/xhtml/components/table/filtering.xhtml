<!DOCTYPE html>
<html>
	<head>
		<title>Table Filter</title>
		<object data="tabs.xhtml"></object>
	</head>
	<body class="nosticky">
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>	
				<h1>Filtering the columns</h1>
				<section>
					<p>The table doesn't really know anything about "filtering", but it does support a <code>button</code> which can be assigned an <code>icon</code> and an <code>onclick</code> method. Perhaps you can use this to create your own filtering UI in an <a data-ts="Button" href="/#components/asides/">Aside</a> or something.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#table1');
									var popup = ts.ui.Notification;
									table.cols([
										{
											label: 'Hello',
											type: 'ts-number',
											button: {
												icon: 'ts-icon-addfilter',
												onclick: function() {
													this.icon = 'ts-icon-delete';
													popup.success('Clicked!');
												}
											}
										}
									]);
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table1"></div>
						</li>
					</ul>
					<p>You can change the <code>icon</code> and the <code>onclick</code> method as often as you like.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var table = ts.ui.get('#table1');
							var popup = ts.ui.Notification;
							var mycol = table.cols()[0];
							mycol.button.icon = 'ts-icon-view';
							mycol.button.onclick = function() {
								popup.success('Clicked again!');
							};
						</script>
					</figure>
					<p>When you implement filtering, you can either <a data-ts="Button" href="/#components/table/building.html">build the rows</a> from scratch or update the <code>visible</code> property of the existing row &mdash; like in this example.</p>
					<ul class="splitscreen">
						<li>
							<figure data-ts="DoxScript">
								<script type="runnable">
									var table = ts.ui.get('#table2');
									var popup = ts.ui.Notification;
									var isodd = false;
									table.rows([[1], [2], [3], [4], [5], [6], [7]]).cols([
										{
											label: 'All numbers',
											type: 'ts-number',
											button: {
												icon: 'ts-icon-addfilter',
												info: 'Show odd rows',
												onclick: function() {
													isodd = !isodd;
													this.icon = isodd ? 'ts-icon-delete' : 'ts-icon-addfilter';
													this.info = isodd ? 'Show all rows' : 'Show odd rows';
													table.cols()[0].label = isodd ? 'Odd numbers' : 'All numbers';
													table.rows().forEach(function(row, i) {
														row.visible = isodd ? (i % 2 === 0) : true;
													});
												}
											}
										}
									]);
								</script>
							</figure>
						</li>
						<li>
							<div data-ts="Table" id="table2"></div>
						</li>
					</ul>
					<div data-ts="Note">
						<i class="ts-icon-info"></i>
						<p>The <code>button</code> gets hidden by the <code>search</code> because it doesn't look right to have both. Let us know if that becomes a problem.</p>
					</div>
				</section>
			</article>
		</main>
	</body>
</html>
