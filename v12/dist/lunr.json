[{"title":"Testing","href":"TEST.html","content":"Hell World windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Automagic Focus","href":"appendix/autofocus/index.html","content":"Automagic focus On this page weve added a yellow outline to the focused element Keyboard support is always a work in progress but we have a system to ensure that something is in theory always focused Note that there is no default focus but you can set the default focus with the HTML autofocus attribute In Notifications and Asides well always attempt to focus something even if we cant find any element with the autofocus attribute Click the buttons to see Open the Notification Open the Aside TODO Note about focus on mobile device If you find a bug or need a feature Create GitHub Issue Aside content Open next aside Open next aside Thanks now close them It appears we have a bug If you do click that button the focus will be lost But you can try to close them one at a time by clicking the X in the corner windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"Automated Layout","href":"appendix/autolayout/index.html","content":"Automated Layout var LayoutModel tsuiModelextend topBar false toolBarBefore false toolBarAfter false sideBarBefore false sideBarAfter false new LayoutModeloutput tsform margintop 20px hack for empty SPAN labelspan fontweight 300 edbml declareedbmliSNtu1 asfunction edbml use strict var out edbmlout set edbmlset txt edbmlsafetext val edbmlsafeattr layout edbmlinputLayoutModel if layouttopBar outhtml if layoutsideBarBefore outhtml outhtml SideBar content Optional SideBar footer if layouttoolBarBefore outhtml outhtml Automated layout outhtml We donapost have a lot of layouts yet but the page will automatically transform into a classic three column layout with fixed headers and footer as certain components are added You can toggle these components in the checklist outhtml function checkboxtext prop localhost if localhost locationhostname localhost outhtml var 1 setfunctionvalue checked layoutprop checked this outhtml outhtml txttext checkboxTopBar topBar checkboxToolBar before Main DEPRECATED toolBarBefore true checkboxToolBar after Main DEPRECATED toolBarAfter true checkboxSideBar before Main sideBarBefore checkboxSideBar after Main sideBarAfter outhtml TODO Save this page in mobile breakpoint if layouttoolBarAfter outhtml if layoutsideBarAfter outhtml outhtml SideBar content Optional SideBar footer return outwrite withInstructions input name layout type LayoutModel windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,null,{"title":"Colors","href":"appendix/colors/index.html","content":"Colors Color Palette The following colors are part of UI components and can be referenced in Less with the variable name on the left edbmldeclareedbml1JJU8I1asfunction edbmlcolors use strict var out edbmlout att edbmlatt txt edbmlsafetext if colors outhtml colorsforEachfunctionset var darkest setObjectkeyssetObjectkeyssetlength 1 var colorTitle Objectkeysset0 replace replacelightest replacetscolor if colorTitle white colorTitle black and white outhtml txtcolorTitle var counter 0 for var name in set counter var code setname attstyle backgroundcolor code color ffffff if counter 2 nameincludesslate nameincludesblack attstyle backgroundcolor code color darkest outhtml txtname txtcode outhtml outhtml return outwrite Core Colors Core colors are chosen to look good together comply with WCAG 20 standards and provide an accessabile experience for visually impaired and color blind users All Core Colors have a reserved for special meaning within Tradeshifts UI tscolorblue Main color of the primary action CTA Accent color Link color Active states tscolorgreen Positive statuses Accepting agreements Creating new objects on the platform tscolororange Warning messages icons Highlight important information note tscolorred Danger messages deletion confirmation Rejecting action Negative actions Error states and messages tscolorpurple Reserved for Ada Tradeshifts machine learning assistant tscolorpink Reserved for Tradeshift GO Gray Shades Tradeshifts color palette has 12 distinct shades of gray Those are recommanded for backgrounds negative space separators borders and shadows Here are some of the uses of greay shades in Tradeshifts UI tscolorgraylightest Used for footers background tscolorgraylighter Background of the page Ensures high contrast with white boards on top of it Disabled states for form elements tscolorgraylight Borders board input fields checkboxes radios buttons etc Separators tabbed navigation table seaparators etc Default color of the icons tscolorslatelighter Chromes hover background tscolorslatelight Chromes background windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"Elements","href":"appendix/elements/index.html","content":"Elements Elements is the new Web Componentpowered Tradeshift UI library You can check the project Github page to get to know it better learn how you can use them or see how you can contribute Or You can just go to its Storybook to play around with them If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Appendix","href":"appendix/index.html","content":"Appendix You can make great Tradeshift apps by studying these pages that didnt fit elsewhere in the menu structure Implement responsive design with some handy CSS classnames Get an overview of the color scheme used in Tradeshift See some basic examples of the general typography Learn the primitive dialect of Markdown that we use Be aware that UI components will attempt to manage the focus Check out Tradeshift new Web Componentpowered UI library Elements If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Markdown","href":"appendix/markdown/index.html","content":"Markdown If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,null,{"title":"ts.io","href":"appendix/tsio/index.html","content":"tsio tsio is an interapp communication method As part of the migration to TSUI V12 you might need to do this in order to abstract asides that rely on TSUI V11 away from your application Read the documentation here If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Typography","href":"appendix/typo/index.html","content":"Typography Heres a very basic overview of the typography used in Tradeshift Apps H1fontsize 36px tsfontsizexxbig H2fontsize 24px tsfontsizexbig H3fontsize 18px tsfontsizebig Normal paragraph of textfontsize 14px tsfontsize Unordered List Ordered List If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,null,null,null,null,null,null,null,null,null,{"title":"API-only Components","href":"components/api-only.html","content":"APIonly components These components will insert themselves into the DOM and generally dont come with a HTML API Some of them are known to affect the general page layout Header The Header provides tabs for navigation and buttons that affect the entire app tsuiHeaderbuttons label Button type tsprimary label Button type tssecondary label Button onclick function consolelogClicked tsuiHeaderbuttons label Button type tsprimary label Button type tssecondary label Button onclick function consolelogClicked Footer The Footer features buttons that relate to the Main area and actions that are reserved for working with selected objects of any kind tsuiFooterbuttons label Button type tsprimary label Button type tssecondary label Button onclick consolelogButton clicked actions label Action icon tsiconfollowed label Action icon tsiconfavorites label Action icon tsiconcode onclick consolelogAction clicked statusHello World tsuiFooterbuttons label Button type tsprimary label Button type tssecondary label Button onclick consolelogButton clicked actions label Action icon tsiconfollowed label Action icon tsiconfavorites label Action icon tsiconcode onclick consolelogAction clicked statusHello World DatePicker A easy way to select dates tsuiDatePicker title Your Birthday value 19840523 min 19840101 max 19851224 onselect functiondate tsuiNotificationsuccessdate selected thisclose onclosed function thisdispose open tsuiDatePicker title Your Birthday value 19840523 min 19840101 max 19851224 onselect functiondate tsuiNotificationsuccessdate selected thisclose onclosed function thisdispose open Dialog Works much like the JavaScript confirm method tsuiDialogconfirmShow the Warning dialog Show It Nope onaccept function tsuiDialogwarningShow the Danger dialog Of Course onaccept function tsuiDialogdangerThat could be dangerous Got it tsuiDialogconfirmShow the Warning dialog Show It Nope onaccept function tsuiDialogwarningShow the Danger dialog Of Course onaccept function tsuiDialogdangerThat could be dangerous Got it Notification Themed variants of the JavaScript alert method tsuiNotificationsuccessNotificationsuccess tsuiNotificationinfoNotificationinfo tsuiNotificationwarningNotificationwarning tsuiNotificationerrorNotificationerror tsuiNotificationsuccessNotificationsuccess tsuiNotificationinfoNotificationinfo tsuiNotificationwarningNotificationwarning tsuiNotificationerrorNotificationerror Note A nice way to inform the user about something in general This is not for status messages The Note attaches to the top of the page so you will have to scroll back up tsuiNote icon tsiconheart text This is the Note Thanks for scrolling up onclose function tsuiNotificationsuccessThe Note is gone tsuiNote icon tsiconheart text This is the Note Thanks for scrolling up onclose function tsuiNotificationsuccessThe Note is gone UserCard Show some details about a user tsuiUserCard id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Wired Earp image assetswiredearppng title EDB Programmer role Gentleman Spy email jmotradeshiftcom company Tradeshift companyUrl httptradeshiftcom open tsuiUserCard id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Wired Earp image assetswiredearppng title EDB Programmer role Gentleman Spy email jmotradeshiftcom company Tradeshift companyUrl httptradeshiftcom open If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Aside HTML","href":"components/asides/index.html","content":"Aside Sidepanel used for small user interactions such as selecting a date The Aside component must be created with a child component Panel Aside content Aside content You can create the Aside wherever you like just make sure that its positioned outside of the Main element when it opens Perhaps you can simply place it in the body Aside content Aside content Adding a header The datatstitle attribute configures the Aside with a nice header Aside content Aside content Adding a footer You can insert a footer in the Aside Note that the footer will be fixed at the bottom of the aside Aside content Aside footer Aside content Aside footer Opening the aside The datatsopen attribute can be flipped to toggle the Aside Aside content Aside content Lets try that with jQuery myasideattrdatatsopen true myasideattrdatatsopen true If you are doing that you might as well open the Aside via the certified API tsuigetmyasideopen tsuigetmyasideopen Adding some tabs If an Aside contains more than one Panel we will automatically create a TabBar to switch between the panels like in this example Aside content Aside content Aside content Aside content The tabs can also be created programatically In that case the panel switching mechanism must be implemented manually somehow tsuigetaside3 aside asidetabs label Tab 1 onselect function consolelogPanel one label Tab 2 onselect function consolelogPanel two open tsuigetaside3 aside asidetabs label Tab 1 onselect function consolelogPanel one label Tab 2 onselect function consolelogPanel two open You can also mix the two approaches to dynamically update tabs that were created with Panel elements This will for example assign an onselect callback to the third tab tsuigetmyaside aside var tabs asidetabs tabs2onselect function consolelogselected tsuigetmyaside aside var tabs asidetabs tabs2onselect function consolelogselected To remove all dynamically created tabs you can simply clear the tab collection tsuigetmyaside aside asidetabsclear tsuigetmyaside aside asidetabsclear Adding some buttons Its common for Asides to show a group of buttons usually following a set of form fields To make sure that they always look the same the certified way to add this group of buttons is via a Buttons menu form fields here Submit Changes Cancel Everything form fields here Submit Changes Cancel Everything Showing the spinner The datatsbusy attribute can be set to show the spinner Aside content Aside content Lets try that with jQuery var aside myaside asideattrdatatsbusy Loading asideattrdatatsopen true setTimeoutfunction asideattrdatatsbusy setTimeoutfunction asideattrdatatsopen false 500 1500 var aside myaside asideattrdatatsbusy Loading asideattrdatatsopen true setTimeoutfunction asideattrdatatsbusy setTimeoutfunction asideattrdatatsopen false 500 1500 Tracking the state You can setup inline callbacks to be invoked when the aside changes state using one of onopen onopened onclose and onclosed You can also do this with event listeners if you like Aside content Aside content Stacking Asides Asides will automatically stack themselves whenever new asides open The old Asides will slide elegantly to the right The new Aside will float the top of the zindex Bacon ipsum dolor sit plsesnack jerky pork belly short loin sausage andouille kevin capicola ham hamburger doner Shank prosciutto flank kevin ribeye short ribs swine ham pork porchetta spare ribs kielbasa beef ribs Prosciutto pancetta shank boudin Corned beef shoulder capicola turducken prosciutto pork belly sirloin shankle brisket chuck leberkas tail beef Sirloin meatloaf pastrami beef ribs Ball tip pastrami landjaeger brisket Tradeshift strip steak short loin pancetta meatball corned beef tenderloin beef ribs spare ribs Tradeshift sausage strip steak ham ribeye pork loin meatball turkey corned beef shoulder Leberkas jerky sirloin boudin turducken ham hock pastrami Doner pig boudin sausage ball tip leberkas ground round beef jowl kielbasa tongue shankle spare ribs tail shoulder Fatback pork kielbasa ham doner pig short loin short ribs pancetta Pancetta jerky biltong short loin capicola beef Pork belly strip steak venison brisket shoulder beef filet mignon shank tenderloin tritip ground round shankle cow Bacon ipsum dolor sit plsesnack jerky pork belly short loin sausage andouille kevin capicola ham hamburger doner Shank prosciutto flank kevin ribeye short ribs swine ham pork porchetta spare ribs kielbasa beef ribs Prosciutto pancetta shank boudin Corned beef shoulder capicola turducken prosciutto pork belly sirloin shankle brisket chuck leberkas tail beef Sirloin meatloaf pastrami beef ribs Ball tip pastrami landjaeger brisket Tradeshift strip steak short loin pancetta meatball corned beef tenderloin beef ribs spare ribs Tradeshift sausage strip steak ham ribeye pork loin meatball turkey corned beef shoulder Leberkas jerky sirloin boudin turducken ham hock pastrami Doner pig boudin sausage ball tip leberkas ground round beef jowl kielbasa tongue shankle spare ribs tail shoulder Fatback pork kielbasa ham doner pig short loin short ribs pancetta Pancetta jerky biltong short loin capicola beef Pork belly strip steak venison brisket shoulder beef filet mignon shank tenderloin tritip ground round shankle cow Aside footer Bacon ipsum dolor sit plsesnack jerky pork belly short loin sausage andouille kevin capicola ham hamburger doner Shank prosciutto flank kevin ribeye short ribs swine ham pork porchetta spare ribs kielbasa beef ribs Prosciutto pancetta shank boudin Corned beef shoulder capicola turducken prosciutto pork belly sirloin shankle brisket chuck leberkas tail beef Sirloin meatloaf pastrami beef ribs Ball tip pastrami landjaeger brisket Tradeshift strip steak short loin pancetta meatball corned beef tenderloin beef ribs spare ribs Tradeshift sausage strip steak ham ribeye pork loin meatball turkey corned beef shoulder Leberkas jerky sirloin boudin turducken ham hock pastrami Doner pig boudin sausage ball tip leberkas ground round beef jowl kielbasa tongue shankle spare ribs tail shoulder Fatback pork kielbasa ham doner pig short loin short ribs pancetta Pancetta jerky biltong short loin capicola beef Pork belly strip steak venison brisket shoulder beef filet mignon shank tenderloin tritip ground round shankle cow Tradeshift salami burger mit invoice pastrami shankle venison meatball pork belly capicola ribeye sirloin doner Aside Tail kielbasa beef ribs landjaeger pork belly Tbone pig andouille doner ham sirloin short ribs meatloaf salami strip steak tenderloin short loin tritip pork loin Pastrami jowl sirloin kevin jerky filet mignon bacon pork chop brisket pancetta Spare ribs ground round pork belly pork chop doner swine fatback bresaola Picanha beef ribs burgdoggen bacon sausage rump Porchetta turkey ribeye tenderloin landjaeger spare ribs strip steak pork belly tbone Tenderloin tbone ham doner corned beef chuck fatback ground round short ribs tritip Landjaeger ribeye brisket boudin tongue pork kevin frankfurter Swine capicola filet mignon cow spare ribs ribeye salami sausage porchetta hamburger short ribs corned beef Open next aside Open next aside Thanks now close them windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Aside JS","href":"components/asides/js.html","content":"Asides JS You can get a hold of the Aside component and control it with JavaScript tsuigetmyaside aside you can pass an element instead of an ID asideopen asideclose asidetoggle asidetitleUpdated title Tracking with methods You can overwrite the methods onopen onopened onclose and onclosed to do something whenever the aside changes state asideonopen function consolelogAside will open If you return false in methods onopen and onclose the aside will respect that Tracking with events You can also monitor the asides with DOM event listeners function debuge consolelogetype etarget documentaddEventListenertsopen debug documentaddEventListenertsopened debug documentaddEventListenertsclose debug documentaddEventListenertsclosed debug The events tsopen and tsclose can be blocked with epreventDefault to prevent the aside from changing state If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"components/asides/tabs.html","content":""},null,null,null,null,{"title":"StatusBar","href":"components/bars/statusbar-DEPRECATED.html","content":"Main StatusBar is deprecated This component is deprecated in favor of the Footer In a future release the TopBar and TabBar and ToolBar will be collected in the equivalent Header You can still use the StatusBar as an inline component Although the StatusBar can display status messages and features a Pager its perfectly alright to use it just to show some buttons You can show a status message with basic Markdown support tsuiStatusBarmessage The status message supports bold and italic text tsuiStatusBarmessage The status message supports bold and italic text If you call linkable you can also some links in the message Beware of phishing tsuiStatusBarlinkablemessage Please visit Tradeshifthttpwwwtradeshiftcom tsuiStatusBarlinkablemessage Please visit Tradeshifthttpwwwtradeshiftcom You can pass a callback function to be invoked whenever a link is clicked tsuiStatusBarlinkablefunction onclickurl tsuiNotificationsuccessurl thismessageThanks messagePlease click the linkThe URL can be any string tsuiStatusBarlinkablefunction onclickurl tsuiNotificationsuccessurl thismessageThanks messagePlease click the linkThe URL can be any string StatusBarbuttons Add buttons to the StatusBar with the buttons method This both sets and gets If you omit the argument youll get the current buttons jQuery style tsuiStatusBarbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two tsuiStatusBarbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two You can use array methods like push pop shift unshift splice reverse and so on to manage buttons Just note that the buttons length is readonly The buttons type property works like the CSS class for a regular Button The StatusBar will automatically sort all buttons from primary to tertiary If theres more than one tertiary button these will be pushed to an Aside In the mobile breakpoint all the buttons will be pushed to an Aside Buttons wont actually do anything unless you define the onclick method tsuiStatusBarbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks tsuiStatusBarbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks Fortunately you can always change what happens when a button gets clicked tsuiStatusBarbuttonsforEachfunctionbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel tsuiStatusBarbuttonsforEachfunctionbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel Query buttons You can locate buttons by index in the buttons collection But since this isnt likely to match the order in which they appear on screen its easier to give the buttons an id and find them using buttonsget var buttons tsuiStatusBarbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary var buttons tsuiStatusBarbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary Hide buttons You can hide and show buttons You can also toggle visible tsuiStatusBarbuttonsforEachfunctionbutton ifbuttonvisible buttonhide else buttonshow tsuiStatusBarbuttonsforEachfunctionbutton ifbuttonvisible buttonhide else buttonshow Disable buttons You can disable and enable buttons You can also toggle disabled tsuiStatusBarbuttonsforEachfunctionbutton ifbuttondisabled buttonenable else buttondisable tsuiStatusBarbuttonsforEachfunctionbutton ifbuttondisabled buttonenable else buttondisable Busy buttons We can display a temporary progress indicator with the busy and done methods var button tsuiStatusBarbuttons0 buttonbusy setTimeoutfunction buttondone 1000 var button tsuiStatusBarbuttons0 buttonbusy setTimeoutfunction buttondone 1000 The busy method supports an optional status message var button tsuiStatusBarbuttons0 buttonbusyMaking progress setTimeoutfunction buttondone 1000 var button tsuiStatusBarbuttons0 buttonbusyMaking progress setTimeoutfunction buttondone 1000 Button groups You can also group buttons in arrays to create button groups that look like this tsuiStatusBarbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger tsuiStatusBarbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger You can of course also create grouped buttons with icons instead of text var group tsuiStatusBarbuttons2 grouppush icon tsiconother type tssecondary var group tsuiStatusBarbuttons2 grouppush icon tsiconother type tssecondary Heres a summary of the buttons collection and button model StatusBarpager You can initialize a Pager in the StatusBar tsuiStatusBarpager pages 23 page 0 onselect functionpage consolelogpage tsuiStatusBarpager pages 23 page 0 onselect functionpage consolelogpage To make room for the Pager and to make it look nice centeraligned any potential buttons in the StatusBar will be moved into a menu Note that even primary buttons will be hidden when the StatusBar features a Pager TODO Explain how the statusbar behaves in mobile view Also we might need to split long status messages into two lines when the window is resizing For now well just pretend that all users have desktopsized screens Inline Statusbar The responsive StatusBar is a work in progress This is a dev preview Assign datatsStatusBar to a footer or menu to initialize it as a StatusBar Another attribute datatsmessage displays the message The StatusBar has no default outline so weve fitted ours with a dropshadow In your app any such outlining should be done under consideration of the neighboring elements You can get a hold of the component using a CSS selector and call any of the methods weve seen applicable to the Main ToolBar Notice what happens when we add content tsuigetmystatusbar statusbar statusbarbuttons label One type tsprimary label Two type tssecondary label Three pager pages 23 messageThe layout has changed tsuigetmystatusbar statusbar statusbarbuttons label One type tsprimary label Two type tssecondary label Three pager pages 23 messageThe layout has changed Because there is limited horizontal space available the StatusBar has snapped into a layout that is optimized for mobile phones The exact layout depends on the features you enable but you can in any case intercept this change with the onlayout callback var statusbar tsuigetmystatusbar statusbaronlayout function thismessageThe layout has changed again statusbarpagernull just to show that it works var statusbar tsuigetmystatusbar statusbaronlayout function thismessageThe layout has changed again statusbarpagernull just to show that it works This is a work in progress windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"TabBar","href":"components/bars/tabbar.html","content":"TabBar tsuireadyfunction support color scheme links in API table var method tsuigethtmlactionaddtsactionsafelink onaction functiona var tabbar tsuigetmytabbar if method tabbaradata methodcalltabbar tsdoxtabs Main TabBar Second level navigation is in danger of becoming deprecated so please be cautious with this design pattern We can initialize the TabBar tabs with the the tabs method tsuiTabBartabs label Main TabBar label Inline TabBar but since the page already has tabs we will instead append a new tab to the existing collection If you omit the argument youll get the current tabs jQuery style var tabs tsuiTabBartabs tabspush label Bonus Tab onselect function var text thislabel selected tsuiNotificationsuccesstext var tabs tsuiTabBartabs tabspush label Bonus Tab onselect function var text thislabel selected tsuiNotificationsuccesstext You can use array methods like push pop shift unshift splice and so on to manage tabs just note that the tabs length is a readonly property Also note that tabs dont do anything by default so what happens at onselect is completely up to you Updating tabs We can at any time change what happens when a tab gets selected We can also change the tab label if we like although maybe this would be confusing for the user var tabs tsuiTabBartabs tabs2label Choose Me tabs2onselect function thislabel Thanks var tabs tsuiTabBartabs tabs2label Choose Me tabs2onselect function thislabel Thanks Selecting tabs We can programatically select a tab using one of these approaches tsuiTabBartabs2select tsuiTabBartabsselectedIndex 0 Querying tabs This will all become a lot easier if we give all the tabs an id and use tabsget var tabs tsuiTabBartabs tabssplice2 0 label Example Tab id exampletab tabsgetexampletabselect var tabs tsuiTabBartabs tabssplice2 0 label Example Tab id exampletab tabsgetexampletabselect Tabs icons You can add a tab with an icon if somehow that tab is special tsuiTabBartabspush label Icon Tab icon tsicontodo tsuiTabBartabspush label Icon Tab icon tsicontodo Tab counters You can add a counter to the tabs for whatever reason you like tsuiTabBartabsforEachfunctiontab tabcounter MathceilMathrandom 10 tsuiTabBartabsforEachfunctiontab tabcounter MathceilMathrandom 10 When the counter reaches zero it disappears tsuiTabBartabsforEachfunctiontab tabcounter tsuiTabBartabsforEachfunctiontab tabcounter Closeable tabs You can create closeable tabs but note that the tab must be selected before it can be closed You can return false in the onclose method to prevent the tab from closing if this would otherwise cause data loss tsuiTabBartabspush label Closeable Tab closeable true selected true onclose function tsuiNotificationsuccessthislabel closed tsuiTabBartabspush label Closeable Tab closeable true selected true onclose function tsuiNotificationsuccessthislabel closed NewTab button You can allow the user to create new tabs via a special button as seen in popular browsers Note that the button just triggers a callback and that the new tab must be created manually In the example below the selected property also selects the tab var tabs tsuiTabBartabs tabsshowNewfunction onclick tabspush label My New Tab selected true var tabs tsuiTabBartabs tabsshowNewfunction onclick tabspush label My New Tab selected true If you regret this later on you can also hide the button tsuiTabBartabshideNew tsuiTabBartabshideNew Heres a summary of the tabs collection and tab model TabBarbuttons Its perfectly alright to add buttons to the TabBar either to avoid wasting space on a separate ToolBar or because the buttons will affect content in all the tabs tsuiTabBarbuttons label One type tsprimary label Two type tssecondary label Three tsuiTabBarbuttons label One type tsprimary label Two type tssecondary label Three If the buttons affect the selected tab only remember to clear the buttons when a new tab is selected tsuiTabBarbuttonsclear tsuiTabBarbuttonsclear Heres a summary of the buttons collection and button model Inline TabBar TabBars can be positioned anywhere on the page Assign datatsTabBar to a header or nav to initialize it as a TabBar All features are controlled through a JavaScript API You can get a hold of the component using a CSS selector and call any of the methods weve seen applicable to the Main TabBar tsuigetmytabbar tabbar tabbartabs label One label Two label Three tsuigetmytabbar tabbar tabbartabs label One label Two label Three Heres an overview of the inline TabBar component windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"components/bars/tabs.html","content":""},{"title":"ToolBar","href":"components/bars/toolbar.html","content":"ToolBar tsuireadyfunction support color scheme links in API table var method tsuigethtmlactionaddtsactionsafelink onaction functiona if method tsuiToolBaradata methodcalltsuiToolBar tsdoxtabs Main ToolBar Besides buttons for contextual actions the ToolBar also features a Search Beware that this API will be replaced be the tsuiHeader in a future release Before we begin we may consider adding a descriptive title to the ToolBar tsuiToolBartitleMy ToolBar tsuiToolBartitleMy ToolBar ToolBarbuttons Add buttons to the ToolBar with the buttons method This both sets and gets If you omit the argument youll get the current buttons jQuery style tsuiToolBarbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two tsuiToolBarbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two You can use array methods like push pop shift unshift splice reverse and so on to manage buttons Just note that the buttons length is readonly The buttons type property works like the CSS class for a regular Button The ToolBar will automatically sort all buttons from primary to tertiary If theres more than one tertiary button these will be pushed to an Aside In the mobile breakpoint all the buttons will be pushed to an Aside Buttons wont actually do anything unless you define the onclick method tsuiToolBarbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks tsuiToolBarbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks Fortunately you can always change what happens when a button gets clicked tsuiToolBarbuttonsforEachfunctionbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel tsuiToolBarbuttonsforEachfunctionbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel Query buttons You can locate buttons by index in the buttons collection But since this isnt likely to match the order in which they appear on screen its easier to give the buttons an id and find them using buttonsget var buttons tsuiToolBarbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary var buttons tsuiToolBarbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary Hide buttons You can hide and show buttons You can also toggle visible tsuiToolBarbuttonsforEachfunctionbutton ifbuttonvisible buttonhide else buttonshow tsuiToolBarbuttonsforEachfunctionbutton ifbuttonvisible buttonhide else buttonshow Disable buttons You can disable and enable buttons You can also toggle disabled tsuiToolBarbuttonsforEachfunctionbutton ifbuttondisabled buttonenable else buttondisable tsuiToolBarbuttonsforEachfunctionbutton ifbuttondisabled buttonenable else buttondisable Busy buttons We can display a temporary progress indicator with the busy and done methods var button tsuiToolBarbuttons0 buttonbusy setTimeoutfunction buttondone 1000 var button tsuiToolBarbuttons0 buttonbusy setTimeoutfunction buttondone 1000 The busy method supports an optional status message var button tsuiToolBarbuttons0 buttonbusyMaking progress setTimeoutfunction buttondone 1000 var button tsuiToolBarbuttons0 buttonbusyMaking progress setTimeoutfunction buttondone 1000 Button groups You can also group buttons in arrays to create button groups that look like this tsuiToolBarbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger tsuiToolBarbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger You can of course also create grouped buttons with icons instead of text var group tsuiToolBarbuttons2 grouppush icon tsiconother type tssecondary var group tsuiToolBarbuttons2 grouppush icon tsiconother type tssecondary Heres a summary of the buttons collection and button model ToolBarsearch Youll get a dedicated search field by passing an object to the search method tsuiToolBarsearch onsearch functionvalue tsuiNotificationsuccessvalue Search cleared tsuiToolBarsearch onsearch functionvalue tsuiNotificationsuccessvalue Search cleared The search field expands when the field is focused by the user or whenever theres a nonempty value in the field You can change the value like this var search tsuiToolBarsearch searchvalue Hello world var search tsuiToolBarsearch searchvalue Hello world Search callbacks The onsearch callback gets invoked when when the user presses ENTER var search tsuiToolBarsearch searchvalue Press ENTER here searchonsearch functionvalue tsuiNotificationsuccessvalue Search cleared var search tsuiToolBarsearch searchvalue Press ENTER here searchonsearch functionvalue tsuiNotificationsuccessvalue Search cleared If defined the onidle method gets called whenever the user pauses typing var search tsuiToolBarsearch searchvalue Try it now searchonidle functionvalue tsuiNotificationsuccessvalue var search tsuiToolBarsearch searchvalue Try it now searchonidle functionvalue tsuiNotificationsuccessvalue The onidle method may also be called when the field loses focus The idletime property controls the timeout value default is 500 milliseconds Search info The info property doubles as both the placeholder when the field is expanded and the title or tooltip when the field is collapsed var search tsuiToolBarsearch searchinfo Search amongst the things searchvalue collapse the field var search tsuiToolBarsearch searchinfo Search amongst the things searchvalue collapse the field Search flex You can flex the search field to make it stretch the available width of the ToolBar In that case it will remain expanded even when theres no default value tsuiToolBarsearch tip Flex all the way flex 1 buttons label No Flex type tsprimary tsuiToolBarsearch tip Flex all the way flex 1 buttons label No Flex type tsprimary You can also assign flex to buttons although that has little practical value In the future we may provide a more advanced distribution scheme Thats why we use a number instead of a boolean but you should always use 1 for now Here an overview of the properties and methods of the Search model and heres a final overview of the Main ToolBar methods Inline ToolBar ToolBars can be positioned anywhere on the page Assign datatsToolBar to a header or menu to initialize it as a ToolBar Another attribute datatstitle assigns a default title to the ToolBar The ToolBar has no default outline so weve fitted ours with a dropshadow In your app any such outlining should be done under consideration of the neighboring elements You can get a hold of the component using a CSS selector and call any of the methods weve seen applicable to the Main ToolBar tsuigetmytoolbar toolbar toolbarbuttons label One type tsprimary label Two type tssecondary label Three tsuigetmytoolbar toolbar toolbarbuttons label One type tsprimary label Two type tssecondary label Three The micro method may come in handy to make the ToolBar somewhat smaller In the HTML you can also assign the CSS classname tsmicro for the same effect tsuigetmytoolbarmicro tsuigetmytoolbarmicro The ToolBar will economize horizonatal space by collecting multiple tertiaray buttons in a menu when you Run This Code you may need to scroll the page back up to see it tsuigetmytoolbar toolbar toolbarbuttonspush label Four label Five label Six tsuigetmytoolbar toolbar toolbarbuttonspush label Four label Five label Six If you are absolutely certain that your buttons will fit in all supported languages you can disable this behavior with the uncompact method tsuigetmytoolbaruncompact tsuigetmytoolbaruncompact Heres an overview of the inline ToolBar component windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"TopBar","href":"components/bars/topbar.html","content":"TopBar Provides tabs for navigation and buttons for contextual actions Beware that this API will be replaced be the tsuiHeader in a future release If you plan to make use of the TopBar we suggest that you give it a descriptive title tsuiTopBartitleMy App tsuiTopBartitleMy App because even when the title is hidden by the tabs like on this page it will become visible when you resize to mobile breakpoint The title also functions to show the TopBar on page load so that it doesnt suddenly appear when you add buttons later TopBartabs We can initialize the TopBar tabs with the the tabs method tsuiTopBartabs label Overview label TopBar label TabBar label ToolBar label StatusBar but since the page already has tabs we will instead append a new tab to the existing collection If you omit the argument youll get the current tabs jQuery style var tabs tsuiTopBartabs tabspush label Bonus Tab onselect function var text thislabel selected tsuiNotificationsuccesstext var tabs tsuiTopBartabs tabspush label Bonus Tab onselect function var text thislabel selected tsuiNotificationsuccesstext You can use array methods like push pop shift unshift splice and so on to manage tabs just note that the tabs length is a readonly property Also note that tabs dont do anything by default so what happens at onselect is completely up to you Updating tabs We can at any time change what happens when a tab gets selected We can also change the tab label if we like although maybe this would be confusing for the user var tabs tsuiTopBartabs tabs4label Choose Me tabs4onselect function thislabel Thanks var tabs tsuiTopBartabs tabs4label Choose Me tabs4onselect function thislabel Thanks Selecting tabs We can programatically select a tab using one of these approaches tsuiTopBartabs4select tsuiTopBartabsselectedIndex 1 Querying tabs This will all become a lot easier if we give all the tabs an id and use tabsget var tabs tsuiTopBartabs tabssplice4 0 label Example Tab id exampletab tabsgetexampletabselect var tabs tsuiTopBartabs tabssplice4 0 label Example Tab id exampletab tabsgetexampletabselect Tabs icons You can add a tab with an icon if somehow that tab is special tsuiTopBartabspush label Icon Tab icon tsicontodo tsuiTopBartabspush label Icon Tab icon tsicontodo Tab counters You can add a counter to the tabs for whatever reason you like tsuiTopBartabsforEachfunctiontab tabcounter MathceilMathrandom 10 tsuiTopBartabsforEachfunctiontab tabcounter MathceilMathrandom 10 When the counter reaches zero it disappears tsuiTopBartabsforEachfunctiontab tabcounter tsuiTopBartabsforEachfunctiontab tabcounter Closeable tabs You can create closeable tabs but note that the tab must be selected before it can be closed You can return false in the onclose method to prevent the tab from closing if this would otherwise cause data loss tsuiTopBartabspush label Closeable Tab closeable true selected true onclose function tsuiNotificationsuccessthislabel closed tsuiTopBartabspush label Closeable Tab closeable true selected true onclose function tsuiNotificationsuccessthislabel closed NewTab button You can allow the user to create new tabs via a special button as seen in popular browsers Note that the button just triggers a callback and that the new tab must be created manually In the example below the selected property also selects the tab var tabs tsuiTopBartabs tabsshowNewfunction onclick tabspush label My New Tab selected true var tabs tsuiTopBartabs tabsshowNewfunction onclick tabspush label My New Tab selected true If you regret this later on you can also hide the button tsuiTopBartabshideNew tsuiTopBartabshideNew Heres a summary of the tabs collection and tab model TopBarbuttons Add buttons to the TopBar with the buttons method This both sets and gets If you omit the argument youll get the current buttons jQuery style tsuiTopBarbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two tsuiTopBarbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two You can use array methods like push pop shift unshift splice reverse and so on to manage buttons Just note that the buttons length is readonly The buttons type property works like the CSS class for a regular Button The TopBar will automatically sort all buttons from primary to tertiary If theres more than one tertiary button these will be pushed to an Aside In the mobile breakpoint all the buttons will be pushed to an Aside Buttons wont actually do anything unless you define the onclick method tsuiTopBarbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks tsuiTopBarbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks Fortunately you can always change what happens when a button gets clicked tsuiTopBarbuttonsforEachfunctionbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel tsuiTopBarbuttonsforEachfunctionbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel Query buttons You can locate buttons by index in the buttons collection But since this isnt likely to match the order in which they appear on screen its easier to give the buttons an id and find them using buttonsget var buttons tsuiTopBarbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary var buttons tsuiTopBarbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary Hide buttons You can hide and show buttons You can also toggle visible tsuiTopBarbuttonsforEachfunctionbutton ifbuttonvisible buttonhide else buttonshow tsuiTopBarbuttonsforEachfunctionbutton ifbuttonvisible buttonhide else buttonshow Disable buttons You can disable and enable buttons You can also toggle disabled tsuiTopBarbuttonsforEachfunctionbutton ifbuttondisabled buttonenable else buttondisable tsuiTopBarbuttonsforEachfunctionbutton ifbuttondisabled buttonenable else buttondisable Busy buttons We can display a temporary progress indicator with the busy and done methods var button tsuiTopBarbuttons0 buttonbusy setTimeoutfunction buttondone 1000 var button tsuiTopBarbuttons0 buttonbusy setTimeoutfunction buttondone 1000 The busy method supports an optional status message var button tsuiTopBarbuttons0 buttonbusyMaking progress setTimeoutfunction buttondone 1000 var button tsuiTopBarbuttons0 buttonbusyMaking progress setTimeoutfunction buttondone 1000 Button groups You can also group buttons in arrays to create button groups that look like this tsuiTopBarbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger tsuiTopBarbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger You can of course also create grouped buttons with icons instead of text var group tsuiTopBarbuttons2 grouppush icon tsiconother type tssecondary var group tsuiTopBarbuttons2 grouppush icon tsiconother type tssecondary Heres a summary of the buttons collection and button model TopBar Back Forward The TopBar features both Back and Forward buttons for use in drill down scenarios tsuiTopBarshowBackfunction consolelogBack showNextfunction consolelogNext tsuiTopBarshowBackfunction consolelogBack showNextfunction consolelogNext You can also hide the Back and Forward buttons Since the buttons obscure the tabs you might actually like to do that now tsuiTopBarhideBackhideNext tsuiTopBarhideBackhideNext Note that tabbed navigation is not supposed to coexist with Back and Forward buttons Hide show the TopBar You can hide the TopBar but not in mobile breakpoint see below Note that this operation will clear the contents of the TopBar tsuiTopBarhide tsuiTopBarhide You can also show it again Because the content was cleared well also restore it tsuiTopBarshow restoreTopBar tsuiTopBarshow restoreTopBar When you resize the window to mobile breakpoint the hidden TopBar will be shown again automatically Thats because the TopBar is used to access the main navigation Without the TopBar you would be stuck in the app forever But since you chose to hide the TopBar we can assume that the content of the TopBar is not relevant Therefore Since we dont want to show an outdated TopBar to mobile users the content of the TopBar will be cleared when you hide it To restore the old content you will simply have to populate the TopBar again If you dont want your app to feature a TopBar under any circumstance you can simply remove the whole from the HTML TopBar summary Heres a summary of the TopBar methods including some bonus not yet discussed If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Boards","href":"components/boards/index.html","content":"Boards The Board is simply a box that features buttons and tabs The Board component must be created with a child component Panel The Board looks like this The Board looks like this This gives you a box with a dropshadow but there are ways to make it more interesting The Board looks like this To start with we can give the Board a title tsuigetboard board boardtitleMy Board tsuigetboard board boardtitleMy Board Buttons Add buttons to the Board with the buttons method This works exactly like it does in the Header API so please refer to that section for details on setup and usage tsuigetboard board boardbuttons label One label Two label Three onclick tsuiNotificationsuccessClicked tsuigetboard board boardbuttons label One label Two label Three onclick tsuiNotificationsuccessClicked Because these buttons are all tertiary we will collect them inside a menu If you specifically dont want this behavior you can disable it with the uncompact method tsuigetboard board boarduncompact tsuigetboard board boarduncompact Heres a summary of the buttons collection and button model Tabs The Board can also be setup with tabs to make a switchboard There are two ways to go about this depending on your prefered workflow One is to declare the tabpanels directly in the markup via multiple Panel components Notice that they must be placed inside a containing Panels component for this to work Also note that the individual Panel components must specify a label The tabs will be rendered like this One Two Three The other approach is to render the tabs programatically via the tabs method This works exactly like it does in the Header API so please refer to that section for details on setup and usage Lets add some tabs to the current collection tsuigettabboard board boardtabspush label Four label Five label Six onselect tsuiNotificationsuccessSelected tsuigettabboard board boardtabspush label Four label Five label Six onselect tsuiNotificationsuccessSelected Rembember that programatically generated tabs dont do anything by default What happens in the onselect callback is completely up to you Heres a summary of the tabs collection and tab model TabPanel One TabPanel Two windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Buttons","href":"components/buttons/buttons.html","content":"Buttons Group buttons in menus to unlock advanced layout options Assign datatsButtons attribute to a menu to initialize it as a Buttons menu Button One Button Two Button One Button Two Button One Button Two When in menus buttons stack vertically and stretch to fill the width You can omit the tsbutton attribute on buttons it is implied You can also omit the tstertiary classname on the buttons it is assumed by default Button layouts The menu can be assigned a classname to layout the buttons horizontally Accept Reject Accept Reject Accept Reject The classname tstt indicates that two buttons should both display text instead of icons If you add both the layout will take care of hiding one or the other A special classname tsjoin has been added to join the buttons together We support the following permutations This implementation is likely to be refactored for more flexibility so the following list of classnames may become deprecated in the future edbmldeclareedbmlklDUi2asfunction edbml use strict var out edbmlout txt edbmlsafetext val edbmlsafeattr tstt tsit tsti tsiit tsiti tstii mapfunctionc rendermenuc return c forEachfunctionc rendermenuc tsjoin function rendermenuc1 c2 var cname c1 c2 outhtml c1substringtslength split forEachfunction outhtml txtcname outhtml return outwrite The classname shown on buttons should in all cases go on the menu element and not on the button elements If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"Button Gallery","href":"components/buttons/gallery.html","content":"Button Gallery article maxwidth 100 minwidth 0 table td padding 10px verticalalign middle whitespace nowrap tsdoxtabs Default no classname tsprimary tssecondary tstertiary tsaccept tswarning tsdanger Enabled Action Intent Action Intent Action Intent Action Intent Action Intent Action Intent Action Intent Disabled Action Intent Action Intent Action Intent Action Intent Action Intent Action Intent Action Intent windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"Button","href":"components/buttons/index.html","content":"Button Use button classnames to prioritize the possible actions in your app Assign datatsButton to a button or an a to initialize it as a Button Default Button Default Button Default Button The default button looks like a link but some CSS classnames can be added to make it look more like a button Primary Secondary Tertiary Primary Secondary Tertiary Primary Secondary Tertiary Button icons Icons go into a separate i element You can see a list of all icons Button Text Button Text Button Text Youll notice in the code snippet that the span has been set to displaynone Buttons should never show both text and icon at the same time If you need both its up to you to hide one or the other In this example the button has been rigged up to show the icon only in the mobile breakpoint Hidden In Mobile Hidden In Mobile Hidden In Mobile Button spinner Assign the datatsbusy attribute to a button to initialize a spinner Primary Primary show spinner Micro Button You can add class tsmicro to get a micro button Primary Secondary Tertiary Primary Secondary Tertiary Primary Secondary Tertiary You can group buttons in menus to unlock advanced layout options If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"components/buttons/tabs.html","content":""},null,null,null,null,null,{"title":"CompanyCard","href":"components/cards/companycard.html","content":"CompanyCard tsdoxtabs CompanyCard In this first iteration the CompanyCard is simply a HTML rendering that you can feed with JSON in various ways You can initialize a CompanyCard with the attribute datatsCompanyCard Even without any data the card takes on a cardlike appearance If you are using Angular or jQuery you might like to feed the card through a JavaScript API as we will see you can however also embed the data directly in the markup Embedded JSON Serverside devs and UX designers might like to embed the JSON in the HTML Because this is JSON you should use double quotes and omit trailing commas id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Tradeshift logo assetslogopng size 100249 location San Francisco California industry Software IT connection 2 id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Tradeshift logo assetslogopng size 100249 location San Francisco California industry Software IT connection 2 id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Tradeshift logo assetslogopng size 100249 location San Francisco California industry Software IT connection 2 Encoded JSON You can also embed the JSON in an attribute datatsrender The JSON string must be encoded in the format returned by method encodeURIComponentjson Remember to trim the JSON string before you encode it Render programatically You can grab a hold of the card and instruct it to render some JSON data tsuigetmycard card cardrender id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Tradeshift logo assetslogopng size 100249 location San Francisco California industry Software IT connection 2 tsuigetmycard card cardrender id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Tradeshift logo assetslogopng size 100249 location San Francisco California industry Software IT connection 2 We notice that the connection status is indicated by a number The number matches an index in the following array which declares the label and icon tsuiCompanyCardconnectionTypes Your company tsiconnetwork Request sent tsiconnetwork Connected tsiconnetwork Registration in progress tsiconnetwork In your Google Contacts tsiconnetwork Via email only tsiconnetwork This array is crowdsourced You can modify the array in your app simply by copypasting the code above into your initialization script You can also use numbers instead of strings to indicate size and industry cardrender id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Tradeshift size 3 industry 6 If you provide a number instead of a string well look it up in these lists tsuiCompanyCardcompanySizes 1 110 1100 100249 250500 5001000 tsuiCompanyCardindustryTypes Airline Corporation Educational Organization Government Organization Local Business NGO Software IT Performing Group Sports Team You are also welcome to overwrite these arrays in your app Thats it for now windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"CompanyCard extras","href":"components/cards/extras.html","content":"CompanyCard extras These are considered experimental features You can feed data to your cards without poking around in the DOM In your HTML you must declare your cards with a datatsid attribute assigned You can now or even before import the JSON from a demo file and instruct the cards to render getJSONassetscardsjson functionjson tsuiCompanyCardrenderjson The details view The card should eventually be able to render its own details view so that it looks the same outside of V4 Theres a lot of infrastructure that needs to happen first not least with translations in the Runtime but it could look like this tsuigetmycardopen tsuigetmycardopen If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"components/cards/tabs.html","content":""},{"title":"UserCard","href":"components/cards/usercard.html","content":"UserCard figure output textalign center tsdoxtabs UserCard In this first iteration the UserCard can simply show some user details in an Aside The properties are all optional but you should at least include the name tsuiUserCard id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Wired Earp image assetswiredearppng title EDB Programmer role Gentleman Spy email jmotradeshiftcom company Tradeshift companyUrl httptradeshiftcom open tsuiUserCard id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Wired Earp image assetswiredearppng title EDB Programmer role Gentleman Spy email jmotradeshiftcom company Tradeshift companyUrl httptradeshiftcom open windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"DatePicker","href":"components/datepicker/index.html","content":"DatePicker Calendar widget that appears in Aside Used in Forms for an implementation of elements The DatePicker can be launched with a JavaScript API You should implement the onselect method to get notified whenever the user picks a date Note that you must manually open and close the DatePicker var datePicker tsuiDatePicker title Your Birthday value 19730326 onselect functionnewval oldval tsuiNotificationsuccessthisvalue thisclose onclosed function thisdispose datePickeropen var datePicker tsuiDatePicker title Your Birthday value 19730326 onselect functionnewval oldval tsuiNotificationsuccessthisvalue thisclose onclosed function thisdispose datePickeropen You can specify a min and max value tsuiDatePicker title Your Birthday value 19840523 min 19840101 max 19851224 onselect function thisclose onclosed function thisdispose open tsuiDatePicker title Your Birthday value 19840523 min 19840101 max 19851224 onselect function thisclose onclosed function thisdispose open You can also use the onrendercell callback to manually adjust which cells are selectable as well add in additional classes per cell for styling purposes tsuiDatePicker title Manually Set Clickable Dates value 19840523 min 19840101 max 19851224 onrendercell functioncell var jsDate new Datecellyear cellmonth cellday var isWeekday 06includesjsDategetDay cellselectable isWeekday cellclassName isWeekday weekday weekend onselect function tsuiNotificationsuccessthisvalue thisclose onclosed function thisdispose open tsuiDatePicker title Manually Set Clickable Dates value 19840523 min 19840101 max 19851224 onrendercell functioncell var jsDate new Datecellyear cellmonth cellday var isWeekday 06includesjsDategetDay cellselectable isWeekday cellclassName isWeekday weekday weekend onselect function tsuiNotificationsuccessthisvalue thisclose onclosed function thisdispose open Here is an example DatePicker where a value is NOT set ahead of time tsuiDatePicker title Date Range with no starting value value null min 20190101 max 20190331 onselect function tsuiNotificationsuccessthisvalue thisclose onclosed function thisdispose open tsuiDatePicker title Date Range with no starting value value null min 20190101 max 20190331 onselect function tsuiNotificationsuccessthisvalue thisclose onclosed function thisdispose open You can set and change a note for the datepicker tsuiDatePicker title The note is under the header value 20190101 note Have a nice day onselect function thisclose onclosed function thisdispose open tsuiDatePicker title The note is under the header value 20190101 note Have a nice day onselect function thisclose onclosed function thisdispose open You can also make a deselect datepicker tsuiDatePicker title Deselect the date value 20190101 deselectable true onselect function tsuiNotificationsuccessYou deselected the date thisclose onclosed function thisdispose open tsuiDatePicker title Deselect the date value 20190101 deselectable true onselect function tsuiNotificationsuccessYou deselected the date thisclose onclosed function thisdispose open The object argument configures a tsuiDatePickerModel as outlined below If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Dialog","href":"components/dialogs/index.html","content":"Dialog The Dialog API can be used to ask simple questions much like the JavaScript confirm method You can launch a Dialog with methods to handle OK and Cancel tsuiDialogconfirmWill you try onaccept function tsuiNotificationsuccessGood luck oncancel function tsuiNotificationsuccessCome back later tsuiDialogconfirmWill you try onaccept function tsuiNotificationsuccessGood luck oncancel function tsuiNotificationsuccessCome back later You are encouraged to specify the text of the OK button The button should attempt to indicate what happens when you press it tsuiDialogconfirmShow the Notification Show It onaccept function tsuiNotificationsuccessGood choice tsuiDialogconfirmShow the Notification Show It onaccept function tsuiNotificationsuccessGood choice You can add a third string argument to specify the Cancel text Buttons setup Dialog buttons are secondary blue by default but you can choose to make the accept or cancel button primary You can also tweak the default focus tsuiDialogconfirmSign up for Tradeshift Join Now primary accept focused accept tsuiDialogconfirmSign up for Tradeshift Join Now primary accept focused accept You can change the label of both the primary and secondary buttons tsuiDialogconfirmSign up for Tradeshift Join Now Not Now primary accept focused accept tsuiDialogconfirmSign up for Tradeshift Join Now Not Now primary accept focused accept If you need more buttons for different actions then you can add the actions option tsuiDialogdangerAre you sure you want to delete the document Delete document primary accept actions label Archive Document onclick function tsuiNotificationinfoYou archive the document tsuiDialogdangerAre you sure you want to delete the document Delete document primary accept actions label Archive Document onclick function tsuiNotificationinfoYou archive the document Warning dialogs You can launch special dialogs to confirm choices of more dire consequence tsuiDialogwarningThis will delete the thing Delete It onaccept function tsuiDialogdanger Are you absolutely sure you want to permanently delete the whole thing Delete It tsuiDialogwarningThis will delete the thing Delete It onaccept function tsuiDialogdanger Are you absolutely sure you want to permanently delete the whole thing Delete It Dialog icons You can point the icon property to an alternative icon class but you should stick to the stock icons whenever possible so that the user can easily recognize the dialog type tsuiDialogconfirmProceed to Checkout Check Out icon tsiconcart primary accept focused accept tsuiDialogconfirmProceed to Checkout Check Out icon tsiconcart primary accept focused accept If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Footer Actions","href":"components/footer/actions.html","content":"Footer actions Footer actions can be used to manipulate selected objects of any kind They appear in a separate toolbar so that they never conflict with the normal buttons This toolbar can also be configured with a status message and this checkbox The actions method both sets and gets the actions If you omit the argument youll get the current actions jQuery style In real life the actions should only appear whenever the user has selected something with the mouse or keyboard so we will just have to pretend that something is selected tsuiFooteractions label Move Up icon tsicontriangleup label Move Down icon tsicontriangledown label Move Left icon tsicontriangleleft label Move Right icon tsicontriangleright label Dont Move icon tsiconhalt onclick tsuiFooteractionsclear tsuiFooteractions label Move Up icon tsicontriangleup label Move Down icon tsicontriangledown label Move Left icon tsicontriangleleft label Move Right icon tsicontriangleright label Dont Move icon tsiconhalt onclick tsuiFooteractionsclear You can use array methods like push pop shift unshift splice and so on to manage actions just note that the actions length is a readonly property To ensure consistency actions should always have both an icon and a label much unlike the buttons Hide actions You can hide and show actions You can also toggle visible tsuiFooteractionsforEachfunctionaction ifactionvisible actionhide else actionshow tsuiFooteractionsforEachfunctionaction ifactionvisible actionhide else actionshow Disable actions You can disable and enable action You can also toggle disabled tsuiFooteractionsforEachfunctionaction ifactiondisabled actionenable else actiondisable tsuiFooteractionsforEachfunctionaction ifactiondisabled actionenable else actiondisable Busy actions We can display a temporary progress indicator with the busy and done methods var action tsuiFooteractions0 actionbusy setTimeoutfunction actiondone 1000 var action tsuiFooteractions0 actionbusy setTimeoutfunction actiondone 1000 The busy method supports an optional message var action tsuiFooteractions0 actionbusyMaking progress setTimeoutfunction actiondone 1000 var action tsuiFooteractions0 actionbusyMaking progress setTimeoutfunction actiondone 1000 Heres a summary of the actions collection and action model Action bar We can hide or show action bar Before the operations you must init the actionbar first tsuiFooteractions label Move Up icon tsicontriangleup label Move Down icon tsicontriangledown label Move Left icon tsicontriangleleft label Move Right icon tsicontriangleright label Dont Move icon tsiconhalt tsuiFooteractions label Move Up icon tsicontriangleup label Move Down icon tsicontriangledown label Move Left icon tsicontriangleleft label Move Right icon tsicontriangleright label Dont Move icon tsiconhalt tsuiFooterhideActions tsuiFooterhideActions tsuiFootershowActions tsuiFootershowActions Status message We can configure the actionbar with a status message When a selection is made the massage could be something like 23 products selected When nothing is selected it could perhaps be something like Showing 1020 out of 123 products tsuiFooterstatus23 of one million products selected tsuiFooterstatus23 of one million products selected If you call linkable you can also some links in the message Beware of phishing tsuiStatusBarlinkablemessage Please visit Tradeshifthttpwwwtradeshiftcom tsuiStatusBarlinkablemessage Please visit Tradeshifthttpwwwtradeshiftcom You can pass a callback function to be invoked whenever a link is clicked tsuiStatusBarlinkablefunction onclickurl tsuiNotificationsuccessurl thisstatusThanks messagePlease click the linkThe URL can be any string tsuiStatusBarlinkablefunction onclickurl tsuiNotificationsuccessurl thisstatusThanks messagePlease click the linkThe URL can be any string Checkbox Theres also a checkbox which conceptually can be used to manage selections This is the minimum viable implementation tsuiFootercheckbox onclick function thischecked thischecked tsuiFootercheckbox onclick function thischecked thischecked You must manually toggle the checked property This will give you a chance to let the user confirm if he really intends to select millions of products or if he really wants to clear a selection that took him hours to complete Here is the CheckBoxModel Use the indeterminate property if state that is neither checked nor unchecked Its a inbetween state that can be used show a partial selection and to check all selections var i 0 tsuiFootercheckbox onclick function switch i 3 case 0 unchecked thischecked false tsuiFooterstatus0 of 3 items selected break case 1 indeterminate overrides checked thischecked true thisindeterminate true tsuiFooterstatus1 of 3 items selected break case 2 checked thisindeterminate false tsuiFooterstatus3 of 3 items selected break status0 of 3 items selected var i 0 tsuiFootercheckbox onclick function switch i 3 case 0 unchecked thischecked false tsuiFooterstatus0 of 3 items selected break case 1 indeterminate overrides checked thischecked true thisindeterminate true tsuiFooterstatus1 of 3 items selected break case 2 checked thisindeterminate false tsuiFooterstatus3 of 3 items selected break status0 of 3 items selected The example above shows that the indeterminate property will take precedence over the checked property If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Footer Buttons","href":"components/footer/buttons.html","content":"Footer buttons Add buttons to the Footer with the buttons method This both sets and gets If you omit the argument youll get the current buttons jQuery style tsuiFooterbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two tsuiFooterbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two You can use array methods like push pop shift unshift splice reverse and so on to manage buttons Just note that the buttons length is readonly The buttons type property works like the CSS class for a regular Button The Footer will automatically sort all buttons from primary to tertiary If theres more than one tertiary button these will be pushed to an Aside In the mobile breakpoint all the buttons will be pushed to an Aside Buttons wont actually do anything unless you define the onclick method tsuiFooterbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks tsuiFooterbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks Fortunately you can always change what happens when a button gets clicked tsuiFooterbuttonsforEachfunctionbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel tsuiFooterbuttonsforEachfunctionbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel Query buttons You can locate buttons by index in the buttons collection But since this isnt likely to match the order in which they appear on screen its easier to give the buttons an id and find them using buttonsget var buttons tsuiFooterbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary var buttons tsuiFooterbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary Hide buttons You can hide and show buttons You can also toggle visible tsuiFooterbuttonsforEachfunctionbutton ifbuttonvisible buttonhide else buttonshow tsuiFooterbuttonsforEachfunctionbutton ifbuttonvisible buttonhide else buttonshow Disable buttons You can disable and enable buttons You can also toggle disabled tsuiFooterbuttonsforEachfunctionbutton ifbuttondisabled buttonenable else buttondisable tsuiFooterbuttonsforEachfunctionbutton ifbuttondisabled buttonenable else buttondisable Busy buttons We can display a temporary progress indicator with the busy and done methods var button tsuiFooterbuttons0 buttonbusy setTimeoutfunction buttondone 1000 var button tsuiFooterbuttons0 buttonbusy setTimeoutfunction buttondone 1000 The busy method supports an optional status message var button tsuiFooterbuttons0 buttonbusyMaking progress setTimeoutfunction buttondone 1000 var button tsuiFooterbuttons0 buttonbusyMaking progress setTimeoutfunction buttondone 1000 Button groups You can also group buttons in arrays to create button groups that look like this tsuiFooterbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger tsuiFooterbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger You can of course also create grouped buttons with icons instead of text var group tsuiFooterbuttons2 grouppush icon tsiconother type tssecondary var group tsuiFooterbuttons2 grouppush icon tsiconother type tssecondary Heres a summary of the buttons collection and button model If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Footer Collaboration","href":"components/footer/collabbutton.html","content":"Footer collabbutton The Footer features a special button which is dedicated to launching the collaboration panel To show the button simply call the method configbutton with a callback tsuiFootercollabbuttonfunction onclick tsuiNotificationsuccessGo collaborate tsuiFootercollabbuttonfunction onclick tsuiNotificationsuccessGo collaborate Showing a notification badge The collaboration button can have two states a default state and a state showing a notification badge The default state shows just the special button The notification state shows the special button as well as a small notification badge over the icon To show the button with the notification state add true as a second argument to the configbutton method tsuiFootercollabbuttonfunction onclick tsuiNotificationsuccessGo collaborate true tsuiFootercollabbuttonfunction onclick tsuiNotificationsuccessGo collaborate true Note that the Footer doesnt automatically initialize or resume the collbaroration The API for this will be provided elsewhere You can hide the collaboration button by passing null to the same method tsuiFootercollabbuttonnull tsuiFootercollabbuttonnull If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Footer Configuration","href":"components/footer/configbutton.html","content":"Footer configbutton There Footer can be fitted with a special button for the purpose of configuring things To show the button simply call the method configbutton with a callback tsuiFooterconfigbuttonfunction onclick tsuiNotificationsuccessGo configure tsuiFooterconfigbuttonfunction onclick tsuiNotificationsuccessGo configure What happens when you click the button is completely up to you Fortunately you can also hide the button again by passing null to the same method tsuiFooterconfigbuttonnull tsuiFooterconfigbuttonnull If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Footer Gallery","href":"components/footer/gallery.html","content":"Footer gallery Here you can test how the Footer behaves when you enable all the features 1 Add a pager tsuiFooterpager pages 23 page 0 onselect functionindex consolelogindex tsuiFooterpager pages 23 page 0 onselect functionindex consolelogindex 2 Add some buttons tsuiFooterbuttons label Button 1 type tsprimary label Button 2 type tssecondary label Button 3 label Button 4 label Button 5 tsuiFooterbuttons label Button 1 type tsprimary label Button 2 type tssecondary label Button 3 label Button 4 label Button 5 3 Add more buttons until they crash into the Pager Behold the second toolbar tsuiFooterbuttonssplice2 0 label Bonus Button type tssecondary tsuiFooterbuttonssplice2 0 label Bonus Button type tssecondary 4 The actions will appear in yet another toolbar Thats right tsuiFooteractions label Move Up icon tsicontriangleup label Move Down icon tsicontriangledown label Move Left icon tsicontriangleleft label Move Right icon tsicontriangleright label Dont Move icon tsiconhalt statusSomething is selectedcheckbox onclick function thischecked thischecked tsuiFooteractions label Move Up icon tsicontriangleup label Move Down icon tsicontriangledown label Move Left icon tsicontriangleleft label Move Right icon tsicontriangleright label Dont Move icon tsiconhalt statusSomething is selectedcheckbox onclick function thischecked thischecked 5 Finally add the configuration and collaboration buttons tsuiFooterconfigbuttonfunction onclick tsuiNotificationsuccessGo configure collabbuttonfunction onclick tsuiNotificationsuccessGo collaborate tsuiFooterconfigbuttonfunction onclick tsuiNotificationsuccessGo configure collabbuttonfunction onclick tsuiNotificationsuccessGo collaborate With the Footer fully equipped we can try to hide and destroy these things again Hide something or everything If you need to temporarily hide a single Footer member you can call the associated method without any arguments to get a hold of the thing and then call the hide and show methods You can also toggle the visible property var thing pause action setTimeoutaction 500 function togglethings ifthingslength ifthing thingsshift thinghide pause thingshow pause togglethings else togglethings tsuiFooterbuttons tsuiFooteractions tsuiFooterpager tsuiFootercheckbox tsuiFootercollabbutton tsuiFooterconfigbutton var thing pause action setTimeoutaction 500 function togglethings ifthingslength ifthing thingsshift thinghide pause thingshow pause togglethings else togglethings tsuiFooterbuttons tsuiFooteractions tsuiFooterpager tsuiFootercheckbox tsuiFootercollabbutton tsuiFooterconfigbutton Remember that the hidden thing remains hidden until you show it again You can of course also show and hide the whole Footer Again note that it will remain hidden tsuiFooterhide setTimeout tsuiFootershow 500 tsuiFooterhide setTimeout tsuiFootershow 500 Clear something or everything If you are sure that you wont need to show a configured Footer member again at some point in the future it is advised that you completely destroy it instead of just hide it You can do this by passing null to the associated method function destructiveactions actionsshift ifactionslength setTimeout destructiveactions 500 tsuiFooterpagernull tsuiFooterstatusnull tsuiFootercheckboxnull tsuiFooterbuttonsnull tsuiFooteractionsnull tsuiFootercollabbuttonnull tsuiFooterconfigbuttonnull function destructiveactions actionsshift ifactionslength setTimeout destructiveactions 500 tsuiFooterpagernull tsuiFooterstatusnull tsuiFootercheckboxnull tsuiFooterbuttonsnull tsuiFooteractionsnull tsuiFootercollabbuttonnull tsuiFooterconfigbuttonnull You can of course also just clear everything and the Footer will automatically hide tsuiFooterclear tsuiFooterclear If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Footer","href":"components/footer/index.html","content":"Footer The Footer appears near the bottom of the page where it is commonly used to display some buttons All features are controlled with an API that looks like this tsuiFooterbuttons label Continue type tsprimary onclick function toplocationhash componentsfooterbuttonshtml tsuiFooterbuttons label Continue type tsprimary onclick function toplocationhash componentsfooterbuttonshtml Heres a quick overview of the Footer API You can read more in the following pages If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Footer Pager","href":"components/footer/pager.html","content":"Footer pager The Footer features a Pager The pager method both sets and gets the Pager If you omit the argument youll get the current Pager jQuery style You can pass null to the method to destroy the Pager once you are done with it tsuiFooterpager pages 23 page 0 onselect functionindex consolelogindex tsuiFooterpager pages 23 page 0 onselect functionindex consolelogindex If you need to update the index later on for example to support history navigation it is recommended that you change the page property of the existing Pager instead of initializing a whole new Pager You can just call the same method without arguments tsuiFooterpagerpage 23 If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"components/footer/tabs.html","content":""},null,{"title":"Form Autocomplete","href":"components/forms/autocomplete.html","content":"Form Autocomplete tsdoxtabs Autocomplete You can have an input field suggest results to the user and can be navigated using the keyboard or the mouse Basic Usage Loading the autocomplete data from a static array tsuigetmystaticautocomplete autocomplete autocompletedata key 0 value zero key 1 value one key 2 value two key 3 value three key 4 value four key 5 value five key 6 value six key 7 value seven key 8 value eight key 9 value nine tsuigetmystaticautocomplete autocomplete autocompletedata key 0 value zero key 1 value one key 2 value two key 3 value three key 4 value four key 5 value five key 6 value six key 7 value seven key 8 value eight key 9 value nine Autocomplete from array External Data Loading all results from an external JSON endpoint but using the built in filtering tsuigetmyadvancedautocomplete autocomplete getJSONassetsautocompletejson functionjson autocompletedatajson tsuigetmyadvancedautocomplete autocomplete getJSONassetsautocompletejson functionjson autocompletedatajson Autocomplete from JSON Advanced Usage Its possible to override the filtering functionality to supply the user with any data youd like tsuigetmyfancyautocomplete autocomplete autocompleteonfilterfunctionfilter var output for var i parseIntMathrandom 10 1 10 i 0 i outputpush key i value MathrandomtoString36substr2 5 return output tsuigetmyfancyautocomplete autocomplete autocompleteonfilterfunctionfilter var output for var i parseIntMathrandom 10 1 10 i 0 i outputpush key i value MathrandomtoString36substr2 5 return output Autocomplete with custom results Overriding onselect onselect can be overridden to run your own code when an element is selected either with the keyboard or the mouse tsuigetmyspecialautocomplete autocomplete autocompletedata key 0 value zero key 1 value one autocompleteonselectfunctionitem tsuiNotificationsuccess itemvalue selected return itemvalue tsuigetmyspecialautocomplete autocomplete autocompletedata key 0 value zero key 1 value one autocompleteonselectfunctionitem tsuiNotificationsuccess itemvalue selected return itemvalue Autocomplete with special onselect windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Custom Select","href":"components/forms/custom-select.html","content":"Custom Select tsuireadyfunction tsuigetmyAside functionaside mySelectclickfunction asideopen tsusermenu buttonclickfunctione tsiconcheckedremove tsusermenu liremoveClasstschecked var name ecurrentTargetdatauser ecurrentTarget parentli addClasstschecked ecurrentTargetappend mySelectvalname tsuiNotificationsuccessname asideclose usercontainer div margin 10px cursor pointer tsdoxtabs Custom Select You can handle the onclick event on a select element to make a custom implementation Heres a step by step guide to make your own User Selector 1 Create the select with datatscustomtrue Select Jim Bob Johnson Karl Benson Marshall Garrett Select Jim Bob Johnson Karl Benson Marshall Garrett 2 Make the select open your own custom Aside when clicked mySelectclickfunction tsuigetmyAside aside asideopen mySelectclickfunction tsuigetmyAside aside asideopen 3 Create the Aside with options to match your select Jim Bob Johnson jimbobcompanycom Karl Benson karlcompanycom Marshall Garrett marshallcompanycom Jim Bob Johnson jimbobcompanycom Karl Benson karlcompanycom Marshall Garrett marshallcompanycom 4 Update the select whenever something is clicked in the Aside tsusermenu buttonclickfunctione tsiconcheckedremove tsusermenu liremoveClasstschecked var name ecurrentTargetdatauser ecurrentTargetparentliaddClasstschecked ecurrentTargetappend mySelectvalname tsuiNotificationsuccessname asideclose tsusermenu buttonclickfunctione tsiconcheckedremove tsusermenu liremoveClasstschecked var name ecurrentTargetdatauser ecurrentTargetparentliaddClasstschecked ecurrentTargetappend mySelectvalname tsuiNotificationsuccessname asideclose Click the select below to check how it works Good luck Select Jim Bob Johnson Karl Benson Marshall Garrett Jim Bob Johnson jimbobcompanycom Karl Benson karlcompanycom Marshall Garrett marshallcompanycom windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Disabled &amp; Readonly Fields","href":"components/forms/disabled.html","content":"Disabled and readonly fields Form fields can be set to be disabled or readonly the same way you would in XHTML5 You can set datatspreview attribute to preview whole form input typetext disabled Disabled Text Disabled Text Disabled Text input typetext readonly Readonly Text Readonly Text Readonly Text textarea disabled Disabled Textarea Fatback kevin picanha pork loin kielbasa turducken doner Beef ribs tongue ham ball tip hamburger pork loin biltong sausage salami sirloin tenderloin kevin shank pig meatloaf Disabled Textarea Fatback kevin picanha pork loin kielbasa turducken doner Beef ribs tongue ham ball tip hamburger pork loin biltong sausage salami sirloin tenderloin kevin shank pig meatloaf Disabled Textarea Fatback kevin picanha pork loin kielbasa turducken doner Beef ribs tongue ham ball tip hamburger pork loin biltong sausage salami sirloin tenderloin kevin shank pig meatloaf date disabled Disabled Date Disabled Date Disabled Date select disabled Disabled Select One Two Three Four Five Disabled Select One Two Three Four Five Disabled Select One Two Three Four Five input typeradio disabled There is no choice Red pill Blue pill There is no choice Red pill Blue pill There is no choice Red pill Blue pill input typecheckbox disabled By browsing this page you agree to our terms I agree to something I agree to something by default By browsing this page you agree to our terms I agree to something I agree to something by default By browsing this page you agree to our terms I agree to something I agree to something by default input typecheckbox disabled alternate version Its not a bug its a feature Secret Feature Secret Feature On by default Its not a bug its a feature Secret Feature Secret Feature On by default Its not a bug its a feature Secret Feature Secret Feature On by default form datatspreviewtrue Preview Text Preview Text Preview Text If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Form Example","href":"components/forms/example.html","content":"Form Example function Controllerscope scopemodel poref invalid gln 1234567890123 windowangularmoduleapp controllerController scope Controller tsdoxtabs ErrorInfo example Here you can see an example on how to use the error and info helpers for form fields using Angular 1 as an example framework Text PO line item reference Error PO line item reference Must be 4 numeric digits in length Must be present on the related PO document GLN Optional Definition GLN A GLN Global Location Number is a globally unique 13 digit numeric identifier that is used to access data about a location More information about the GLN System Error GLN Must be 13 numeric digits in length Can only contain numbers Heres the source for the form above Text PO line item reference Error PO line item reference Must be 4 numeric digits in length Must be present on the related PO document GLN Optional Definition GLN A GLN Global Location Number is a globally unique 13 digit numeric identifier that is used to access data about a location More information about the GLN System Error GLN Must be 13 numeric digits in length Can only contain numbers Text PO line item reference Error PO line item reference Must be 4 numeric digits in length Must be present on the related PO document GLN Optional Definition GLN A GLN Global Location Number is a globally unique 13 digit numeric identifier that is used to access data about a location More information about the GLN System Error GLN Must be 13 numeric digits in length Can only contain numbers If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Form","href":"components/forms/index.html","content":"Form Provides styling and behavior for form controls and error messages Assign datatsForm to a form to initialize as a Form Form components depend on specific internal element structure in order to initialize and style their contents Most components adhere to this structure textarea Starts out with three lines but will expand up to ten as content is entered The rows attribute can be used to adjust the initial amount of lines to show Textarea Textarea Textarea You can specify typesubmit to make the texarea submit the form on ENTER In this mode newlines may still be entered while pressing the SHIFT key Press SHIFT to ENTER newlines Press SHIFT to ENTER newlines Press SHIFT to ENTER newlines input typetext Text Text Text input typetel Tel Tel Tel input typeemail Email Email Email input typenumber Set the class classtsright on the label to make your number text align right Number Number Number input typedate Date Date Date select The select will open in an Aside but youll mantain it like a normal select Note that the select only triggers a change event when the Aside is fully closed Set the attribute datatscustomtrue to handle your own select event Select One Two Three Select One Two Three Select One Two Three You can configure the select with a default placeholder in a twostep process Add the placeholder attribute to the select Leave the first option empty no option text Select with placeholder 5 23 Select with placeholder 5 23 Select with placeholder 5 23 When a selection is made the user can revert to the default no selection by clicking the selected option a second time If you dont want to allow this you should make sure to remove the empty option This strange pattern ensures maximum compatibility with Angular 1x where an empty option is automatically inserted until a selection is performed To also allow unselection in Angular you must manually create the empty option and make sure that it is explicitly selected as default select multiple The select multiple only triggers a change when the Done button is pressed You can customize the button label by adding a button to the label element but note that this only configures the text on the button eg no event listeners are fired Select multiple One Two Three Four Five Cool apply changes Select multiple One Two Three Four Five Cool apply changes Select multiple One Two Three Four Five Cool apply changes input typeradio Radio element Generally used to choose something Choose wisely Red pill Blue pill Choose wisely Red pill Blue pill Choose wisely Red pill Blue pill input typecheckbox Checkbox element Generally used to indicate consent on forms Legally Binding Contract I agree to something I agree to something by default Legally Binding Contract I agree to something I agree to something by default Legally Binding Contract I agree to something I agree to something by default input typetextbox alternate version We call it the switch Used mainly for toggling preferencessettings Note that switch differs from the checkbox only by the order of HTML elements Settings Page Secret Feature Secret Feature On by default Settings Page Secret Feature Secret Feature On by default Settings Page Secret Feature Secret Feature On by default Errors and info To mark a control as invalid simply add the class tserror to the label Text Text Text To display an error message one must mark the control as errored using the tserror class as well as add the error message markup to the page Text Text An explanation of the error in question Another explanation of the error in question Text Text An explanation of the error in question Another explanation of the error in question To display an info section use the tsinfo class Text Text An information about the field Another information about the field Text Text An information about the field Another information about the field If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Form Gallery","href":"components/forms/redesign.html","content":"Text Text with custom icon Text with no icon Textarea Textarea Select One Two Three Select with placeholder One Two Three Select multiple One Two Three Four Five Cool apply changes Date Radios Option One Option Two Checkbox I agree I dont agree Switch I agree I dont agree Text Text with custom icon Text with no icon Textarea Textarea Select One Two Three Select with placeholder One Two Three Select multiple One Two Three Four Five Cool apply changes Date Radios Option One Option Two Checkbox I agree I dont agree Switch I agree I dont agree Text Text with custom icon Text with no icon Textarea Textarea Select One Two Three Select with placeholder One Two Three Select multiple One Two Three Four Five Cool apply changes Date Note that readonly has no function on radio groups and checkboxes One can make a readonly field look normal with the tsnolock classname Text Text Multi Date Multi Textarea Multi Textarea More Multi Textarea Select Multi One Two Three Select Multi One Two Three Multiselect multi One Two Three Four Five Cool apply changes Multiselect multi One Two Three Four Five Cool apply changes Error Text An explanation of the error in question Another explanation of the error in question Info Text An information about the field Another information about the field Disabled info Text An information about the field Another information about the field Check out the Form in that Aside Open the Aside Text Textarea Textarea Select One Two Three Select multiple One Two Three Four Five Cool apply changes Date Radios Option One Option Two Checkbox I agree I dont agree Switch I agree I dont agree windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"components/forms/tabs.html","content":""},null,null,{"title":"Form","href":"components/forms/test-2.html","content":"JQuery Test Just testing some JQuery manipulation of the multiselect What you can see here is that using prop and attr both work for unselecting options but only prop works when selecting them Select multiple One Two Three Four Five Cool apply changes If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"","href":"components/header/_tabs.html","content":""},null,{"title":"Header Buttons","href":"components/header/buttons.html","content":"Add buttons to the TopBar with the buttons method This both sets and gets If you omit the argument youll get the current buttons jQuery style tsuiTopBarbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two tsuiTopBarbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two You can use array methods like push pop shift unshift splice reverse and so on to manage buttons Just note that the buttons length is readonly The buttons type property works like the CSS class for a regular Button The TopBar will automatically sort all buttons from primary to tertiary If theres more than one tertiary button these will be pushed to an Aside In the mobile breakpoint even secondary buttons will be pushed to the Aside Buttons wont actually do anything unless you define the onclick method tsuiTopBarbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks tsuiTopBarbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks Fortunately you can always change what happens when a button gets clicked tsuiTopBarbuttonsforEachbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel tsuiTopBarbuttonsforEachbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel Query buttons You can locate buttons by index in the buttons collection But since this isnt likely to match the order in which they appear on screen its easier to give the buttons an id and find them using buttonsget var buttons tsuiTopBarbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary var buttons tsuiTopBarbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary Hide buttons You can hide and show buttons You can also toggle visible tsuiTopBarbuttonsforEachbutton ifbuttonvisible buttonhide else buttonshow tsuiTopBarbuttonsforEachbutton ifbuttonvisible buttonhide else buttonshow Disable buttons You can disable and enable buttons You can also toggle disabled tsuiTopBarbuttonsforEachbutton ifbuttondisabled buttonenable else buttondisable tsuiTopBarbuttonsforEachbutton ifbuttondisabled buttonenable else buttondisable Busy buttons We can display a temporary progress indicator with the busy and done methods var button tsuiTopBarbuttons0 buttonbusy setTimeout buttondone 1000 var button tsuiTopBarbuttons0 buttonbusy setTimeout buttondone 1000 The busy method supports an optional status message var button tsuiTopBarbuttons0 buttonbusyMaking progress setTimeout buttondone 1000 var button tsuiTopBarbuttons0 buttonbusyMaking progress setTimeout buttondone 1000 Button groups You can also group buttons in arrays to create button groups that look like this tsuiTopBarbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger tsuiTopBarbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger You can of course also create grouped buttons with icons instead of text var group tsuiTopBarbuttons2 grouppush icon tsiconother type tsdanger var group tsuiTopBarbuttons2 grouppush icon tsiconother type tsdanger Heres a summary of the buttons collection and button model If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Header","href":"components/header/index.html","content":"Header Unless you know exactly what you are doing and why your app doesnt need a Header you should always configure the Header with an icon and a title You can configure the color as well the default one is white These can be configured via metatags in the document head section or via attributes on the App element as seen in your basic layout or with JavaScript via the tsuiHeader API tsuiHeadertitleHeadericonassetsappiconsvgcolortsblue tsuiHeadertitleHeadericonassetsappiconsvgcolortsblue All colors we support are tsbluetsredtsorangetsyellowtsgreentspurpletspinktsgraytsslatetsblack and the default is white Heres an overview of the Header API If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Header Navigation","href":"components/header/navigation.html","content":"The Header features a dedicated Back button to support drill down navigation The buttons appear when you pass a callback function to the backbutton method tsuiHeaderbackbuttonfunction onclick tsuiNotificationsuccessGo back tsuiHeaderbackbuttonfunction onclick tsuiNotificationsuccessGo back You should of course not forget to hook your navigation up to the browsers native Back button If and when needed you can of course also display a Forward button tsuiHeaderforwardbuttonfunction onclick tsuiNotificationsuccessGo forward tsuiHeaderforwardbuttonfunction onclick tsuiNotificationsuccessGo forward Once the navigation is completed you can hide the buttons again by passing null as an argument tsuiHeaderbackbuttonnullforwardbuttonnull tsuiHeaderbackbuttonnullforwardbuttonnull Here an overview of the Navigation methods If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Header Search","href":"components/header/search.html","content":"The search method reveals a dedicated search bar The info property acts as placeholder and the onsearch method gets called whenever the user presses ENTER tsuiHeadersearch info Search amongst all the things onsearch functionvalue tsuiNotificationsuccessvalue nothing tsuiHeadersearch info Search amongst all the things onsearch functionvalue tsuiNotificationsuccessvalue nothing If defined the onidle method gets called whenever the user pauses typing var search tsuiHeadersearch searchvalue Try it now searchonidle functionvalue tsuiNotificationsuccessvalue var search tsuiHeadersearch searchvalue Try it now searchonidle functionvalue tsuiNotificationsuccessvalue The onidle method will also be called when the field loses focus The idletime property controls the timeout value default is 500 milliseconds You can also add one or more buttons to the Search var search tsuiHeadersearch searchbuttonspush label Search Now onclick function searchsearch var search tsuiHeadersearch searchbuttonspush label Search Now onclick function searchsearch The buttons have a search property that references the Search model This will come in handy when you configure the Search via a single JSON payload tsuiHeadersearch info Search amongst all the things buttons label Advanced Search onclick function consolelogLoading advanced search thissearchhide tsuiHeadersearch info Search amongst all the things buttons label Advanced Search onclick function consolelogLoading advanced search thissearchhide If you are using tabs remember that the Search is conceptually scoped to the current tab You would most often want to clear the entire Search whenever the user switches tab This event can be tracked with the tabs onselect callback tsuiHeadersearchnull tsuiHeadersearchnull Here an overview of the Search model If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Header Settings &amp; Support","href":"components/header/settings.html","content":"We have some special buttons dedicated to global app settings and support The buttons appear when you pass a callback to the dedicated methods tsuiHeader settingsbuttonfunction onclick tsuiNotificationsuccessSettings supportbuttonfunction onclick tsuiNotificationsuccessSupport tsuiHeader settingsbuttonfunction onclick tsuiNotificationsuccessSettings supportbuttonfunction onclick tsuiNotificationsuccessSupport You can make them go away by passing null instead tsuiHeader settingsbuttonnull supportbuttonnull tsuiHeader settingsbuttonnull supportbuttonnull Here an overview of the Navigation methods If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Header Tabs","href":"components/header/tabs.html","content":"Top level navigational tabs can be mounted via the tabs method as shown tsuiHeadertabs label One label Two label Three onselect consolelogselected tsuiHeadertabs label One label Two label Three onselect consolelogselected but since the page already has tabs we will instead append a new tab to the existing collection If you omit the argument youll get the current tabs jQuery style var tabs tsuiHeadertabs tabspush label Bonus Tab onselect function tsuiNotificationsuccessthislabel selected var tabs tsuiHeadertabs tabspush label Bonus Tab onselect function tsuiNotificationsuccessthislabel selected If you prefer the markupdriven approach top level tabs may alternatively be configured declaratively via the Mains component You can use array methods like push pop shift unshift splice and so on to manage tabs just note that the tabs length is a readonly property Also note that tabs dont do anything by default so what happens at onselect is completely up to you Second level tabs We supported two levels of tabs before one is in the header and use the normal tabs as the second level tabs We remove the tabs in the header right now If you want to have two levels of tabs you can use the normal tabs as the first level and use TabBox as the second level Read more about boards One Two Three Updating tabs We can at any time change what happens when a tab gets selected We can also change the tab label if we like although perhaps this could become confusing var tabs tsuiHeadertabs tabs4label Choose Me tabs4onselect function thislabel Thanks var tabs tsuiHeadertabs tabs4label Choose Me tabs4onselect function thislabel Thanks Selecting tabs We can programatically select a tab using one of these approaches tsuiHeadertabs4select tsuiHeadertabsselectedIndex 1 Querying tabs This will all become a lot easier if we give all the tabs an id and use tabsget var tabs tsuiHeadertabs tabssplice4 0 label Example Tab id exampletab tabsgetexampletabselect var tabs tsuiHeadertabs tabssplice4 0 label Example Tab id exampletab tabsgetexampletabselect Tabs icons You can add a tab with an icon if somehow that tab is special tsuiHeadertabspush label Icon Tab icon tsicontodo tsuiHeadertabspush label Icon Tab icon tsicontodo Tab counters You can add a counter to the tabs for whatever reason you like tsuiHeadertabsforEachfunctiontab tabcounter MathceilMathrandom 10 tsuiHeadertabsforEachfunctiontab tabcounter MathceilMathrandom 10 When the counter reaches zero it disappears tsuiHeadertabsforEachfunctiontab tabcounter tsuiHeadertabsforEachfunctiontab tabcounter Closeable tabs You can create closeable tabs but note that the tab must be selected before it can be closed You can return false in the onclose method to prevent the tab from closing if this would otherwise cause data loss tsuiHeadertabspush label Closeable Tab closeable true selected true onclose function tsuiNotificationsuccessthislabel closed tsuiHeadertabspush label Closeable Tab closeable true selected true onclose function tsuiNotificationsuccessthislabel closed NewTab button You can allow the user to create new tabs via a special button as seen in popular browsers Note that the button just triggers a callback and that the new tab must be created manually In the example below the selected property also selects the tab var tabs tsuiHeadertabs tabsshowNewfunction onclick tabspush label My New Tab selected true var tabs tsuiHeadertabs tabsshowNewfunction onclick tabspush label My New Tab selected true If you regret this later on you can also hide the button tsuiHeadertabshideNew tsuiHeadertabshideNew Heres a summary of the tabs collection and tab model If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"Icons","href":"components/icons/css.html","content":"Icons buttonhover ibefore fontfamily Open Sans important fontweight 600 tsdoxtabs edbmldeclareedbmlZCEiMv0asfunction edbml use strict var out edbmlout txt edbmlsafetext val edbmlsafeattr tsiconlogot1 tsiconlogot2 tsicondiscovery tsiconactivity tsicontodo tsiconnetwork tsiconcreatedocument tsiconalldocuments tsicondocument tsiconsales tsiconpurchases tsicondrafts tsiconapps tsiconusersettings tsiconsettings tsiconcompanyprofile tsiconlogout tsiconsupport tsiconchecked tsiconaccept tsicondone tsiconcheckedalt tsiconremove tsiconadd tsiconclose tsiconlocation tsiconaddfilter tsiconfollowed tsiconunfollowed tsiconsearch tsiconstatuschange tsiconedit tsiconrating tsiconshare tsiconindustry tsiconshowpicker tsiconwarning tsicontimer tsiconcomment tsiconmore tsiconusers tsiconownership tsiconcompanysize tsiconview tsiconreject tsicondispute tsiconmenuswitch tsicondelete tsiconcancel tsiconinfo tsiconforums tsiconaddfield tsiconfileaccess tsiconerror tsiconappactivate tsiconappactive tsiconfileattach tsiconreset tsiconsend tsiconsave tsiconproceed tsiconback tsicondownload tsiconbroadcastmessage tsiconinsertfrominventory tsicontriangleright tsicontriangleleft tsicontriangleup tsicontriangledown tsiconarrowright tsiconarrowleft tsiconarrowup tsiconarrowdown tsiconpreview tsiconlocked tsiconunlocked tsiconnext tsiconapprove tsiconcode tsiconhalt tsiconpay tsiconother tsiconmyapps tsiconcompanyevent tsiconsplit tsiconmerge tsiconassociated tsiconradio tsiconradioon tsiconcheckbox tsiconcheckboxon tsiconcheckboxindeterminate tsiconwrittenrequest tsiconcategories tsiconfavorites tsiconheart tsiconpreferred tsiconpin tsiconpreviouslyrequested tsiconcart tsiconarchive tsiconaddtoarchive tsiconcalendar tsiconselect tsiconcollaboration tsiconaddcurrentobject tsiconforward tsiconquestion tsiconphone tsiconbox tsiconusersassign tsiconusersadd tsiconusersremove tsicontools tsiconbasket tsiconerp tsiconupload tsiconada sort forEachfunctionicon outhtml txticon return outwrite windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Icons","href":"components/icons/iconspirit.html","content":"IconsSpirit This spirit is only used in Docs for now We should probably make this into a screenshot page This is a good old CSS icon We must always remember that the icon remains centered in the list item as the text wraps to multiple lin This icon is embedded via inline SVG As you can see the icon still remains centered vertically when the text wraps to multiple line This icon is loaded from external bundle 1 This icon is loaded from external bundle 1 This icon is loaded from external bundle 1 This icon is loaded from external bundle 2 This icon is loaded from external bundle 2 This icon is loaded from external bundle 2 If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Icons","href":"components/icons/index.html","content":"Icons A library of icons that work great with Buttons Assign any of the icon classnames to an i element to get an icon Note that we like to reserve i for icons so if you need to emphasize text consider using em If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"Icons","href":"components/icons/list.html","content":"Icons tsdoxtabs tsuireadyfunction function geticontype color dark return item Icon type type color color function geticonrowtype description return geticontype geticontype geticontype type description var table tsuigeticons tablecols label 10px type iconssizetiny minwidth tsuiUNIT 3 tsfontsizeicon label 20px type iconssizestd minwidth tsuiUNIT 3 App Icon Size label 36px type iconssizeapp minwidth tsuiUNIT 3 label Classname type tstext flex 3 minwidth 200 label Description type tstext flex 10 minwidth 200 wrap true tablerows geticonrow tsicondiscovery Some horrible cool description goes here with MARKDOWN supportn Fulln Onn Awesome geticonrowtsiconactivity geticonrowtsicontodo geticonrowtsiconnetwork geticonrowtsiconcreatedocument geticonrowtsiconalldocuments geticonrowtsicondocument geticonrowtsiconsales geticonrowtsiconpurchases geticonrowtsicondrafts geticonrowtsiconapps geticonrowtsiconusersettings geticonrowtsiconsettings geticonrowtsiconcompanyprofile geticonrowtsiconlogout geticonrowtsiconsupport geticonrowtsiconchecked geticonrowtsiconaccept geticonrowtsicondone geticonrowtsiconcheckedalt geticonrowtsiconremove geticonrowtsiconquestion geticonrowtsiconmore geticonrowtsiconinfo geticonrowtsiconadd geticonrowtsiconclose geticonrowtsiconlocation geticonrowtsiconaddfilter geticonrowtsiconfollowed geticonrowtsiconunfollowed geticonrowtsiconsearch geticonrowtsiconstatuschange geticonrowtsiconedit geticonrowtsiconrating geticonrowtsiconshare geticonrowtsiconindustry geticonrowtsiconshowpicker geticonrowtsiconwarning geticonrowtsicontimer geticonrowtsiconcomment geticonrowtsiconusers geticonrowtsiconownership geticonrowtsiconcompanysize geticonrowtsiconview geticonrowtsiconreject geticonrowtsicondispute geticonrowtsiconmenuswitch geticonrowtsicondelete geticonrowtsiconcancel geticonrowtsiconforums geticonrowtsiconaddfield geticonrowtsiconfileaccess geticonrowtsiconerror geticonrowtsiconappactivate geticonrowtsiconappactive geticonrowtsiconfileattach geticonrowtsiconreset geticonrowtsiconsend geticonrowtsiconsave geticonrowtsiconproceed geticonrowtsiconback geticonrowtsicondownload geticonrowtsiconbroadcastmessage geticonrowtsiconinsertfrominventory geticonrowtsicontriangleright geticonrowtsicontriangleleft geticonrowtsicontriangleup geticonrowtsicontriangledown geticonrowtsiconarrowright geticonrowtsiconarrowleft geticonrowtsiconarrowup geticonrowtsiconarrowdown geticonrowtsiconpreview geticonrowtsiconlocked geticonrowtsiconunlocked geticonrowtsiconnext geticonrowtsiconapprove geticonrowtsiconcode geticonrowtsiconhalt geticonrowtsiconpay geticonrowtsiconother geticonrowtsiconmyapps geticonrowtsiconcompanyevent geticonrowtsiconsplit geticonrowtsiconmerge geticonrowtsiconassociated geticonrowtsiconradio geticonrowtsiconradioon geticonrowtsiconcheckbox geticonrowtsiconcheckboxindeterminate geticonrowtsiconcheckboxon geticonrowtsiconwrittenrequest geticonrowtsiconcategories geticonrowtsiconfavorites geticonrowtsiconheart geticonrowtsiconpreferred geticonrowtsiconpin geticonrowtsiconpreviouslyrequested geticonrowtsiconcart geticonrowtsiconarchive geticonrowtsiconaddtoarchive geticonrowtsiconcalendar geticonrowtsiconselect geticonrowtsiconcollaboration geticonrowtsiconaddcurrentobject geticonrowtsiconforward geticonrowtsiconphone geticonrowtsiconbox geticonrowtsiconusersassign geticonrowtsiconusersadd geticonrowtsiconusersremove geticonrowtsicontools geticonrowtsiconbasket geticonrowtsiconerp geticonrowtsiconupload windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,null,{"title":"","href":"components/icons/tabs.html","content":""},{"title":"Inline Components","href":"components/index.html","content":"Inline Components tsdoxtabs Inline components These components depend on special markup structures and some may expose features though a JavaScript API Other than specifying the datats attribute as shown there is no need to initialize the components in any special way Button A true classic available in several flavors Primary Secondary Tertiary Primary Secondary Tertiary Primary Secondary Tertiary Primary Secondary Tertiary Primary Secondary Tertiary Primary Secondary Tertiary CompanyCard A unified way to show companies id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Tradeshift logo assetslogopng size 100249 location San Francisco California industry Software IT connection 2 id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Tradeshift logo assetslogopng size 100249 location San Francisco California industry Software IT connection 2 id 6bf17754f9de4e31aa31bd3ff765b9c2 data name Tradeshift logo assetslogopng size 100249 location San Francisco California industry Software IT connection 2 Form Another classic cant have webapps without them Text Text Text Textarea Textarea Textarea Date Date Date Select One Two Three Select One Two Three Select One Two Three Select multiple One Two Three Four Five Cool apply changes Select multiple One Two Three Four Five Cool apply changes Select multiple One Two Three Four Five Cool apply changes Choose wisely Red pill Blue pill Choose wisely Red pill Blue pill Choose wisely Red pill Blue pill Legally Binding Contract I agree to something I agree to something by default Legally Binding Contract I agree to something I agree to something by default Legally Binding Contract I agree to something I agree to something by default Settings Page Secret Feature Secret Feature On by default Settings Page Secret Feature Secret Feature On by default Settings Page Secret Feature Secret Feature On by default Icons We support a range of icons Here are a few randomly selected ones Menu Not to be confused with the main navigation this is simply a list of selectable items I have an icon on my right And a second line I have an icon on my left but skipped the second line I have an icon on my right And a second line I have an icon on my left but skipped the second line I have an icon on my right And a second line I have an icon on my left but skipped the second line Note A nice way to inform the user about something on the page This is not for status messages It also works on pagelevel You love the Note You love the Note You love the Note Search Unified search experience TabBar An easy way to show tabs Also works on pagelevel var tabbar tsuigettabbarexample tabbartabs label Tab One onselect function tsuiNotificationsuccessthislabel label Tab Two onselect function tsuiNotificationsuccessthislabel var tabbar tsuigettabbarexample tabbartabs label Tab One onselect function tsuiNotificationsuccessthislabel label Tab Two onselect function tsuiNotificationsuccessthislabel guiBroadcastaddguiBROADCASTDIDSPIRITUALIZE onbroadcast function var firstload true var tabbar tsuigettabbarexample tabbartabs label Tab One onselect function if firstload firstload false else tsuiNotificationsuccessthislabel label Tab Two onselect function tsuiNotificationsuccessthislabel Table Ranging from spreadsheetstyle editing to just showing some tabular data var table tsuigettableexample tablecols label Level type tsnumber label Character flex 2 label Alignment flex 2 tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil var table tsuigettableexample tablecols label Level type tsnumber label Character flex 2 label Alignment flex 2 tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil guiBroadcastaddguiBROADCASTDIDSPIRITUALIZE onbroadcast function var table tsuigettableexample tablecols label Level type tsnumber label Character flex 2 label Alignment flex 2 tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil Tags Labels A set of interactive keywords that help to label organize and categorize objects const data tsuiencode Vision Blindsight Truesight Darkvision tsuiready tsuigettagclickable tag tagonclick tsuiNotificationsuccessDo you see const data tsuiencode Vision Blindsight Truesight Darkvision tsuiready tsuigettagclickable tag tagonclick tsuiNotificationsuccessDo you see const data tsuiencode Vision Blindsight Truesight Darkvision tsuiready tsuigettagclickable tag tagonclick tsuiNotificationsuccessDo you see Time Human readable time formatting UserImage Little avatars for the users windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Mains","href":"components/mains/index.html","content":"Mains Main Main and Mains may come in handy to configure Header tabs via HTML The Main component is a fairly unassuming part of the basic layout where it functions to control the flex Here it is stuck between the App and Content Welcome to my app Welcome to my app We can add multiple Main elements inside a containing Mains to automatically generate top level tabs in the Header They must be fitted with a label The tabs will automatically be updated when you remove or append further Main elements just as long as you remember to set the label attribute Top level tabs may alternatively be configured via the Header API Tab selection You can set the default selection with the selected attribute You can track tab selection with the inline event listener onselect You can of course still also manage tabs via the Header API just remember that tabs added this way will not inject the corresponding Main element so you must figure out an alternative way of showing the appropriate content when onselect happens tsuiHeadertabspush label Bonus Tab onselect function tsuiNotificationsuccessSelected tsuiHeadertabspush label Bonus Tab onselect function tsuiNotificationsuccessSelected This is the second Main element There is nothing much to see here windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Menu","href":"components/menus/index.html","content":"Menu Not to be confused with the main navigation the tsmenu is simply a list of selectable items Assign datatsMenu to a menu element to initialize it as a Menu Use li elements to separate the menu items all of which follows the structure of a Button Item One Item Two Item Three Item One Item Two Item Three Item One Item Two Item Three Adding Icons The markup follows the convention for buttons Use a span and an i element to seperate text and icon simply reverse the two to make the icon go first I have an icon on my right I have an icon on my left I have an icon on my right I have an icon on my left I have an icon on my right I have an icon on my left Using the second linesub text To add a second line to the Menu item just add a sub with some text in it Im the first line Im the second line Im the first line Im the second line Im the first line Im the second line Select one To create a single select menu mark one and only one li with the tschecked classname and use the tsiconchecked classname for the icon i element Selected Not selected Selected Not selected Selected Not selected Select many To create a multi select menu simply add more classnames and icons Selected Also Selected Selected Also Selected Selected Also Selected The UI component makes no attempt to automatically manage these icons and classnames whenever a new menu item gets selected Disabled items You can mark any selection as readonly by adding the disabled attribute to the individual buttons Not selected Not selected Selected Not selected Not selected Selected Not selected Not selected Selected If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"","href":"components/modals/page1.html","content":"Pa"},{"title":"","href":"components/modals/page2.html","content":"Pa"},{"title":"Note","href":"components/notes/index.html","content":"Note You can use the Note to give information to the user about the whole page or a section of the page The Note should however not be used to display errors or warning messages please use the Notification for that To explain to the user what the page is about you can show a Note at the top Note that there should never be more than one pagelevel Note tsuiNote icon tsiconheart text This page explains how to use the Note component with some nice examples onclose function tsuiNotificationsuccessThe Note is gone tsuiNote icon tsiconheart text This page explains how to use the Note component with some nice examples onclose function tsuiNotificationsuccessThe Note is gone You can add buttons to the Note If you save a reference to the Note you can close it with any button var note tsuiNote buttons label Button type tsprimary onclick function noteclose var note tsuiNote buttons label Button type tsprimary onclick function noteclose You can also add some links via Markdown When a link is clicked the URL will be passed along to the onlink method As you can see below the URL can be just a key it doesnt have to be real URL tsuiNote text Choose link oneONE or twoTWO or threeTHREE onlink functionurl tsuiNotificationsuccessurl thisclose tsuiNote text Choose link oneONE or twoTWO or threeTHREE onlink functionurl tsuiNotificationsuccessurl thisclose If the link should indeed link to something make sure to provide the full protocol https Notes should not be used for internal navigation at least not yet You can use an inline Note to give information about a certain section of the page Only the pagelevel Note is closeable while inline Notes should stay on the page with the content You love the Note You love the Note You love the Note Note without icon using simple HTML This is the iconless Note This is the iconless Note This is the iconless Note Inline Note with closeable function This is the closeable inline Note This is the closeable inline Note This is the closeable inline Note The Note will wrap to multiple lines if theres a lot of content inside Arcane spell failure charm domain cover dragon type enemy experience points versus Tradeshift family domain fighter and hardness hit die initiative check intelligence melee attack roll miniature figure movement modes Party planning domain point of origin powerful charge ray regeneration rogue special quality speed take 20 touch attack turned Fivefoot step ability class feature domain dying level luck domain negate ranged touch attack result speed surprise target total concealment unarmed strike Armor class base save bonus check conjuration divine spell falling objects fly law domain school of Tradeshift shield bonus threatened square war domain Ability damage acid effects burrow chaos domain class feature darkvision fullround action glamer subschool good subtype improved evasion incorporeal subtype ocean domain platinum piece size modifier You can use a Note in an Aside or a SideBar if you put the inline note as the first child of the tspanel Note in the Aside Note in the Aside If you find a bug or need a feature Create GitHub Issue Note in the Aside windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Notification","href":"components/notifications/index.html","content":"Notification Simple modals for providing users with notifications much like the JavaScript alert method Basic markdown may be used for links and formatting The success notification demands no user interaction tsuiNotificationsuccessYou did it tsuiNotificationsuccessYou did it The info warning and error notification must be accepted by the user tsuiNotificationinfoYou can do it tsuiNotificationwarningYou will fail tsuiNotificationerrorYou are wrong tsuiNotificationinfoYou can do it tsuiNotificationwarningYou will fail tsuiNotificationerrorYou are wrong An optional second argument specifies the button text tsuiNotificationwarningBeware Understood tsuiNotificationwarningBeware Understood You can configure a callback for when the Notification gets accepted tsuiNotificationinfoYou must accept it onaccept function tsuiNotificationsuccessWe knew you would tsuiNotificationinfoYou must accept it onaccept function tsuiNotificationsuccessWe knew you would Notifications support basic markdown for formatting and links Markdown for bold text and italic text and source code Markdown for a hyperlinkhttpwwwexamplecom Markdown for bold text and italic text and source code Markdown for a hyperlinkhttpwwwexamplecom When a link is clicked the URL will be passed along to the onlink method As you can see below the URL can be just a key it doesnt have to be real URL var text Choose link oneONE or twoTWO or threeTHREE tsuiNotificationinfotext onlink functionurl thisacceptthenfunction onfadeout tsuiNotificationsuccessurl var text Choose link oneONE or twoTWO or threeTHREE tsuiNotificationinfotext onlink functionurl thisacceptthenfunction onfadeout tsuiNotificationsuccessurl If the link should indeed link to something make sure to provide the full protocol https tsuiNotificationinfo Please visit Tradeshifthttpwwwtradeshiftcom tsuiNotificationinfo Please visit Tradeshifthttpwwwtradeshiftcom Note that all links will open in a new tab or window depending on the browser settings so you should not use links in Notifications for internal navigation at least not just yet You can config those callbacks for Notification such as onopen onopened onclose onclosed tsuiNotificationsuccessYou did it onopen function consolelogThe Notification is going to open onopened function consolelogThe Notification is opened onclose function consolelogThe Notification is going to close onclosed function consolelogThe Notification is closed tsuiNotificationsuccessYou did it onopen function consolelogThe Notification is going to open onopened function consolelogThe Notification is opened onclose function consolelogThe Notification is going to close onclosed function consolelogThe Notification is closed If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Pager","href":"components/pager/index.html","content":"Pager Provides a navigation menu with shortcuts for all kinds of paginated data Assign datatsPager to a menu or nav to initialize it as a Pager The component may be configured in HTML complete with an inline callback like in this example or you can configure it via a JavaScript API like in this example tsuigetmypager pager pagerpages 8 pagerpage 0 pageronselect functionpage consolelogpage tsuigetmypager pager pagerpages 8 pagerpage 0 pageronselect functionpage consolelogpage As you can see the Pager has no default outline and this will make it easier to embed into other components Heres a short summary of the Pagers properties and methods If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Search","href":"components/search/index.html","content":"Search The Search is prominently featured in the Header but you can use it anywhere on the page if you like Note that the API is in any case identical You can initialize a Search with datatsSearch The classname tsinset will add an outline so that we can see how it behaves on this white background tsuigetmysearch search searchvalue Press ENTER here searchinfo Search amongst all the things searchonsearch functionvalue tsuiNotificationsuccessvalue Search cleared tsuigetmysearch search searchvalue Press ENTER here searchinfo Search amongst all the things searchonsearch functionvalue tsuiNotificationsuccessvalue Search cleared To keep the field expanded at all times simply assign the CSS classname tsexpanded Search info The datatsinfo attribute works to show a title mouseover tooltip when the field is collapsed and a placeholder when the field is expanded The search field expands when the field is focused by the user or whenever theres a nonempty value in the field You can change the value like this var search tsuigetmysearch searchvalue Hello world var search tsuigetmysearch searchvalue Hello world Search callbacks The onsearch callback gets invoked when when the user presses ENTER var search tsuigetmysearch searchvalue Press ENTER here searchonsearch functionvalue tsuiNotificationsuccessvalue Search cleared var search tsuigetmysearch searchvalue Press ENTER here searchonsearch functionvalue tsuiNotificationsuccessvalue Search cleared If defined the onidle method gets called whenever the user pauses typing var search tsuigetmysearch searchvalue Try it now searchonidle functionvalue tsuiNotificationsuccessvalue var search tsuigetmysearch searchvalue Try it now searchonidle functionvalue tsuiNotificationsuccessvalue The onidle method may also be called when the field loses focus The idletime property controls the timeout value default is 500 milliseconds Search info The info property doubles as both the placeholder when the field is expanded and the title or tooltip when the field is collapsed var search tsuigetmysearch searchinfo Search amongst the things searchvalue collapse the field var search tsuigetmysearch searchinfo Search amongst the things searchvalue collapse the field Here an overview of the properties and methods of the Search model If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"SideBars","href":"components/sidebars/index.html","content":"SideBars SideBar The SideBar is a panel used for interactions directly related to the main Content such as filtering and sorting a list of items Assign datatsSideBar to an aside to initialize as a SideBar The SideBar must be created with a child Panel SideBar content SideBar content This sidebar should be positioned either before or after the Content element as seen in your basic layout You can toggle this position to witness the difference Before Content After Content TODO Something special here for mobile breakpoint Before we dive into the SideBar features here is the most important observation The SideBar will automatically become hidden in the mobile breakpoint The mobile phone doesnt leave much room for SideBars so we will just hide them There is no generalized way to restore a hidden SideBar so if you want the SideBar to be accessible to mobile users youll have to present a button in your content The SideBar can be displayed with the open method Open The SideBar Open The SideBar The SideBar will open like an Aside you can resize this page to see an example Remember that the responsive classnames can make it easy to hide and show stuff in the various breakpoints The SideBar is hidden now but you can open it if you like Open The SideBar SideBar tabs SideBar tabs can be declared in the HTML via Panels and label attributes as seen in this example First panel Second panel First panel Second panel or they can injected programatically via the tabs method Remember that programatically cretated tabs dont do anything by default so you will have to implement your own content switching mechanism via the onselect callback tsuigetmysidebar sidebar sidebar tabs label One onselect consolelogSelect 1 label Two onselect consolelogSelect 2 open Heres a summary of the tabs collection and tab model SideBar footer You can insert a footer in the SideBar for whatever purpose you can imagine Note that if your SideBar features tabs you may want to manually toggle the display of one or more footer elements since that doesnt happen automatically Tab change can be intercepted with the onselect callback SideBar content Sidebar footer SideBar content Sidebar footer Nested Aside Asides can be nested directly inside the SideBar if they are relevant for the SideBars functionality You can just open and close them like you would with a regular Aside SideBar content aside content SideBar content aside content edbmldeclareedbmlAjKNz9asfunction edbml use strict var out edbmlout if locationhostname localhost outhtml Hello developer outhtml Since you are on viewing this on localhost and since you have a giant monitor outhtml Click here to open the SideBar Gallery return outwrite This SideBar is positioned before the App element in the basic layout This SideBar is positioned after the App element in the basic layout This SideBar is positioned before the Content element in the basic layout It also features a nested Aside Open Nested Aside You can close the nested Aside now Close Nested Aside This SideBar is positioned after the Content element in the basic layout This SideBar has a footer below the Panel This can be used for any purpose you can imagine First panel Second panel windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"","href":"components/sidebars/tabs.html","content":""},{"title":"Spinner","href":"components/spinners/index.html","content":"Spinner function spinelm elmattrdatatsbusy true setTimeoutfunction elmattrdatatsbusy false 1500 Spinner The Spinner can be used with App Aside Table SideBar and Button You can assign the datatsbusy to the App element to initialize a Spinner The attribute value can be true or false or perhaps an optional loading messsage The Spinner can also be controlled with an equivalent JavaScript API as seen below tsuigettsapp app appbusyChrunching data setTimeout appdone 1500 tsuigettsapp app appbusyChrunching data setTimeout appdone 1500 If you want a blocking overlay you can use the datatsblocking attribute tsuigettsapp app appblockingChrunching data setTimeout appdone 1500 tsuigettsapp app appblockingChrunching data setTimeout appdone 1500 You can use the function of spinmessage to change the message of the spinner tsuigettsapp app appblockingChrunching data setTimeout appspinnerMessageThe data is coming 1000 setTimeout appspinnerMessageGood luck 2000 setTimeout appdone 3000 tsuigettsapp app appblockingChrunching data setTimeout appspinnerMessageThe data is coming 1000 setTimeout appspinnerMessageGood luck 2000 setTimeout appdone 3000 Aside and SideBar Assign the datatsbusy attribute to an Aside or SideBar to initialize a Spinner Aside content Aside content You can also use the equivalent API tsuigetmyaside aside asidebusyLoading asideopen setTimeout asidedone setTimeout asideclose 250 1500 tsuigetmyaside aside asidebusyLoading asideopen setTimeout asidedone setTimeout asideclose 250 1500 Button Assign the datatsbusy attribute to a Button to initialize a Spinner Primary Primary Show Spinner Table You can assign the datatsbusy attribute to a Table to initialize a Spinner or you can use the busy and done methods like this tsuigetmytable table tablecolsOne Two Three tablerows A D G B E H C F I mytableattrdatatsbusy Loading setTimeoutfunction tabledone 1500 tsuigetmytable table tablecolsOne Two Three tablerows A D G B E H C F I mytableattrdatatsbusy Loading setTimeoutfunction tabledone 1500 windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"TabBar","href":"components/tabbar/index.html","content":"ToolBar can be positioned anywhere on the page If you need tabs specifically for top level navigation within your app refer instead to the Header Assign datatsTabBar to a header or footer or nav to initialize it as a TabBar On this page weve positioned the TabBar the Panel element so it stays fixed while scrolling Please note that this is for educational purposes only Tabs for top level navigation should ordinarily be assigned via the Header API TabBar features are controlled through a JavaScript API You can get a hold of the component using a CSS selector and call the tabs method like this tsuigetmytabbar tabbar tabbartabs label One label Two label Three onselect consolelogselected tsuigetmytabbar tabbar tabbartabs label One label Two label Three onselect consolelogselected If you omit the argument youll get the current tabs jQuery style You can use array methods like push pop shift unshift splice and so on to manage tabs just note that the tabs length is a readonly property Also note that tabs dont do anything by default so what happens at onselect is completely up to you Second level tabs We supported two levels of tabs before one is in the header and use the normal tabs as the second level tabs We remove the tabs in the header right now If you want to have two levels of tabs you can use the normal tabs as the first level and use TabBox as the second level Read more about boards One Two Three Updating tabs We can at any time change what happens when a tab gets selected We can also change the tab label if we like although perhaps this could become confusing var tabs tsuigetmytabbartabs tabs2label Choose Me tabs2onselect function thislabel Thanks var tabs tsuigetmytabbartabs tabs2label Choose Me tabs2onselect function thislabel Thanks Selecting tabs We can programatically select a tab using one of these approaches tsuigetmytabbartabs2select tsuigetmytabbartabsselectedIndex 1 Querying tabs This will all become a lot easier if we give all the tabs an id and use tabsget var tabs tsuigetmytabbartabs tabssplice2 0 label Example Tab id exampletab tabsgetexampletabselect var tabs tsuigetmytabbartabs tabssplice2 0 label Example Tab id exampletab tabsgetexampletabselect Tabs icons You can add a tab with an icon if somehow that tab is special tsuigetmytabbartabspush label Icon Tab icon tsicontodo tsuigetmytabbartabspush label Icon Tab icon tsicontodo Tab counters You can add a counter to the tabs for whatever reason you like tsuigetmytabbartabsforEachfunctiontab tabcounter MathceilMathrandom 10 tsuigetmytabbartabsforEachfunctiontab tabcounter MathceilMathrandom 10 When the counter reaches zero it disappears tsuigetmytabbartabsforEachfunctiontab tabcounter tsuigetmytabbartabsforEachfunctiontab tabcounter Closeable tabs You can create closeable tabs but note that the tab must be selected before it can be closed You can return false in the onclose method to prevent the tab from closing if this would otherwise cause data loss tsuigetmytabbartabspush label Closeable Tab closeable true selected true onclose function tsuiNotificationsuccessthislabel closed tsuigetmytabbartabspush label Closeable Tab closeable true selected true onclose function tsuiNotificationsuccessthislabel closed NewTab button You can allow the user to create new tabs via a special button as seen in popular browsers Note that the button just triggers a callback and that the new tab must be created manually In the example below the selected property also selects the tab var tabs tsuigetmytabbartabs tabsshowNewfunction onclick tabspush label My New Tab selected true var tabs tsuigetmytabbartabs tabsshowNewfunction onclick tabspush label My New Tab selected true If you regret this later on you can also hide the button tsuigetmytabbartabshideNew tsuigetmytabbartabshideNew Heres a summary of the tabs collection and tab model and heres finally an overview of the TabBar windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Actions","href":"components/table/actions.html","content":"Table Actions tsdoxtabs Selection actions The table actions are reserved for working with selections They work much like the buttons except the icon should never be omitted from an action since it is always displayed and not just in mobile breakpoint You can try to select something in this table var table tsuigettable1 tablecolsOne Two Threerows A B C D E F G H I selectableupdate function update var actions tableactions var maximum tablerowslength var counter tableselectedlength ifcounter 0 tablestatuscounter of maximum rows selected ifactionslength actionspush label Delete icon tsicondelete label Report icon tsiconhalt label Revert icon tsiconback onclick consolelogThe revert action was clicked else actionsclear tablestatusmaximum rows update var table tsuigettable1 tablecolsOne Two Threerows A B C D E F G H I selectableupdate function update var actions tableactions var maximum tablerowslength var counter tableselectedlength ifcounter 0 tablestatuscounter of maximum rows selected ifactionslength actionspush label Delete icon tsicondelete label Report icon tsiconhalt label Revert icon tsiconback onclick consolelogThe revert action was clicked else actionsclear tablestatusmaximum rows update The actions method both sets and gets the actions If you omit the argument youll get the current actions jQuery style You can use array methods like push pop shift unshift splice and so on to manage actions just note that the actions length is a readonly property Heres a summary of the actions collection and action model windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,null,null,null,null,null,null,null,null,null,null,null,null,{"title":"Table Build","href":"components/table/building.html","content":"Table Build tsdoxtabs Building the Table You can build your cols and rows with a compact syntax tsuigetmytable table tablecolsOne Two Three tablerows A D G B E H C F I tsuigetmytable table tablecolsOne Two Three tablerows A D G B E H C F I You can also declare columns as objects The objects have a label property tsuigetexample1 table tablecols label One label Two label Three tsuigetexample1 table tablecols label One label Two label Three This will come in handy when we need to assign extra properties to the columns If we set the type property to tsnumber the text will be rightaligned except in the first column tsuigetexample2 table tablecols label Type label Value type tsnumber tablerows Random number Mathrandom tsuigetexample2 table tablecols label Type label Value type tsnumber tablerows Random number Mathrandom We can also declare rows as objects with a list of cells This syntax will allow us to mark the row as selected you can read more about selection tsuigetexample3 table tableselectablerows cells A D G selected true cells B E H cells C F I tsuigetexample3 table tableselectablerows cells A D G selected true cells B E H cells C F I The individual cells can also be declared as objects if the displayed text should be different from the hidden value which can be anything you like tsuigetexample4 table tablerows cells value 1 text One value 2 text Two value 3 text Three tsuigetexample4 table tablerows cells value 1 text One value 2 text Two value 3 text Three You can update a single row whenever you like Here with compact syntax tsuigetexample5 table tablerows A B C D E F tablerow1 Mathrandom Mathrandom Mathrandom tsuigetexample5 table tablerows A B C D E F tablerow1 Mathrandom Mathrandom Mathrandom You can of course also update a single cell Here with compact syntax tsuigetexample6 table tablerows A B C D E F tablecell1 1 Mathrandom tsuigetexample6 table tablerows A B C D E F tablecell1 1 Mathrandom You can use array methods like push pop shift unshift splice reverse and so on to mange the rows Just note that the length property is readonly tsuigetexample7 table var rows tablerows rowspush1 2 3 rowsunshift4 5 6 rowssplice0 0 7 8 9 rowsreverse tsuigetexample7 table var rows tablerows rowspush1 2 3 rowsunshift4 5 6 rowssplice0 0 7 8 9 rowsreverse Here a summary of the methods that deal with building the Table windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Buttons","href":"components/table/buttons.html","content":"Table Buttons tsdoxtabs Table buttons The Table supports buttons and we will soon add some futher documentation For now we will simply recommend that you dont use buttons unless the Table is maximized This feature however also doesnt have any documentation var table tsuigettable1 tablecolsOne Two Threerows A B C D E F G H I buttons label One type tsprimary label Two type tssecondary label Three onclick consolelogThe tertiary button was clicked var table tsuigettable1 tablecolsOne Two Threerows A B C D E F G H I buttons label One type tsprimary label Two type tssecondary label Three onclick consolelogThe tertiary button was clicked The buttons method both sets and gets the buttons If you omit the argument youll get the current actions jQuery style You can use array methods like push pop shift unshift splice and so on to manage buttons just note that the buttons length is a readonly property TODO The Table breakpoint should be local to the Table not the window windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Click","href":"components/table/clicking.html","content":"Table Click tsdoxtabs Clicking the cells You can make the Table body clickable The rowindex and cellindex refer to the indexes in the JSON arrays and not the table as shown on the screen They are in other words not affected by sorting and paging and searching var popup tsuiNotification tsuigetexample8 table tablerows A D G B E H C F I tableclickablefunctionrowindex cellindex popupsuccessRow rowindex Cell cellindex var popup tsuiNotification tsuigetexample8 table tablerows A D G B E H C F I tableclickablefunctionrowindex cellindex popupsuccessRow rowindex Cell cellindex windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Collaboration","href":"components/table/collaborate.html","content":"Table Collaboration tsdoxtabs Table Collaboration This API is likely to change at some point You can activate a dedicated collaboration button in the statusbar var popup tsuiNotification tsuigettable1 table tablecollabbuttonfunction onclick popupsuccessGo collaborate colsA B C Drows 1 4 7 10 2 5 8 11 3 6 9 12 var popup tsuiNotification tsuigettable1 table tablecollabbuttonfunction onclick popupsuccessGo collaborate colsA B C Drows 1 4 7 10 2 5 8 11 3 6 9 12 The button triggers a callback but there is no default behavior associated The API to initialize and resume a Collaboration thread will be defined elsewhere When you are done with the button you can hide it again tsuigettable1collabbuttonnull tsuigettable1collabbuttonnull windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Config","href":"components/table/configuring.html","content":"Table Config tsdoxtabs Configuring the Table You can make the table configurable by a button in the statusbar var popup tsuiNotification tsuigettable1 table tableconfigbuttonfunction onclick popupsuccessGo configure colsA B C Drows 1 4 7 10 2 5 8 11 3 6 9 12 var popup tsuiNotification tsuigettable1 table tableconfigbuttonfunction onclick popupsuccessGo configure colsA B C Drows 1 4 7 10 2 5 8 11 3 6 9 12 The button triggers a callback but there is otherwise no default UI associated Since the visibility of columns is always a candidate for configuration the ColModel supports a visible property that can be used to hide columns tsuigettable1 table var cols tablecols function hideindex colsindexvisible false ifindex setTimeoutfunction next hideindex 1000 3 tsuigettable1 table var cols tablecols function hideindex colsindexvisible false ifindex setTimeoutfunction next hideindex 1000 3 Heres a summary of these things windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Demo","href":"components/table/demo.html","content":"Table Demo tsmain overflowy hidden tsdoxtabs windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,{"title":"Table Edit","href":"components/table/editing.html","content":"Table Edit tsdoxtabs Editing the cells We can make the Table editable with a callback that fires on change tsuigettable1 table tablerows Single asterisks is used for italic text Double asterisks is used for strong text Single backtick is used for monotype text Double tilde can be used to Strike text editablefunction oneditrowindex cellindex value consolelogSend to backend value tablecellrowindex cellindex value tsuigettable1 table tablerows Single asterisks is used for italic text Double asterisks is used for strong text Single backtick is used for monotype text Double tilde can be used to Strike text editablefunction oneditrowindex cellindex value consolelogSend to backend value tablecellrowindex cellindex value All cells are assumed editable unless negated in the column definition tsuigettable6 table tablecols label Edit label Edit label Dont edit editable false rows V V X editablefunction oneditri ci value thiscellri ci value tsuigettable6 table tablecols label Edit label Edit label Dont edit editable false rows V V X editablefunction oneditri ci value thiscellri ci value If you switch to verbose syntax you can also disable editing per row tsuigettable7 table tablerows cells X X X editable false cells V V V cells V V V editablefunction oneditri ci value thiscellri ci value tsuigettable7 table tablerows cells X X X editable false cells V V V cells V V V editablefunction oneditri ci value thiscellri ci value You can override both columns and rows by specifying editabletrue on the individual cells Again this would best be done using verbose syntax Multiline editing You can enter newlines by holding SHIFT on ENTER You will need to enter two newlines to create a paragraph Note however that we only show the first paragraph unless the column is set to wrap var popup tsuiNotification tsuigettable8 table tablecols label Wrapped column wrap true label Unwrapped column rows Hold SHIFT while pressing ENTER to add a second paragraph New paragraph ignored editablefunction oneditri ci value tablecellri ci value var popup tsuiNotification tsuigettable8 table tablecols label Wrapped column wrap true label Unwrapped column rows Hold SHIFT while pressing ENTER to add a second paragraph New paragraph ignored editablefunction oneditri ci value tablecellri ci value Input validation Note that the actual update is a manual proces This will give you a break to validate the input In this example well show the errors in a Notification var popup tsuiNotification tsuigettable2 table tablerows 1 1 2 3 5 8 13 21 34 55 editablefunction oneditri ci value value Numbervalue ifisNaNvalue tableinvalidri ci popuperrorPlease type a number onaccept function tablefocusri ci else consolelogSend to backend value tablecellri ci value var popup tsuiNotification tsuigettable2 table tablerows 1 1 2 3 5 8 13 21 34 55 editablefunction oneditri ci value value Numbervalue ifisNaNvalue tableinvalidri ci popuperrorPlease type a number onaccept function tablefocusri ci else consolelogSend to backend value tablecellri ci value We can report the errors in a less annoying way if we pass a string as we mark the cells invalid The message will show in the statubar when the cell is focused Well also initialize the statusbar with an empty string so that it doesnt awkwardly pop into existance function formatvalue return new DatevaluetoDateString function validvalue return isNaNnew DatevaluegetTime tsuigettable3 table tablestatusrows value 19851026 text format19851026 value 20151021 text format20151026 value 19551112 text format19551112 editablefunction oneditri ci value ifvalidvalue consolelogSend to backend value tablecellri ci value value text formatvalue else var message Please use the format YYYYMMDD tableinvalidri ci message function formatvalue return new DatevaluetoDateString function validvalue return isNaNnew DatevaluegetTime tsuigettable3 table tablestatusrows value 19851026 text format19851026 value 20151021 text format20151026 value 19551112 text format19551112 editablefunction oneditri ci value ifvalidvalue consolelogSend to backend value tablecellri ci value value text formatvalue else var message Please use the format YYYYMMDD tableinvalidri ci message When the cell is eventually updated it automatically becomes valid Lets talk more about the difference between text and value in the example above Text versus value It doesnt always matter but its important to note that we edit the value while we show the text Heres another example to illustrate the difference tsuigettable4 table tablerows value 1000 text 100000 value 2000 text 200000 value 3000 text 300000 editable tsuigettable4 table tablerows value 1000 text 100000 value 2000 text 200000 value 3000 text 300000 editable This way we can edit validate and persist the data in a uniform format in this case JavaScript numbers while displaying a regionalized or otherwise customized format We can exploit this creatively by editing a document ID and showing the document title for example Remember to update verbosely tablecellrowindex cellindex text 400000 value 4000 because otherwise the text becomes identical to the value Also note that the editable callback will always serve the value as a string so it may be nescessary to convert it to a number Heres the more complete example function formatn return ntoFixed2replaceBd3dg tsuigettable5 table tablerows value 1000 text format1000 value 2000 text format2000 value 3000 text format1000 editablefunctionri ci value value Numbervalue ifisNaNvalue tableinvalidri ci else tablecellri ci value value text formatvalue function formatn return ntoFixed2replaceBd3dg tsuigettable5 table tablerows value 1000 text format1000 value 2000 text format2000 value 3000 text format1000 editablefunctionri ci value value Numbervalue ifisNaNvalue tableinvalidri ci else tablecellri ci value value text formatvalue Heres an overview of the editing related features API for knowing when something is invalid everything is valid How to visually differentiate editable versus noneditable cells windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Extras","href":"components/table/extras.html","content":"Table Extras function getbuttonlabel name value return item Button type tssecondary tsmicro label label name name value value function getswitchname value checked return item Switch name name value value checked checked function geticontype color return item Icon type type color color black function getimagesrc width height return item Image src src width width 100 height height 100 background true function getuserimagename src return item UserImage name name src src tsdoxtabs Table extras Table cells can be declared via JSON using verbose syntax But we can use a different JSON syntax to declare cells with special content The Table will generate components based on the value of the item property and this can be one of the following Button Icon Image Switch UserImage Button This function will return the JSON to generate a Button in the Table function getbuttonlabel name value return item Button type tssecondary tsmicro label label name name value value To conserve browser memory in very large Tables the onclick callback is not supported But you can intercept the Button click via the name and value property you just need to assign the onbutton method to the Table tsuigettable1 table tablerows Apple getbuttonBuy this Apple buy 123 Orange getbuttonBuy that Orange buy 456 Banana getbuttonBuy the Banana buy 789 tableonbutton functionname value rowindex cellindex ifname buy tsuiNotificationsuccessProduct value ordered tablecellrowindex cellindex getbuttonCancel order tsuigettable1 table tablerows Apple getbuttonBuy this Apple buy 123 Orange getbuttonBuy that Orange buy 456 Banana getbuttonBuy the Banana buy 789 tableonbutton functionname value rowindex cellindex ifname buy tsuiNotificationsuccessProduct value ordered tablecellrowindex cellindex getbuttonCancel order The Button value can be anything from strings and numbers and booleans to objects and arrays if that helps Just dont assign any functions because those will be ignored The value also doubles as a sorting criteria of the column is sortable so bear that in mind Here are the configurable properties of the ButtonModel Icon This function returns the JSON to generate an icon function geticontype color black return item Icon type type color color The type configures the icon classname and the optional color property can be one of black medium red green blue and purple tsuigettable3 table tablerows geticontsiconsales geticontsiconcancel medium geticontsiconerror red geticontsiconaccept green geticontsiconinfo blue geticontsiconfavorites purple tsuigettable3 table tablerows geticontsiconsales geticontsiconcancel medium geticontsiconerror red geticontsiconaccept green geticontsiconinfo blue geticontsiconfavorites purple Here are the configurable properties of the IconModel This interface may change as we upgrade to SVG icons Image This function returns the JSON to generate an Image function getimagesrc width height return item Image src src width width 100 height height 100 Note that the width and height properties are mandatory for us to fix the dimensions of the image even before it is loaded This will prevent the page from jumping around tsuigettable4 table tablerows getimageassetsimage1jpg getimageassetsimage2jpg getimageassetsimage3jpg getimageassetsimage4jpg tsuigettable4 table tablerows getimageassetsimage1jpg getimageassetsimage2jpg getimageassetsimage3jpg getimageassetsimage4jpg We can also declare a boolean property background in the JSON If set to true the image will be rendered as a backgroundimage to unlock further processing via CSS for example via the backgroundsize property Here are the configurable properties Switch This function returns the JSON to generate a Switch function getswitchname value checked return item Switch name name value value checked checked The Switch is the checkbox that looks like some kind of switch tsuigettable2 table tablerows Spam mails getswitchtoggle 123 true Prank calls getswitchtoggle 456 true House visits getswitchtoggle 789 false tableonswitch functionname value checked rowindex cellindex ifname toggle var status checked enabled disabled tsuiNotificationsuccessService value status tsuigettable2 table tablerows Spam mails getswitchtoggle 123 true Prank calls getswitchtoggle 456 true House visits getswitchtoggle 789 false tableonswitch functionname value checked rowindex cellindex ifname toggle var status checked enabled disabled tsuiNotificationsuccessService value status TODO We could need a layout feature to fix the width of the switch column Here are the configurable properties of the SwitchModel UserImage This function returns the JSON to generate a UserImage function getuserimagename src return item UserImage name name src src If you like you can also specify a size to adjust the width and height of the image tsuigettable5 table tablerows getuserimageJim Bob Johnson assetsjimpng getuserimageKarl Benson getuserimageMarshall Garrett getuserimageKelvin Castro tsuigettable5 table tablerows getuserimageJim Bob Johnson assetsjimpng getuserimageKarl Benson getuserimageMarshall Garrett getuserimageKelvin Castro Here are the properties of the UserImage windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Filter","href":"components/table/filtering.html","content":"Table Filter tsdoxtabs Filtering the columns The table doesnt really know anything about filtering but it does support a button which can be assigned an icon and an onclick method Perhaps you can use this to create your own filtering UI in an Aside or something var table tsuigettable1 var popup tsuiNotification tablecols label Hello type tsnumber button icon tsiconaddfilter onclick function thisicon tsicondelete popupsuccessClicked var table tsuigettable1 var popup tsuiNotification tablecols label Hello type tsnumber button icon tsiconaddfilter onclick function thisicon tsicondelete popupsuccessClicked You can change the icon and the onclick method as often as you like var table tsuigettable1 var popup tsuiNotification var mycol tablecols0 mycolbuttonicon tsiconview mycolbuttononclick function popupsuccessClicked again var table tsuigettable1 var popup tsuiNotification var mycol tablecols0 mycolbuttonicon tsiconview mycolbuttononclick function popupsuccessClicked again When you implement filtering you can either build the rows from scratch or update the visible property of the existing row like in this example var table tsuigettable2 var popup tsuiNotification var isodd false tablerows1 2 3 4 5 6 7cols label All numbers type tsnumber button icon tsiconaddfilter info Show odd rows onclick function isodd isodd thisicon isodd tsicondelete tsiconaddfilter thisinfo isodd Show all rows Show odd rows tablecols0label isodd Odd numbers All numbers var newRows tablerowsmapfunction row i rowvisible isodd i 2 0 true return row tablerowsnewRows var table tsuigettable2 var popup tsuiNotification var isodd false tablerows1 2 3 4 5 6 7cols label All numbers type tsnumber button icon tsiconaddfilter info Show odd rows onclick function isodd isodd thisicon isodd tsicondelete tsiconaddfilter thisinfo isodd Show all rows Show odd rows tablecols0label isodd Odd numbers All numbers var newRows tablerowsmapfunction row i rowvisible isodd i 2 0 true return row tablerowsnewRows The button gets hidden by the search because it doesnt look right to have both Let us know if that becomes a problem windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Formatting","href":"components/table/formatting.html","content":"Table Formatting tsdoxtabs Formatting the cells The Table supports a simple subset of Markdown out of the box tsuigettable1 table tablerows Italic text Strong text Strike text monotype text tsuigettable1 table tablerows Italic text Strong text Strike text monotype text Use double newline n to render multiple paragraphs We also have UL lists tsuigettable2 table tablerows Para 1nnPara 2nnPara 3 Item 1n Item 2n Item 3 tsuigettable2 table tablerows Para 1nnPara 2nnPara 3 Item 1n Item 2n Item 3 To support links youll first need to call the linkable method just to remind yourself that you may now become exposed to phishing attacks tsuigettable3 table tablelinkable tablerows Please visit Tradeshifthttpwwwtradeshiftcom tsuigettable3 table tablelinkable tablerows Please visit Tradeshifthttpwwwtradeshiftcom When you link to something make sure to include the protocol https and note that links should not be used for internal navigation at least not just yet If you need to support links only in specific column you can set the linkable property to true in a columns config tsuigettable4 table tablecols label Disabled link column label Not disabled link column linkable true tablerows Please visit Tradeshifthttpwwwtradeshiftcom Please visit Tradeshifthttpwwwtradeshiftcom tsuigettable4 table tablecols label Disabled link column label Not disabled link column linkable true tablerows Please visit Tradeshifthttpwwwtradeshiftcom Please visit Tradeshifthttpwwwtradeshiftcom If the link should work more like a button you can intecept the click action with the onlink callback In this case you can use any string as the href var popup tsuiNotification tsuigettable5 table tablelinkablefunction onlinkanystring popupsuccessanystring rows Choose link oneONE or twoTWO or threeTHREE var popup tsuiNotification tsuigettable5 table tablelinkablefunction onlinkanystring popupsuccessanystring rows Choose link oneONE or twoTWO or threeTHREE You can disable the Markdown in the table by call the disableMarkdown method To enable it again you can call the enableMarkdown method tsuigettable6 functiontable tabledisableMarkdown tablerows Italic text Strong text Strike text monotype text tsuigettable6 functiontable tabledisableMarkdown tablerows Italic text Strong text Strike text monotype text You can disable the Markdown in specific column by columns property markdownFormatting tsuigettable7 functiontable tablecols label Disabled markdown column markdownFormatting false linkable true label Not disabled markdown column tablerows Italic text Italic text Strong text Strong text Strike text Strike text monotype text monotype text tsuigettable7 functiontable tablecols label Disabled markdown column markdownFormatting false linkable true label Not disabled markdown column tablerows Italic text Italic text Strong text Strong text Strike text Strike text monotype text monotype text windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,null,null,{"title":"Table","href":"components/table/index.html","content":"Table Contrary to common belief the datatsTable attribute should not be assigned to a table element because the component will create that table itself Instead we can assign it to a div All features are controlled through an API as outlined on the following pages If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Layout","href":"components/table/layouting.html","content":"Table Layout tsdoxtabs Layout the columns Columns sizes can flex relative to other columns These last two columns are twice the width of the first column which is assumed a flex value of 1 tsuigetexample4 table tablecols label Level type tsnumber label Character flex 2 label Alignment flex 2 tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil tsuigetexample4 table tablecols label Level type tsnumber label Character flex 2 label Alignment flex 2 tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil If the Table is small like in the example above you can still run into truncated text If this becomes a problem you can either wrap the column cells tsuigetexample5 table tablecols label Level type tsnumber label Character flex 2 wrap true label Alignment flex 2 tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil tsuigetexample5 table tablecols label Level type tsnumber label Character flex 2 wrap true label Alignment flex 2 tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil or you can assign it a minwidth in pixels If the table is big enough the flex values still count so we will leave them in noting that the first column is still assumed flex1 tsuigetexample6 table tablecols label Level type tsnumber minwidth 55 label Character flex 2 minwidth 300 label Alignment flex 2 tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil tsuigetexample6 table tablecols label Level type tsnumber minwidth 55 label Character flex 2 minwidth 300 label Alignment flex 2 tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil To ensure that the Table can work on a small screen or even a mobile phone you should strongly consider specifying a minwidth on all the columns On small screens this may result in a horizontal scrollbar but we dont consider this a problem for the Table A suggested feature creep would be to let the user control column visibility via the config button so that he can compare two columns without scrolling back and forth Finally theres an option to assign a fixed width to one or more columns This will override any flex It doesnt work if you assign it to all the columns so please dont do that tsuigetexample7 table tablecols label Level type tsnumber width 55 label Character minwidth 300 label Alignment tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil tsuigetexample7 table tablecols label Level type tsnumber width 55 label Character minwidth 300 label Alignment tablerows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table explode and optimize","href":"components/table/maximize.html","content":"Table explode and optimize You can use expand simply maximizes the layout You can check the full screen table here Optimize can be used to limit the number of rows shown either automatically or manually based on the information provided via the onresize callback tsuigetmytable table table explode optimize cols label Level type tsnumber label Character flex 2 label Alignment flex 2 rows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil tsuigetmytable table table explode optimize cols label Level type tsnumber label Character flex 2 label Alignment flex 2 rows 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil 21 Paladin Knight Lawful Good 13 Barbarian Queen Neutral Evil 11 Global Senior Vice President of Sales Chaotic Evil If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Paging","href":"components/table/paging.html","content":"Table Paging tsdoxtabs Paging the rows You can limit the number of visible rows with the max method If the table contains more rows a Pager will be created An equivalent method size also fixes the height of the Table so that the pager footer never jump up and down getJSONassetsrowdatajson functionjson tsuigetexample9 table tablecols label ID type tsnumber label Name flex 2 label Price type tsnumber tablerowsjsonmax5 getJSONassetsrowdatajson functionjson tsuigetexample9 table tablecols label ID type tsnumber label Name flex 2 label Price type tsnumber tablerowsjsonmax5 You can track the page with the onpage method if for some reason you need that tableonpage functionindex consolelogindex called whenever the user changes page You can set the max and total method to show pager status in the footer getJSONassetsrowdatajson functionjson tsuigetexample10 table tablecols label ID type tsnumber label Name flex 2 label Price type tsnumber tablerowsjsonmax5totaljsonlength getJSONassetsrowdatajson functionjson tsuigetexample10 table tablecols label ID type tsnumber label Name flex 2 label Price type tsnumber tablerowsjsonmax5totaljsonlength If you would like to manage paging yourself because you have a billion products and dont want to fetch them all at once you can create your own pager var popup tsuiNotification tsuigetbigdatatable table tablemax10cols label ID type tsnumber label Name flex 2 label Price type tsnumber tablepager pages 5 page 0 onselect loadpage function loadpageindex var url assetspage index json getJSONurl functionjson var n jsonlength popupsuccessLoaded n rows tablerowsjson loadpage0 var popup tsuiNotification tsuigetbigdatatable table tablemax10cols label ID type tsnumber label Name flex 2 label Price type tsnumber tablepager pages 5 page 0 onselect loadpage function loadpageindex var url assetspage index json getJSONurl functionjson var n jsonlength popupsuccessLoaded n rows tablerowsjson loadpage0 If you need to update the index later on for example to support history navigation it is recommended that you change the page property of the existing Pager instead of initializing a whole new Pager You can just call the same method without arguments mytablepagerpage 23 If you would like to manage paging by yourself and show page status you need to set total and number which are the total of items in the table and the number of items of a page var popup tsuiNotification tsuigetpagestatustable table tablemax10cols label ID type tsnumber label Name flex 2 label Price type tsnumber tablepager pages 5 page 0 number 10 total 50 onselect loadpage function loadpageindex var url assetspage index json getJSONurl functionjson var n jsonlength popupsuccessLoaded n rows tablerowsjson loadpage0 var popup tsuiNotification tsuigetpagestatustable table tablemax10cols label ID type tsnumber label Name flex 2 label Price type tsnumber tablepager pages 5 page 0 number 10 total 50 onselect loadpage function loadpageindex var url assetspage index json getJSONurl functionjson var n jsonlength popupsuccessLoaded n rows tablerowsjson loadpage0 windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Search","href":"components/table/searching.html","content":"Table Search tsdoxtabs Searching the columns You can setup a SearchModel for any column via the search property We ship the Table with a builtin search mechanism but youll still need to call it The Table search method takes a column index and the string to search for getJSONassetsrowdatajson functionjson tsuigetexample10 table tablerowsjsonmax4cols label ID type tsnumber search tip Search product ID onidle functionvalue tablesearch0 value label Product Name flex 1 search tip Search product names onidle functionvalue tablesearch1 value label Price type tsnumber width 60 getJSONassetsrowdatajson functionjson tsuigetexample10 table tablerowsjsonmax4cols label ID type tsnumber search tip Search product ID onidle functionvalue tablesearch0 value label Product Name flex 1 search tip Search product names onidle functionvalue tablesearch1 value label Price type tsnumber width 60 The search algorithm is extremely primitive and to some degree it always will be at least until the Table can be loaded separately from other components because file size You can focus the search field if you like either by setting the focused property to true in the JSON or by calling the focus method sometime later on var table tsuigetexample10 tablecols1searchfocus var table tsuigetexample10 tablecols1searchfocus Here an overview of the properties and methods of the Search model windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Select","href":"components/table/selecting.html","content":"Table Select tsdoxtabs Selecting the rows You can mark rows as selectable with the method of that name The callback fires whenever one or more rows changes state The arguments selected and unselected arguments are both arraysofrowindexes var table tsuigettable1 var popup tsuiNotification tablerows cells A D G selected true cells B E H cells C F I tableselectablefunction debugselected unselected popupsuccess JSONstringifyselected JSONstringifyunselected join var table tsuigettable1 var popup tsuiNotification tablerows cells A D G selected true cells B E H cells C F I tableselectablefunction debugselected unselected popupsuccess JSONstringifyselected JSONstringifyunselected join You can mark individual rows as unselectable with the selectable property var table tsuigettable5 var popup tsuiNotification tablerows cells A D G cells B E H selectable false cells C F I tableselectablefunction debugselected unselected popupsuccess JSONstringifyselected JSONstringifyunselected join var table tsuigettable5 var popup tsuiNotification tablerows cells A D G cells B E H selectable false cells C F I tableselectablefunction debugselected unselected popupsuccess JSONstringifyselected JSONstringifyunselected join You can control selection using the methods select unselect and toggle The methods take one or more indexes or an array of indexes as arguments var table tsuigettable3 tableselectablerows A E I B F J C G K D H L select0 1toggle2 3 var table tsuigettable3 tableselectablerows A E I B F J C G K D H L select0 1toggle2 3 You can also omit the argument to select unselect or toggle everything tsuigettable3toggle tsuigettable3toggle You can retrieve the selected indexes as an array with the selected method var table tsuigettable3 var array tableselected var popup tsuiNotification popupsuccessJSONstringifyarray var table tsuigettable3 var array tableselected var popup tsuiNotification popupsuccessJSONstringifyarray You can also confirm selection by passing one or more indexes or an array var table tsuigettable3 var popup tsuiNotification iftableselected0 1 2 3 popupsuccessAll selected else popupwarningYou must select them all var table tsuigettable3 var popup tsuiNotification iftableselected0 1 2 3 popupsuccessAll selected else popupwarningYou must select them all If you add columns to the table youll get a selection menu in the header var table tsuigettable2 tableselectable tablecolsOne Two Three tablerows cells A D G cells B E H cells C F I var table tsuigettable2 tableselectable tablecolsOne Two Three tablerows cells A D G cells B E H cells C F I The menu selects or deselects all visible rows If there are multiple pages in the table youll be presented with the opportunity to select all pages getJSONassetsrowdatajson functionjson var table tsuigettable4selectable tablecolsID Name Pricerowsjsonmax5 getJSONassetsrowdatajson functionjson var table tsuigettable4selectable tablecolsID Name Pricerowsjsonmax5 If you are loading the table data incrementally so you manage paging yourself you might like to know when all or none is selected via the menu The Table supports two additional callbacks that can be assigned via selectable tableselectableonselect onselectall onunselectall tableselectableonselect onselectall onunselectall You can also assign these methods directly tableonselect functionselected unselected tableonselectall function consolelogAll tableonunselectall function consolelogNone tableonselect functionselected unselected tableonselectall function consolelogAll tableonunselectall function consolelogNone Heres a summary of the methods that deal with row selection windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Sort","href":"components/table/sorting.html","content":"Table Sort tsdoxtabs Sorting the columns You can make the Table sortable with a callback that triggers whenever a column is clicked We ship the Table with a builtin sort mechanism but youll still need to call it The sort method takes a column index and a direction If you set sortable to false for one column that column is unsortable tsuigetexample6 table tablecols Animal label Price type tsnumber sortablefalse rows Donkey 700 Baboon 1500 Coyote 250 Albatross 50 sortablefunctionindex ascending tablesortindex ascending tablesort0 true tsuigetexample6 table tablecols Animal label Price type tsnumber sortablefalse rows Donkey 700 Baboon 1500 Coyote 250 Albatross 50 sortablefunctionindex ascending tablesortindex ascending tablesort0 true The index is the column index and the ascending argument alternates whenever the same col is clicked twice If you manage your own sorting routine you can control the appearance of the column using selected and ascending tsuigetexample12 table tablecols label Example selected true ascending false setIntervalfunction var col tablecols0 ifcolselected colselected colascending colascending 1000 tsuigetexample12 table tablecols label Example selected true ascending false setIntervalfunction var col tablecols0 ifcolselected colselected colascending colascending 1000 Importantly note that the cell values must all be declared as numbers in order to sort numerically You can declare a hidden value while showing a human readable text using verbose syntax tablerows value 1 text One value 2 text Two value 3 text Three Custom sort Standard sorting only deals with numbers and strings If you need some kind of more advanced sorting for example if the value contains arrays or objects you can implement custom sort per column via the sort method tsuigetexample7 table tablecols label Fruit sort functionval1 val2 ascending sort random return Mathrandom 05 1 1 rowsBanana Apple Grape Pear sortablefunctionindex ascending tablesortindex ascending tsuigetexample7 table tablecols label Fruit sort functionval1 val2 ascending sort random return Mathrandom 05 1 1 rowsBanana Apple Grape Pear sortablefunctionindex ascending tablesortindex ascending windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Sort","href":"components/table/status.html","content":"Table Sort tsdoxtabs Status messages We can show a message in the statusbar The message could be something like Showing 1020 out of 123 products or 23 products selected tsuigettable1 table tablestatusThis is the message tablerows 1 4 7 2 5 8 3 6 9 tsuigettable1 table tablestatusThis is the message tablerows 1 4 7 2 5 8 3 6 9 TODO Note about markdown in the status message windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Table Styling","href":"components/table/styling.html","content":"Table Styling mytable tholdprice backgroundcolor rgb250 200 200 mytable tdoldprice backgroundcolor rgb255 225 225 mytable thnewprice backgroundcolor rgb200 250 200 mytable tdnewprice backgroundcolor rgb225 255 225 example2 tdpalered backgroundcolor rgb255 225 225 example2 tdpalegreen backgroundcolor rgb225 255 225 example2 tdpaleblue backgroundcolor rgb225 225 255 example3 tdveryspecial backgroundcolor rgb225 225 255 tsdoxtabs Styling the table The column type property works as a classname for both headers and cells tsuigetmytable table tablecols label Product label Regular Price type tsnumber oldprice label Sale price type tsnumber newprice tablerows Apple 130 100 Orange 075 050 Banana 200 125 tsuigetmytable table tablecols label Product label Regular Price type tsnumber oldprice label Sale price type tsnumber newprice tablerows Apple 130 100 Orange 075 050 Banana 200 125 This means that you can style the columns using CSS that looks like this mytable th oldprice background red newprice background green td oldprice background pink newprice background lime mytable th oldprice background red newprice background green td oldprice background pink newprice background lime A similar property works for the rows if you switch to verbose syntax You will of course need to defined these classnames somewhere in your CSS file tsuigetexample2 table tablerows cells A D G type palered cells B E H type palegreen cells C F I type paleblue tsuigetexample2 table tablerows cells A D G type palered cells B E H type palegreen cells C F I type paleblue Finally the individual table cells can be styled with the type property Again you will have to switch to verbose syntax in order to declare this property tsuigetexample3 table tablerows cells text Normal text Normal text Special type veryspecial tsuigetexample3 table tablerows cells text Normal text Normal text Special type veryspecial windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"components/table/tabs.html","content":""},{"title":"","href":"components/tabs.html","content":""},null,null,{"title":"Tags","href":"components/tags/gallery.html","content":"tsuiready tsuigettagclickable tag tagonclick tsuiNotificationsuccessDo you see tsuiready tsuigettagdeletable tag tagondelete tsuiNotificationinfoTag disintegrated tsuiready tsuigettagdeleteclick tag tagonclick tsuiNotificationinfoDont poke the beholder tagondelete tsuiNotificationwarningI hope you know what youre doing tsuiready tsuigettaglich tag tagdata new Map Lich Acererak tsuigettagbeholder tag tagdata new Map Beholder Xanathar If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"JSON","href":"components/tags/json.html","content":"Tags JSON API The examples shown here are the exact same ones as under the Tag tab just using a slightly different notation When using the JSON API you create the FIGURE element with datatsTag use tsuiget get a reference to it and call render to pass it a new model Valueonly tsuigettagvalonly tag tagrender data new Map undefined Roll a d20 tsuigettagvalonly tag tagrender data new Map undefined Roll a d20 KeyValue tsuigettagkeyval tag tagrender data new Map Area of Origin The Sword Coast tsuigettagkeyval tag tagrender data new Map Area of Origin The Sword Coast Key with multiple values tsuigettagkeyvals tag tagrender data new Map The Teeming Hive of Evil Skullport Port of Shadows tsuigettagkeyvals tag tagrender data new Map The Teeming Hive of Evil Skullport Port of Shadows Multiple keys with single value tsuigettagkeysval tag tagrender data new Map Facial Tentacles Potent Psionics Mind Flayer tsuigettagkeysval tag tagrender data new Map Facial Tentacles Potent Psionics Mind Flayer Multiple keys with multiple values tsuigettagkeysvals tag tagrender data new Map Magicuser Undead Lich Vampire tsuigettagkeysvals tag tagrender data new Map Magicuser Undead Lich Vampire Multiple sets of keyvalues tsuigettagmultikeysvals tag tagrender data new Map Acererak Alignment Lawful Evil Hobbies Building Dungeons tsuigettagmultikeysvals tag tagrender data new Map Acererak Alignment Lawful Evil Hobbies Building Dungeons Clickable look click handler tsuigettagclickable tag tagrender onclick tsuiNotificationsuccessDo you see data new Map Vision Blindsight Truesight Darkvision tsuigettagclickable tag tagrender onclick tsuiNotificationsuccessDo you see data new Map Vision Blindsight Truesight Darkvision tsuigettagclickableownhandler tag tagrender clickable true data new Map Vision Blindsight Truesight Darkvision tagelementaddEventListenerclick e tsuiNotificationsuccessDo you see tsuigettagclickableownhandler tag tagrender clickable true data new Map Vision Blindsight Truesight Darkvision tagelementaddEventListenerclick e tsuiNotificationsuccessDo you see Delete button delete handler tsuigettagdeletable tag tagrender ondelete tsuiNotificationinfoTag disintegrated data new Map Languages Sylvan Common Draconic Giant tsuigettagdeletable tag tagrender ondelete tsuiNotificationinfoTag disintegrated data new Map Languages Sylvan Common Draconic Giant tsuigettagdeletableownhandler tag tagrender deletable true data new Map Languages Sylvan Common Draconic Giant tagelementaddEventListenerclick e if etargetlocalName del tsuiNotificationinfoTag disintegrated tsuigettagdeletableownhandler tag tagrender deletable true data new Map Languages Sylvan Common Draconic Giant tagelementaddEventListenerclick e if etargetlocalName del tsuiNotificationinfoTag disintegrated Click delete tsuigettagdeleteclick tag tagrender onclick tsuiNotificationinfoDont poke the beholder ondelete tsuiNotificationwarningI hope you know what youre doing data new Map Beholder Xanathar tsuigettagdeleteclick tag tagrender onclick tsuiNotificationinfoDont poke the beholder ondelete tsuiNotificationwarningI hope you know what youre doing data new Map Beholder Xanathar tsuigettagdeleteclickownhandler tag tagrender clickable true deletable true data new Map Beholder Xanathar tagelementaddEventListenerclick e if etargetlocalName del This is an important line tsuiNotificationwarningI hope you know what youre doing else tsuiNotificationinfoDont poke the beholder tsuigettagdeleteclickownhandler tag tagrender clickable true deletable true data new Map Beholder Xanathar tagelementaddEventListenerclick e if etargetlocalName del This is an important line tsuiNotificationwarningI hope you know what youre doing else tsuiNotificationinfoDont poke the beholder Locked look tsuigettagoptlock tag tagrender locked true data new Map Dungeon Hidden Shrine of Tamoachan tsuigettagoptlock tag tagrender locked true data new Map Dungeon Hidden Shrine of Tamoachan List of Tags tsuigettagslich tag tagrender data new Map Lich Acererak tsuigettagsbeholder tag tagrender data new Map Beholder Xanathar tsuigettagslich tag tagrender data new Map Lich Acererak tsuigettagsbeholder tag tagrender data new Map Beholder Xanathar List of Tags maximized This API is under construction If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Label","href":"components/tags/label.html","content":"Label Labels represent a noninteractive keyword that help label organize and categorize objects Labels are simple tags with a special type that will give them some extra flair to stand out in the crowd Colors If your label is especially dangerous wed recommend using the tsdanger datatstype const data tsuiencode null tsdanger const data tsuiencode null tsdanger For a somewhat less life threatening situation there is the good old tswaning datatstype const data tsuiencode null tswarning const data tsuiencode null tswarning There are those situations when everything is just going so well so we made the tssuccess datatstype for that special occasion const data tsuiencode null tssuccess const data tsuiencode null tssuccess It wouldnt be a Tradeshift UI Component if there wasnt a tsblue datatstype const data tsuiencode null tsblue const data tsuiencode null tsblue If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Tags","href":"components/tags/old.html","content":"Tags Tags represent a set of interactive keywords that help to label organize and categorize objects Tag Markup When building the HTML for the tag yourself this is how it should look Magicuser Human Merlin Rincewind Beholder Xanathar Acererak Nonmagical characters Magicuser Human Merlin Rincewind Beholder Xanathar Acererak Nonmagical characters This is how the code from above will look in action Magicuser Human Merlin Rincewind Beholder Xanathar Acererak Nonmagical characters of course its quite a big tag normally youd present it like this Magicuser Human Merlin Rincewind Beholder Xanathar Acererak Nonmagical characters Keyonly If you want to show an all uppercased key only use a single DT Dragons Dragons Dragons Icononly If you only want to show a single icon use a single FIGCAPTION This also works with the UserImage just make sure to use a size of 22x22 pixels Valueonly If you fancy a simpler approach with lighter font weights and lowercase characters use a single DD Roll a d20 Roll a d20 Roll a d20 KeyValue If you need a key with a value attached to it use a DT and a DD Area of Origin The Sword Coast Area of Origin The Sword Coast Area of Origin The Sword Coast Key with multiple values You can have a single key with multiple values just keep adding DD elements The Teeming Hive of Evil Skullport Port of Shadows The Teeming Hive of Evil Skullport Port of Shadows The Teeming Hive of Evil Skullport Port of Shadows Multiple keys with single value Of course you could flip it around and use several keys for a single value Facial Tentacles Potent Psionics Mind Flayer Facial Tentacles Potent Psionics Mind Flayer Facial Tentacles Potent Psionics Mind Flayer Multiple keys with multiple values It comes naturally that you can have several keys together with several values Magicuser Undead Lich Vampire Magicuser Undead Lich Vampire Magicuser Undead Lich Vampire Multiple sets of keyvalues Due to the high intensity of the CSS code we dont support adding commas colons and dashes to a DL with several sets of DT and DD elements without separation If that is what youd like to do please choose a method from below If you want to have several keyvalue sets in a single tag you have two options You can follow the W3C spec and just use separate DL elements Acererak Hobbies Building Dungeons Alignment Lawful Evil Acererak Hobbies Building Dungeons Alignment Lawful Evil Acererak Hobbies Building Dungeons Alignment Lawful Evil Or you can follow the WHATWG spec and place DIV elements around each set Acererak Hobbies Building Dungeons Alignment Lawful Evil Acererak Hobbies Building Dungeons Alignment Lawful Evil Acererak Hobbies Building Dungeons Alignment Lawful Evil Optional icon Just like above you can add an icon next to any combinaton of keys and values Dungeon Tomb of Horrors Dungeon Tomb of Horrors Dungeon Tomb of Horrors Optional clickability If you want to make your tag look like it can be clicked add the tstagclickable class to the FIGURE Dont forget to set some sort of click handler on the FIGURE element Vision Blindsight Truesight Darkvision Vision Blindsight Truesight Darkvision Vision Blindsight Truesight Darkvision Optional delete button If you want to be able to remove a tag add a DEL element as the last child When the DEL element is clicked the tag will be removed from the DOM after a setTimeout Dont try to read anything through the DOM at this point Languages Sylvan Common Draconic Giant Languages Sylvan Common Draconic Giant Languages Sylvan Common Draconic Giant Optional locked look If you want to lock down a tag use the tstaglocked class on the FIGURE A locked tag will have its DEL button hidden Dungeon Hidden Shrine of Tamoachan Dungeon Hidden Shrine of Tamoachan Dungeon Hidden Shrine of Tamoachan List of Tags Whenever you put tags one after another they will be displayed in an inline fashion Lich Acererak Beholder Xanathar Lich Acererak Beholder Xanathar Lich Acererak Beholder Xanathar List of Tags maximized If you would rather have them stack like block elements place them inside a UL element with datatsTags Lich Acererak Beholder Xanathar Lich Acererak Beholder Xanathar Lich Acererak Beholder Xanathar If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"components/tags/tabs.html","content":""},{"title":"Tag","href":"components/tags/tag.html","content":"Tag Tags represent a set of interactive keywords that help to label organize and categorize objects This is the API of the Tag component all HTML attributes and JS properties correspond to the table below you can use them to customize how your tag looks Passing complex data via HTML attributes Any properties that arent Functions can be given value via HTML attributes simply by writing datatspropertyNameencodedValue When passing complex data structures as HTML attributes you need to JSONstringify the value and then pass it to encodeURIComponent to get a string that can be safely used as an attribute We supply tsuiencode as a helper function that does just this Prepare the data that we want to pass to the component const dataToBeEncoded thisDataIs complex because it is not simple Encode it using tsuiencode const encodedData tsuiencode dataToBeEncoded Of couse you could just use encodeURIComponentJSONstringify which could be especially useful during serverside rendering assert encodedData encodeURIComponentJSONstringifydataToBeEncoded encodedData 7B22thisDataIs223A22complex222C22because223A5B22it222C22is222C22not222C22simple225D7D Insert the value as an attribute of the component Youd probably handle this with React Angular or some other clientside framework documentwrite Prepare the data that we want to pass to the component const dataToBeEncoded thisDataIs complex because it is not simple Encode it using tsuiencode const encodedData tsuiencode dataToBeEncoded Of couse you could just use encodeURIComponentJSONstringify which could be especially useful during serverside rendering assert encodedData encodeURIComponentJSONstringifydataToBeEncoded encodedData 7B22thisDataIs223A22complex222C22because223A5B22it222C22is222C22not222C22simple225D7D Insert the value as an attribute of the component Youd probably handle this with React Angular or some other clientside framework documentwrite Now that you know how to pass complex data to components its time to go through the different kinds of things the tag can do Valueonly Any nonstring passed to data will be converted into a Map using nonunique keys will result in unreliable behavior Values are simple descriptors with lighter font weights and lowercase characters To render use a Maplike Array with only a value and a falsy key const data tsuiencode null Roll a d20 const data tsuiencode null Roll a d20 Its also possible to set data and all other attributes later through the JS API tsuiready tsuigettagroll20 tag tagdata new Map null Roll a d20 tsuiready tsuigettagroll20 tag tagdata new Map null Roll a d20 tsuiready tsuigettagroll20 tag tagdata new Map null Roll a d20 KeyValue If you need a key with a value attached to it use the Maplike Array structure like before but with a key and a value this time const data tsuiencode Area of Origin The Sword Coast const data tsuiencode Area of Origin The Sword Coast Key with multiple values You can have a single key with multiple values just make the value part of the Maplike Array an Array const data tsuiencode The Teeming Hive of Evil Skullport Port of Shadows const data tsuiencode The Teeming Hive of Evil Skullport Port of Shadows Multiple keys with single value Of course you could flip it around and use several keys for a single value const data tsuiencode Facial Tentacles Potent Psionics Mind Flayer const data tsuiencode Facial Tentacles Potent Psionics Mind Flayer Multiple keys with multiple values It comes naturally that you can have several keys together with several values const data tsuiencode Magicuser Undead Lich Vampire const data tsuiencode Magicuser Undead Lich Vampire Multiple sets of keyvalues If you want to have several keyvalue sets in a single tag just have more entries in your Maplike Array const data tsuiencode Acererak Alignment Lawful Evil Hobbies Building Dungeons const data tsuiencode Acererak Alignment Lawful Evil Hobbies Building Dungeons Clickable look click handler If you want to make your tag look like it can be clicked once youve initialized your tag set the onclick handler tsuiready tsuigettagclickable tag tagonclick tsuiNotificationsuccessDo you see const data tsuiencode Vision Blindsight Truesight Darkvision tsuiready tsuigettagclickable tag tagonclick tsuiNotificationsuccessDo you see const data tsuiencode Vision Blindsight Truesight Darkvision tsuiready tsuigettagclickable tag tagonclick tsuiNotificationsuccessDo you see You can use your own click handler if youd like Make sure to set datatsclickabletrue otherwise your tag wont look like its clickable tsuiready tsuigettagclickableownhandler tag tagelementaddEventListenerclick e tsuiNotificationsuccessDo you see const data tsuiencode Vision Blindsight Truesight Darkvision tsuiready tsuigettagclickableownhandler tag tagelementaddEventListenerclick e tsuiNotificationsuccessDo you see const data tsuiencode Vision Blindsight Truesight Darkvision tsuiready tsuigettagclickableownhandler tag tagelementaddEventListenerclick e tsuiNotificationsuccessDo you see Delete button delete handler If you want to be able to remove a tag once youve initialized the tag set the ondelete handler This will create a DEL element as the last child of the tag When the DEL element is clicked the tag will be removed from the DOM after a setTimeout Dont try to read anything through the DOM at this point tsuiready tsuigettagdeletable tag tagondelete tsuiNotificationinfoTag disintegrated const data tsuiencode Languages Sylvan Common Draconic Giant tsuiready tsuigettagdeletable tag tagondelete tsuiNotificationinfoTag disintegrated const data tsuiencode Languages Sylvan Common Draconic Giant tsuiready tsuigettagdeletable tag tagondelete tsuiNotificationinfoTag disintegrated Just like with click you can use your own click handler for deletion if youd like You have to remember that only react when the user clicks on the DEL element by checking for etargetlocalName tsuiready tsuigettagdeletableownhandler tag tagelementaddEventListenerclick e if etargetlocalName del tsuiNotificationinfoTag disintegrated const data tsuiencode Languages Sylvan Common Draconic Giant tsuiready tsuigettagdeletableownhandler tag tagelementaddEventListenerclick e if etargetlocalName del tsuiNotificationinfoTag disintegrated const data tsuiencode Languages Sylvan Common Draconic Giant tsuiready tsuigettagdeletableownhandler tag tagelementaddEventListenerclick e if etargetlocalName del tsuiNotificationinfoTag disintegrated Delete Remove If you want the user to confirm before you remove the tag from the DOM You need to set doremove to false first and call remove on your confirm callback tsuiready tsuigettagremove tag tagdoremove false tagondelete tsuiDialogconfirmDo you want to delete the tag onaccept function tagdoremove true tagremove tsuiNotificationsuccessTag removed oncancel function tsuiNotificationsuccessNo I do not want to delete it const data tsuiencode Languages Sylvan Common Draconic Giant tsuiready tsuigettagremove tag tagdoremove false tagondelete tsuiDialogconfirmDo you want to delete the tag onaccept function tagdoremove true tagremove tsuiNotificationsuccessTag removed oncancel function tsuiNotificationsuccessNo I do not want to delete it const data tsuiencode Languages Sylvan Common Draconic Giant tsuiready tsuigettagremove tag tagdoremove false tagondelete tsuiDialogconfirmDo you want to delete the tag onaccept function tagdoremove true tagremove tsuiNotificationsuccessTag removed oncancel function tsuiNotificationsuccessNo I do not want to delete it Click delete In case you want to handle clicks and have a delete button on the same tag you can do that the same way as above tsuiready tsuigettagdeleteclick tag tagonclick tsuiNotificationinfoDont poke the beholder tagondelete tsuiNotificationwarningI hope you know what youre doing const data tsuiencode Beholder Xanathar tsuiready tsuigettagdeleteclick tag tagonclick tsuiNotificationinfoDont poke the beholder tagondelete tsuiNotificationwarningI hope you know what youre doing const data tsuiencode Beholder Xanathar tsuiready tsuigettagdeleteclick tag tagonclick tsuiNotificationinfoDont poke the beholder tagondelete tsuiNotificationwarningI hope you know what youre doing You can always handle your own clicks if thats what youre into You still have to remember that only handle the delete click when the user clicks on the DEL element by checking for etargetlocalName tsuiready tsuigettagdeleteclickownhandler tag tagelementaddEventListenerclick e if etargetlocalName del This is an important line tsuiNotificationwarningI hope you know what youre doing else tsuiNotificationinfoDont poke the beholder const data tsuiencode Beholder Xanathar tsuiready tsuigettagdeleteclickownhandler tag tagelementaddEventListenerclick e if etargetlocalName del tsuiNotificationwarningI hope you know what youre doing else tsuiNotificationinfoDont poke the beholder const data tsuiencode Beholder Xanathar tsuiready tsuigettagdeleteclickownhandler tag tagelementaddEventListenerclick e if etargetlocalName del tsuiNotificationwarningI hope you know what youre doing else tsuiNotificationinfoDont poke the beholder Locked look If you want to lock down a tag use datatslockedtrue A locked tag will have its DEL button hidden and all clickrelated styling deactivated const data tsuiencode Dungeon Hidden Shrine of Tamoachan const data tsuiencode Dungeon Hidden Shrine of Tamoachan If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Tags","href":"components/tags/tags.html","content":"Tags Group tags to unlock extra layout options Inline Tags Whenever you put tags one after another they will be displayed in an inline fashion tsuiready tsuigettaglich tag tagdata new Map Lich Acererak tsuigettagbeholder tag tagdata new Map Beholder Xanathar tsuiready tsuigettaglich tag tagdata new Map Lich Acererak tsuigettagbeholder tag tagdata new Map Beholder Xanathar tsuiready tsuigettaglich tag tagdata new Map Lich Acererak tsuigettagbeholder tag tagdata new Map Beholder Xanathar Block Tags This API is under construction If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Time","href":"components/times/index.html","content":"Time Use the Time component to show a human readable time stamp your app Assign datatsTime to a time element to initialize it as a Time If you do not trust the users device time you can set the realtime attribute to mark the current time the moment when the page renders If you set an invalid datetime it will simply show the string If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Local Time","href":"components/times/langs.html","content":"Time TODO This should go into a screenshot for the test suite edbmldeclareedbml14yR7I0asfunction edbml use strict var out edbmlout txt edbmlsafetext val edbmlsafeattr outhtml da deCH de enGB enUS en es fi fr hu id it ja ms nbNO nl no pl ptBR ptPT ro ru se svSE zhCN zhTW split forEachfunctioncode outhtml txtcode outhtml outhtml outhtml return outwrite If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"components/times/tabs.html","content":""},{"title":"ToolBar","href":"components/toolbar/index.html","content":"Hello world Assign the datatsToolBar attribute to a header or footer to initialize it as a ToolBar The datatstitle attribute works to configure an optional title ToolBars can be positioned anywhere on the page but on this page weve positioned before the Panel element in the basic layout This way it stays fixed on the top when the panel is scrolling You can try this at home using the following markup structure ToolBar buttons Add buttons to the TopBar with the buttons method This both sets and gets If you omit the argument youll get the current buttons jQuery style tsuigettoolbarbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two tsuigettoolbarbuttons label Primary type tsprimary label Secondary type tssecondary label Tertiary One label Tertiary Two You can use array methods like push pop shift unshift splice reverse and so on to manage buttons Just note that the buttons length is readonly The buttons type property works like the CSS class for a regular Button The TopBar will automatically sort all buttons from primary to tertiary If theres more than one tertiary button these will be pushed to an Aside In the mobile breakpoint even secondary buttons will be pushed to the Aside Buttons wont actually do anything unless you define the onclick method tsuigettoolbarbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks tsuigettoolbarbuttonssplice0 1 label Click me type tsprimary onclick function thislabel Thanks Fortunately you can always change what happens when a button gets clicked tsuigettoolbarbuttonsforEachbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel tsuigettoolbarbuttonsforEachbutton index buttonlabel Button index 1 buttononclick function tsuiNotificationsuccessthislabel Query buttons You can locate buttons by index in the buttons collection But since this isnt likely to match the order in which they appear on screen its easier to give the buttons an id and find them using buttonsget var buttons tsuigettoolbarbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary var buttons tsuigettoolbarbuttons buttonspush id examplebutton var button buttonsgetexamplebutton buttonlabel My Button buttontype tssecondary Hide buttons You can hide and show buttons You can also toggle visible tsuigettoolbarbuttonsforEachbutton ifbuttonvisible buttonhide else buttonshow tsuigettoolbarbuttonsforEachbutton ifbuttonvisible buttonhide else buttonshow Disable buttons You can disable and enable buttons You can also toggle disabled tsuigettoolbarbuttonsforEachbutton ifbuttondisabled buttonenable else buttondisable tsuigettoolbarbuttonsforEachbutton ifbuttondisabled buttonenable else buttondisable Busy buttons We can display a temporary progress indicator with the busy and done methods var button tsuigettoolbarbuttons0 buttonbusy setTimeout buttondone 1000 var button tsuigettoolbarbuttons0 buttonbusy setTimeout buttondone 1000 The busy method supports an optional status message var button tsuigettoolbarbuttons0 buttonbusyMaking progress setTimeout buttondone 1000 var button tsuigettoolbarbuttons0 buttonbusyMaking progress setTimeout buttondone 1000 Button groups You can also group buttons in arrays to create button groups that look like this tsuigettoolbarbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger tsuigettoolbarbuttons label Normal label Normal label Accept type tsprimary label Reject type tsdanger You can of course also create grouped buttons with icons instead of text var group tsuigettoolbarbuttons2 grouppush icon tsiconother type tsdanger var group tsuigettoolbarbuttons2 grouppush icon tsiconother type tsdanger Heres a summary of the buttons collection and button model ToolBarsearch Youll get a dedicated search field by passing an object to the search method tsuigettoolbarsearch onsearch functionvalue tsuiNotificationsuccessvalue Search cleared tsuigettoolbarsearch onsearch functionvalue tsuiNotificationsuccessvalue Search cleared Search callbacks The onsearch callback gets invoked when when the user presses ENTER var search tsuigettoolbarsearch searchvalue Press ENTER here searchonsearch functionvalue tsuiNotificationsuccessvalue Search cleared var search tsuigettoolbarsearch searchvalue Press ENTER here searchonsearch functionvalue tsuiNotificationsuccessvalue Search cleared If defined the onidle method gets called whenever the user pauses typing var search tsuigettoolbarsearch searchvalue Try it now searchonidle functionvalue tsuiNotificationsuccessvalue var search tsuigettoolbarsearch searchvalue Try it now searchonidle functionvalue tsuiNotificationsuccessvalue The onidle method may also be called when the field loses focus The idletime property controls the timeout value default is 500 milliseconds Search flex You can flex the search field to make it stretch the available width of the ToolBar In that case it will remain expanded even when theres no default value tsuigettoolbarsearch info Flex all the way flex 1 tsuigettoolbarsearch info Flex all the way flex 1 You can also assign flex to buttons although that has little practical value In the future we may provide a more advanced distribution scheme Thats why we use a number instead of a boolean but you should always use 1 for now Here an overview of the properties and methods of the Search model and heres a final overview of the ToolBar methods windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Tooltip","href":"components/tooltip/index.html","content":"Tooltip Tooltip Use the tooltip to show more information to client Try to hover the Tooltip Tooltip Tooltip Tooltip You need to assign the datatstitle to the Tooltip element to initialize a tooltip Tooltip Tooltip windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,null,{"title":"UserImage","href":"components/userimages/index.html","content":"UserImage If the user didnt upload a photo the UserImage will generate a fallback image based on his or her name You can initialize a UserImage by assigning datatsUserImage to an img element A fallback image will be generated based on the users name if the image has no src attribute or if the image somehow failed to load You also can define initials in parentheses For exampleKarl Alfonso Benson KB you will get KB as an initials The image defaults to a size of 44x44 pixels If you prefer a different size youll need to specify both width and height as attributes in the HTML You can select users from a menu by adding the classname tsusermenu to a standard Menu while also replacing the icon i element with a UserImage Jim Bob Johnson jimbobcompanycom Karl Benson karlcompanycom Marshall Garrett marshallcompanycom Jim Bob Johnson jimbobcompanycom Karl Benson karlcompanycom Marshall Garrett marshallcompanycom Jim Bob Johnson jimbobcompanycom Karl Benson karlcompanycom Marshall Garrett marshallcompanycom JSON API In case you need to work with the JSON model of an UserImage directly this is all you need to know If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"UserImage JSON API","href":"components/userimages/json.html","content":"UserImage JSON API In case you need to work with the JSON model of an UserImage directly this is what you need to know If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"components/userimages/tabs.html","content":""},{"title":"Get Started","href":"getstarted/index.html","content":"Get started This is a good starting point also for visual designers who prefer to work in HTML because the stylesheet delivers all the fonts and icons etc CDN version edbmldeclareedbmlZ2dVzsb1asfunction edbml use strict var out edbmlout txt edbmlsafetext outhtml To get Tradeshift UI up and running on your page simply include tsjs and tscss in an appropriate version The latest version is txttsuiversion return outwrite NPM version Tradeshift UI is also available as a npm package You can simply install it in your project executing the following command npm i tradeshifttradeshiftui save npm i tradeshifttradeshiftui save then dont forget to import tsjs and tscss in your main application entrypoint import tradeshifttradeshiftui import tradeshifttradeshiftuitscss import tradeshifttradeshiftui import tradeshifttradeshiftuitscss there is a style helpers in the package so you can import it somewhere in your shared styles module Please note that since it is a less file you should equip your build pipeline with less files loader import tradeshifttradeshiftuitsruntime import tradeshifttradeshiftuitsruntime Typescript For Typescript projects we also supply the library with type definitions Take a look at this package and add it to your Typescript application npm i tradeshifttradeshiftuitypes save npm i tradeshifttradeshiftuitypes save Initialization UI components are initialized on the DOMContentLoaded event but this might change some day To make sure that all the components are initialized before you do something to them you can wrap your code in a callback like this tsuireadyfunction var component tsuigetelement componentdosomething tsuireadyfunction var component tsuigetelement componentdosomething Before DOMContentLoaded the callback will be executed later After DOMContentLoaded the callback will execute immedeately You can perhaps make it easier for yourself by kickstarting your app with a tsuiready callback because then you wontt have to worry about it later on tsuireadyfunction boostrapeverything tsuireadyfunction boostrapeverything Before we begin youll need to mark up your page with the basic layout If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Layout","href":"getstarted/layout.html","content":"Layout This is the minimum viable HTML boilerplate for Tradeshift UI to work out The layout involves an amount of boilerplate for the flex based layout to work in all dimensions as you add more features to the app It is important to declare the markup exactly as stated and without any additional elements My App Start building your app here "},{"title":"Basic rules","href":"getstarted/rules.html","content":"Basic rules Tradeshift UI assumes ownership of The datats HTML attribute All HTML attributes that start with datats dot All HTML attributes that start with datats dash All CSS classnames that start with ts dash The global namespace object tsui Future rights for Custom Element names prefixed ts hyphen are reserved If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"","href":"getstarted/tabs.html","content":""},{"title":"Usage","href":"getstarted/usage.html","content":"Basic usage You will use any combination of HTML attributes CSS classnames and JavaScript interfaces to deal with the different components Most components are used simply by adding the datats attribute to elements The framework will recognize this attribute and add behavior and styling Config attributes Additional attributes may be used to configure the component By convention these will be prefixed with datats including the dot The datatsopen attribute would for example open the aside JS interface The component may also expose a JavaScript API You can get hold of the implementation using tsuiget which takes an element or a CSS selector as argument If you use a selector the query will be scoped from the document root var element documentquerySelectormyaside tsuigetelement component componentopen APIonly components Components that embody more complex behavior will usually be dealt with through a pure JavaScript API so without writing markup This will come in handy when we decide to change the complex behavior at a later stage tsui DatePicker title Your Birthday value 19730326 open When making apps with UI components theres a few basic rules we would like you to observe If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Tradeshift UI","href":"index.html","content":"security Tradeshift UI includes menuhtml svgicons menujson windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},{"title":"Tradeshift UI","href":"intro/index.html","content":"Tradeshift UI UI components range from simple buttons and icons to fancy datepickers and dropdown menus The target audience for Tradeshift UI is both developers and designers For Developers For Tradeshift apps the UI components are built to allow for consistent styling and experiences across internal apps For thirdparties the UI components are designed to bring visual consistency with internal applications as part of the Tradeshift platform Get Started Everything you need to use Tradeshift UI Components in your app Components Overview The building blocks that Tradeshift apps are made of Great Appendix Colors typography bonus features and notes on responsive design tsuireadyfunction tsuiNote icon tsiconheart text Check out Tradeshift new Web Componentpowered UI library Elementshttpuitradeshiftcomv12appendixelements windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"title":"Search","href":"search/index.html","content":"If you find a bug or need a feature Create GitHub Issue windowdataLayer windowdataLayer function gtag dataLayerpusharguments gtagjs new Date gtagconfig UA1271069471"},null,null]