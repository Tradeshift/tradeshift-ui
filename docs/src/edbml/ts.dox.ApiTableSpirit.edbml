<!DOCTYPE edbml>
<script>
	<?param name="api" type="object"?>
	
	<table class="api">
		if(api.name) {
			renderCaption(api.name);
		}
		if(api.properties) {
			renderProps(api.properties);
		}
		if(api.methods) {
			renderMethods(api.methods);
		}
	</table>

	function renderCaption(name) {
		<caption>
			<code>${name}</code>
		</caption>
	}

	function renderProps(props) {
		<tbody>
			<tr>
				<th>Property</th>
				<th colspan="2">Type</th>
			</tr>
			props.forEach(function(prop) {
				<tr>
					<td><code>${prop.name || ''}</code></td>
					<td>
						format(prop.type);
					</td>
					@class = prop.todo ? 'todo' : null;
					<td @class>
						out.html += prop.desc;
					</td>
				</tr>	
			});
		</tbody>
	}

	function renderMethods(methods) {
		<tbody>
			<tr>
				<th>Method</th>
				<th colspan="2">
					if(methods.some(hasparams)) {
						<span>Params</span>
					}
				</th>
			</tr>
			methods.forEach(function(method) {
				<tr>
					<td><code>${method.name || ''}</code></td>
					<td>
						format(method.args);
					</td>
					<td>
						out.html += returntype(method.type, method.desc);
					</td>
				</tr>	
			});
		</tbody>
	}
	
	function hasparams(method) {
		return method.args && method.args.length;
	}

	function format(args) {
		if(args && args.length && !Array.isArray(args)) {
			args = [args];
		}
		args = (args||[]);
		var ends = args.length - 1;
		args.forEach(function(type, i) {
			if(type.startsWith('(')) {
				<code>${type}</code>
			} else {
				<code>{${type}}</code>
			}
			if(i < ends) {
				<br/>
			}
		});
	}

	function returntype(type, desc) {
		if(type) {
			var fix = !desc.trimRight().endsWith('.');
			desc = desc + (fix ? '.' : '');
			return desc + ' Returns {<code>' + type + '</code>}';
		} else {
			return desc;
		}
	}

</script>
